[
  {
    "type": "php",
    "functions": [
      "get_post",
      "output_field_input"
    ],
    "classes": [
      "EM_Attendee_Form"
    ],
    "comments": [
      "/**\n * Extends the EM_Form to take into consideration the fact that many attendee sub-forms are submitted in one booking, unlike EM_Form which is gear",
      "/**\n\t * For use in output_field_input\n\t * @var int\n\t */",
      "/*\n     * Extends the default function to search within a request variable which contains an array of attendee forms. The $ticket_id and $attendee_ind",
      "//dates and time are special",
      "/* \n     * Overrides default method by search/replacing a specific string of text located in the input field name - [%n] - which represents the number",
      "//fix for previously not escaping arrays during saving and comparing to escaped values before output",
      "//get the field output",
      "//replace %n with attendee number where appropriate"
    ],
    "length": 3385,
    "preview": "<?php\n/**\n * Extends the EM_Form to take into consideration the fact that many attendee sub-forms are submitted in one booking, unlike EM_Form which is geared to dealing with a single simple form submission.\n * @author marcus\n *\n */\nclass EM_Attendee",
    "file": "src/code/events-manager-pro/add-ons/bookings-form/attendee-form.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "get_form_template",
      "get_form",
      "get_forms",
      "get_forms_names",
      "booking_form",
      "em_register_new_user_pre",
      "em_booking_get_post",
      "em_booking_validate",
      "em_booking_save",
      "em_bookings_added",
      "get_booking_data",
      "placeholders",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "em_bookings_single_custom",
      "em_event_save_meta_pre",
      "event_bookings_meta_box",
      "admin_page_actions",
      "admin_page",
      "data_privacy_export"
    ],
    "classes": [
      "EM_Booking_Form"
    ],
    "comments": [
      "/**\n\t * @var EM_Form\n\t */",
      "//Booking admin and exports",
      "//show booking form and ticket summary",
      "// Actions and Filters",
      "//handle the booking form template",
      "//Booking interception",
      "//in order to disable the form if booking button is pressed",
      "//Mulitiple Booking Mode",
      "//get post data + validate",
      "//add new user fields to current EM_Person instance for use on this run",
      "//add new user fields to current EM_Person instance for use on this run",
      "//get post data + validate",
      "//add extra use reg data",
      "//add extra use reg data",
      "//Placeholder overriding",
      "//custom form chooser in event bookings meta box:",
      "/**\n\t * Gets the default form structure for creating a new form\n\t * @return array\n\t */",
      "/**\n\t * @param EM_Booking $EM_Booking\n\t */",
      "//special lookup for multiple bookings",
      "//make sure we don't need to get another form rather than the one already stored in this object",
      "//get the right form",
      "/**\n\t * Shows the actual booking form. \n\t * @param EM_Event $event\n\t */",
      "//emp_booking_form_booking_form depreciated, use em_booking_form filter instead at later priority to override this",
      "/**\n\t * @param boolean $result\n\t * @param EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "//get, store and validate post data",
      "//skip registration fields if manually booking someone that already is a user",
      "//assign a random property so it's never saved",
      "//get results and put them into booking meta",
      "//only save reg fields on first go",
      "//registration fields",
      "//ignore captchas, only for verification",
      "/**\n\t * @param boolean $result\n\t * @param EM_Booking $EM_Booking\n\t * @return boolean\n\t */",
      "//no validation of user fields for current bookings",
      "//in the event we're validating a booking that wasn't retrieved by post, with booking meta",
      "//MB Mode doing a final validation, so no need to re-check captcha",
      "//MB Mode doing a final validation, so no need to re-check captcha",
      "//assign the common registration fields to person object in case used in this instance",
      "/**\n\t * Returns a formatted multi-dimensional associative array of booking form and user information for a specific booking (not including attendees).",
      "/**\n\t * @param string $replace\n\t * @param EM_Booking $EM_Booking\n\t * @param string $full_result\n\t * @param string $target\n\t * @param array $placeholde",
      "//special user_name case",
      "//user profile is freshest, using this",
      "//reg fields only exist as reg fields",
      "//match for custom field value",
      "//user profile is freshest, using this",
      "//reg fields only exist as reg fields",
      "//user profile is freshest, using this",
      "//reg fields only exist as reg fields",
      "//match for custom field value",
      "//output HTML content if requested specifically",
      "//no need for a filter, use the em_booking_email_placeholders filter",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Table and CSV Export\n\t * -----------------------------------------------",
      "//we're either viewing booking columns for a specific event, or all events, whether or not we're searching for a specific ticket.",
      "//user fields already handled, htmls shouldn't show",
      "/*\n\t * ----------------------------------------------------------\n\t * Event Admin Functions\n\t * ------------------------------------------------------",
      "/**\n\t * Outputs booking form information when viewing a booking in the admin area.  \n\t * @param EM_Booking $EM_Booking\n\t */",
      "//if you want to mess with these values, intercept the em_bookings_single_custom instead",
      "//get value of field",
      "// legacy bug, user can create fields with greater than 255 chars but db is max 255 char key including the array field",
      "//account for the free version and the booking_comment field so that old booking info still shows",
      "//input value should be blank, not n/a",
      "/**\n\t * Saves the custom booking form as post meta. This is done on em_event_save_meta_pre since at that point we know the post id and this will get p",
      "//if just duplicated, we ignore this and let EM carry over duplicate event data",
      "//Make sure form id exists",
      "//add or modify custom booking form id in post data",
      "//Get available coupons for user",
      "//get booking form id directly from event meta, since self::get_form() returns the default form if 0 is the form id.",
      "/*\n\t * ----------------------------------------------------------\n\t * ADMIN Functions\n\t * ----------------------------------------------------------\n\t",
      "//Load the right form",
      "//set up booking form field map and save/retreive previous data",
      "//Save into DB rather than as an option",
      "//make this booking form the default",
      "//load and save booking form object with new name",
      "//load and save booking form object with new name",
      "//create new form with this name and save first off",
      "//get value of field",
      "//account for the free version and the booking_comment field so that old booking info still shows"
    ],
    "length": 36075,
    "preview": "<?php\nclass EM_Booking_Form {\n\tstatic $validate;\n\t/**\n\t * @var EM_Form\n\t */\n\tstatic $form;\n\tstatic $form_id;\n\tstatic $event_id;\n\tstatic $form_name;\n\tstatic $form_template;\n\t\n\tpublic static function init(){\t\n\t\t//Menu/admin page\n\t\tadd_action('admin_ini",
    "file": "src/code/events-manager-pro/add-ons/bookings-form/bookings-form.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "add_action",
      "admin_init",
      "get_form_template",
      "get_form",
      "get_form_id",
      "get_forms",
      "get_forms_names",
      "get_ticket_form",
      "get_booking_attendees",
      "get_ticket_attendees",
      "get_ticket_booking_attendee",
      "em_ticket_booking_output_placeholder",
      "js",
      "tickets_form",
      "ticket_single_form",
      "ticket_form",
      "em_booking_get_post",
      "em_booking_validate",
      "intercept_csv_export",
      "em_bookings_table_export_options",
      "em_bookings_admin_ticket",
      "em_bookings_admin_ticket_booking_row",
      "em_bookings_admin_ticket_booking_row_template",
      "em_bookings_single_footer",
      "admin_form",
      "em_event_save_meta_pre",
      "event_attendee_custom_form",
      "placeholders",
      "admin_page_actions",
      "admin_page",
      "data_privacy_export"
    ],
    "classes": [
      "EM_Attendees_Form"
    ],
    "comments": [
      "/**\n\t * @var EM_Attendee_Form\n\t */",
      "//Booking Admin Pages",
      "// show admin ticket editing form and ticket summary",
      "// template for admin ticket editing/adding",
      "//show booking form and ticket summary",
      "//show booking form and ticket summary",
      "// Actions and Filters",
      "// add output information to an EM_Ticket_Booking:output() function",
      "//Booking interception - will not trigger on multi-booking checkout",
      "//get post data + validate",
      "//Placeholder overriding",
      "//custom form chooser in event bookings meta box:",
      "/**\n\t * Gets the default form structure for creating a new form\n\t * @return array\n\t */",
      "/**\n\t * Get the EM_Attendee_Form (Extended EM_Form)\n\t * @param EM_Event|int $EM_Event    EM_Event object or event ID, if null/false provided then the ",
      "//empty form to avoid errors",
      "//modify field ids to contain ticket number and []",
      "// run filter before cached form is used",
      "/**\n\t * Gets the form ID to use from a given EM_Event object or returns the default form id if not defined or no object passed\n\t * @param EM_Event $EM",
      "/**\n\t * Gets all the attendee forms stored in the wp_em_meta table \n\t * @return array\n\t */",
      "/**\n\t * Returns an associative array of form ID => Name\n\t * @return array\n\t */",
      "/**\n\t * Converts the relevant field names to be relevant for attendees format (i.e. in an array due to unknown number of attendees per booking)\n\t * @p",
      "//modify field ids to contain ticket number and []",
      "/**\n\t * Returns a formatted multi-dimensional associative array of attendee information for a specific booking, split by ticket > attendee > attendee ",
      "/* @var $EM_Ticket_Booking EM_Ticket_Booking */",
      "//Display ticket info",
      "/**\n\t * Returns a formatted multi-dimensional associative array of attendee information for a specific booking ticket.\n\t * example : array('Attendee 1",
      "//can be repeated since object is stored temporarily, for back-compat",
      "/**\n\t * Returns an array of form field labels and values for the specific ticket booking in question, whose data is stored in the em_tickets_bookings_",
      "//can be repeated since object is stored temporarily",
      "// the data this attendee will have",
      "//no attendees so pad with empty values",
      "/**\n\t * Adds JS to the bottom of a page with an EM booking form\n\t * @param string $original_js\n\t * @param EM_Event $EM_Event\n\t * \n\t * @return string\n\t",
      "/**\n\t * For each ticket in the booking table, add a hidden row with ticket form\n\t * @param EM_Ticket $EM_Ticket\n\t */",
      "//if form id is empty, we don't output anything",
      "//zero value allowed",
      "/**\n\t * For each ticket row in the booking table, add a hidden row with ticket form\n\t * @param EM_Ticket $EM_Ticket\n\t */",
      "//zero value allowed",
      "/**\n\t * Hooks into em_booking_get_post and validates the \n\t * @param boolean $result\n\t * @param EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "//get, store and validate post data",
      "//passing false for $validate, since it'll be done in em_booking_validate hook",
      "//get results and put them into booking meta",
      "// add this back into booking meta, for backwards compatiblity, we'll offer an option to delete in the future",
      "/**\n\t * Validates a booking against the attendee fields provided\n\t * @param boolean $result\n\t * @param EM_Booking $EM_Booking\n\t * @return boolean\n\t */",
      "//going through each ticket type booked",
      "//get original field labels for replacement of #NUM#",
      "//validate a form for each space booked",
      "//unlike post values each attendee has an array within the array of a ticket attendee info",
      "//change the field labels in case of #NUM#",
      "//validate and save errors within this ticket user",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Table and CSV Export\n\t * -----------------------------------------------",
      "/**\n\t * Intercepts a CSV export request before the core version hooks in and using similar code generates a breakdown of bookings with all attendees i",
      "// set up output objects, http headers, etc.",
      "//if you're having server memory issues, try messing with this number",
      "//generate bookings export according to search request",
      "// UTF-8 for MS Excel (a little hacky... but does the job)",
      "/* @var EM_Booking $EM_Booking */",
      "/* @var EM_Ticket_Booking $EM_Ticket_Booking */",
      "//copied from export_overlay_show_tickets function:",
      "//single ticket mode means no splitting by ticket type",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Admin Functions\n\t * ----------------------------------------------------",
      "/**\n\t * Displayed when viewing/editing info about a single booking under each ticket.\n\t * @param EM_Ticket $EM_Ticket\n\t * @param EM_Booking $EM_Bookin",
      "//if you want to mess with these values, intercept the em_bookings_single_custom action instead",
      "//validate a form for each space booked",
      "//output the field values",
      "//preload the form object with this attendee information",
      "//output fields form",
      "//reset form fields to blank for template",
      "//do_action('em_bookings_admin_ticket_booking_info', $EM_Ticket_Booking, $EM_Booking, $EM_Ticket_Bookings);",
      "//no attendees so pad with empty values",
      "/**\n\t * Adds JS to the bottom of a page with an EM booking form\n\t * @param string $original_js\n\t * @param EM_Event $EM_Event\n\t *\n\t * @return string\n\t ",
      "/*\n\t * ----------------------------------------------------------\n\t * Event Admin Functions\n\t * ------------------------------------------------------",
      "/**\n\t * Generates a condensed attendee form for admins, stripping away HTML fields.\n\t * @param EM_Attendee_Form $EM_Form\n\t * @param int $ticket_id\n\t *",
      "/**\n\t * Saves the custom attendee form as post meta. This is done on em_event_save_meta_pre since at that point we know the post id and this will get ",
      "//if just duplicated, we ignore this and let EM carry over duplicate event data",
      "//Make sure form id exists",
      "//add or modify custom booking form id in post data",
      "/**\n\t * Generates a dropdown of available custom attendee forms for selection when editing the event bookings settings\n\t */",
      "//Get available attendee forms for user",
      "//get attendee form id directly from event meta, since self::get_form_id() returns the default form if 0 is the form id.",
      "/*\n\t * ----------------------------------------------------------\n\t * Placeholders\n\t * ----------------------------------------------------------\n\t */",
      "/**\n\t * @param string $replace\n\t * @param EM_Booking $EM_Booking\n\t * @param string $full_result\n\t * @return string\n\t */",
      "//no need for a filter, use the em_booking_email_placeholders filter",
      "/*\n\t * ----------------------------------------------------------\n\t * ADMIN Functions\n\t * ----------------------------------------------------------\n\t",
      "/**\n\t * Catches posted data when editing custom attendee forms in the Form Editor \n\t */",
      "//Load the right form",
      "//set up booking form field map and save/retreive previous data",
      "//Save into DB rather than as an option",
      "//make this booking form the default",
      "//load and save booking form object with new name",
      "//load and save booking form object with new name",
      "//create new form with this name and save first off",
      "/**\n\t *  Outputs the form editor in the admin area\n\t */",
      "//skip multiple bookings",
      "//Display ticket info",
      "//display a row for each space booked on this ticket"
    ],
    "length": 46335,
    "preview": "<?php\ninclude('attendee-form.php');\nclass EM_Attendees_Form {\n\tstatic $validate;\n\t/**\n\t * @var EM_Attendee_Form\n\t */\n\tstatic $form;\n\tstatic $form_id;\n\tstatic $form_name;\n\tstatic $form_template;\n\t\n\tpublic static function init(){\n\t\t//Menu/admin page\n\t\t",
    "file": "src/code/events-manager-pro/add-ons/bookings-form/attendee-forms.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//clear all datepickers",
      "//clear all timepickers - consequently, also other click/blur/change events, recreate the further down",
      "//get the attendee form template and clone it",
      "//add or subtract fields according to spaces",
      "// we're adding new forms, so we clone our newly cloned and trimmed template form and keep adding it before the template, which is last",
      "//form tooltips - delete all and recreate events",
      "//(re)load attendee forms for fields with spaces pre-selected"
    ],
    "length": 3436,
    "preview": "var em_setup_attendee_forms = function( spaces, fieldset = null, fieldset_container, fields_template){\n\tif( fields_template.length === 0 ) return;\n\tfields_template.find('input.em-date-input-loc').datepicker('destroy').attr('id', ''); //clear all date",
    "file": "src/code/events-manager-pro/add-ons/bookings-form/attendee-forms.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 3006,
    "preview": "var em_setup_attendee_forms=function(spaces,fieldset,fieldset_container,fields_template){if(fields_template.length===0)return;fieldset_container.find(\"input.em-date-input-loc\").datepicker(\"destroy\").attr(\"id\",\"\");fieldset_container.find(\".em-time-ran",
    "file": "src/code/events-manager-pro/add-ons/bookings-form/attendee-forms.min.js"
  }
]