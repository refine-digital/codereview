[
  {
    "type": "php",
    "functions": [
      "str_split",
      "__construct",
      "getBarcodeArray",
      "binarize",
      "encodeString",
      "encodeMask",
      "setFrameAt",
      "getFrameAt",
      "getNextPosition",
      "init",
      "getCode",
      "writeFormatInformation",
      "mask0",
      "mask1",
      "mask2",
      "mask3",
      "mask4",
      "mask5",
      "mask6",
      "mask7",
      "generateMaskNo",
      "makeMaskNo",
      "makeMask",
      "calcN1N3",
      "evaluateSymbol",
      "mask",
      "isdigitat",
      "isalnumat",
      "identifyMode",
      "eatNum",
      "eatAn",
      "eatKanji",
      "eat8",
      "splitString",
      "toUpper",
      "newInputItem",
      "encodeModeNum",
      "encodeModeAn",
      "encodeMode8",
      "encodeModeKanji",
      "encodeModeStructure",
      "encodeBitStream",
      "appendNewInputItem",
      "insertStructuredAppendHeader",
      "calcParity",
      "checkModeNum",
      "estimateBitsModeNum",
      "lookAnTable",
      "checkModeAn",
      "estimateBitsModeAn",
      "estimateBitsMode8",
      "estimateBitsModeKanji",
      "checkModeKanji",
      "check",
      "estimateBitStreamSize",
      "estimateVersion",
      "lengthOfCode",
      "createBitStream",
      "convertData",
      "appendPaddingBit",
      "mergeBitStream",
      "getBitStream",
      "getByteStream",
      "allocate",
      "newFromNum",
      "newFromBytes",
      "appendBitstream",
      "appendNum",
      "appendBytes",
      "bitstreamToByte",
      "qrstrset",
      "getDataLength",
      "getECCLength",
      "getWidth",
      "getRemainder",
      "getMinimumVersion",
      "lengthIndicator",
      "maximumWords",
      "getEccSpec",
      "putAlignmentMarker",
      "putAlignmentPattern",
      "getVersionPattern",
      "getFormatInfo",
      "putFinderPattern",
      "createFrame",
      "newFrame",
      "rsBlockNum",
      "rsBlockNum1",
      "rsDataCodes1",
      "rsEccCodes1",
      "rsBlockNum2",
      "rsDataCodes2",
      "rsEccCodes2",
      "rsDataLength",
      "rsEccLength",
      "init_rs",
      "modnn",
      "init_rs_char",
      "encode_rs_char"
    ],
    "classes": [
      "supports",
      "is",
      "supports",
      "is",
      "source",
      "are",
      "supports",
      "is",
      "source",
      "QRcode",
      "constructor"
    ],
    "comments": [
      "//============================================================+",
      "// File name   : qrcode.php",
      "// Begin       : 2010-03-22",
      "// Last Update : 2010-03-29",
      "// Version     : 1.0.002",
      "// License     : GNU LGPL v.3 (http://www.gnu.org/copyleft/lesser.html)",
      "// \t----------------------------------------------------------------------------",
      "// \tThis library is free software; you can redistribute it and/or",
      "// \tmodify it under the terms of the GNU Lesser General Public",
      "// \tLicense as published by the Free Software Foundation; either",
      "// \tversion 3 of the License, or any later version.",
      "// \tThis library is distributed in the hope that it will be useful,",
      "// \tbut WITHOUT ANY WARRANTY; without even the implied warranty of",
      "// \tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU",
      "// \tLesser General Public License for more details.",
      "// \tYou should have received a copy of the GNU Lesser General Public",
      "// \tLicense along with this library; if not, write to the Free Software",
      "// \tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA",
      "//  or browse http://www.gnu.org/copyleft/lesser.html",
      "//  ----------------------------------------------------------------------------",
      "// Class to create QR-code arrays for TCPDF class.",
      "// QR Code symbol is a 2D barcode that can be scanned by",
      "// handy terminals such as a mobile phone with CCD.",
      "// The capacity of QR Code is up to 7000 digits or 4000",
      "// characters, and has high robustness.",
      "// This class supports QR Code model 2, described in",
      "// JIS (Japanese Industrial Standards) X0510:2004",
      "// or ISO/IEC 18004.",
      "// Currently the following features are not supported:",
      "// ECI and FNC1 mode, Micro QR Code, QR Code model 1,",
      "// This class is derived from the following projects:",
      "// ---------------------------------------------------------",
      "// \"PHP QR Code encoder\"",
      "// License: GNU-LGPLv3",
      "// Copyright (C) 2010 by Dominik Dzienia <deltalab at poczta dot fm>",
      "// http://phpqrcode.sourceforge.net/",
      "// https://sourceforge.net/projects/phpqrcode/",
      "// The \"PHP QR Code encoder\" is based on",
      "// \"C libqrencode library\" (ver. 3.1.1)",
      "// License: GNU-LGPL 2.1",
      "// Copyright (C) 2006-2010 by Kentaro Fukuchi",
      "// http://megaui.net/fukuchi/works/qrencode/index.en.html",
      "// Reed-Solomon code encoder is written by Phil Karn, KA9Q.",
      "// Copyright (C) 2002-2006 Phil Karn, KA9Q",
      "// QR Code is registered trademark of DENSO WAVE INCORPORATED",
      "// http://www.denso-wave.com/qrcode/index-e.html",
      "// ---------------------------------------------------------",
      "// Author: Nicola Asuni",
      "// (c) Copyright 2010:",
      "//               Nicola Asuni",
      "//               Tecnick.com S.r.l.",
      "//               Via della Pace, 11",
      "//               09044 Quartucciu (CA)",
      "//               ITALY",
      "//               www.tecnick.com",
      "//               info@tecnick.com",
      "//============================================================+",
      "/**\n * Class to create QR-code arrays for TCPDF class.\n * QR Code symbol is a 2D barcode that can be scanned by handy terminals such as a mobile phone",
      "/**\n\t * Indicate that definitions for this class are set\n\t */",
      "// -----------------------------------------------------",
      "// Encoding modes (characters which can be encoded in QRcode)",
      "/**\n\t * Encoding mode\n\t */",
      "/**\n\t * Encoding mode numeric (0-9). 3 characters are encoded to 10bit length. In theory, 7089 characters or less can be stored in a QRcode.\n\t */",
      "/**\n\t * Encoding mode alphanumeric (0-9A-Z $%*+-./:) 45characters. 2 characters are encoded to 11bit length. In theory, 4296 characters or less can be",
      "/**\n\t * Encoding mode 8bit byte data. In theory, 2953 characters or less can be stored in a QRcode.\n\t */",
      "/**\n\t * Encoding mode KANJI. A KANJI character (multibyte character) is encoded to 13bit length. In theory, 1817 characters or less can be stored in a",
      "/**\n\t * Encoding mode STRUCTURED (currently unsupported)\n\t */",
      "// -----------------------------------------------------",
      "// Levels of error correction.",
      "// QRcode has a function of an error correcting for miss reading that white is black.",
      "// Error correcting is defined in 4 level as below.",
      "/**\n\t * Error correction level L : About 7% or less errors can be corrected.\n\t */",
      "/**\n\t * Error correction level M : About 15% or less errors can be corrected.\n\t */",
      "/**\n\t * Error correction level Q : About 25% or less errors can be corrected.\n\t */",
      "/**\n\t * Error correction level H : About 30% or less errors can be corrected.\n\t */",
      "// -----------------------------------------------------",
      "// Version. Size of QRcode is defined as version.",
      "// Version is from 1 to 40.",
      "// Version 1 is 21*21 matrix. And 4 modules increases whenever 1 version increases.",
      "// So version 40 is 177*177 matrix.",
      "/**\n\t * Maximum QR Code version.\n\t */",
      "/**\n\t * Maximum matrix size for maximum version (version 40 is 177*177 matrix).\n\t */",
      "// -----------------------------------------------------",
      "/**\n\t * Matrix index to get width from $capacity array.\n\t */",
      "/**\n\t * Matrix index to get number of words from $capacity array.\n\t */",
      "/**\n\t * Matrix index to get remainder from $capacity array.\n\t */",
      "/**\n\t * Matrix index to get error correction level from $capacity array.\n\t */",
      "// -----------------------------------------------------",
      "// Structure (currently usupported)",
      "/**\n\t * Number of header bits for structured mode\n\t */",
      "/**\n\t * Max number of symbols for structured mode\n\t */",
      "// -----------------------------------------------------",
      "/**\n\t * Down point base value for case 1 mask pattern (concatenation of same color in a line or a column)\n\t */",
      "/**\n\t * Down point base value for case 2 mask pattern (module block of same color)\n\t */",
      "/**\n\t * Down point base value for case 3 mask pattern (1:1:3:1:1(dark:bright:dark:bright:dark)pattern in a line or a column)\n\t */",
      "/**\n\t * Down point base value for case 4 mask pattern (ration of dark modules in whole)\n\t */",
      "// -----------------------------------------------------",
      "// Optimization settings",
      "/**\n\t * if true, estimates best mask (spec. default, but extremally slow; set to false to significant performance boost but (propably) worst quality c",
      "/**\n\t * if false, checks all masks available, otherwise value tells count of masks need to be checked, mask id are got randomly\n\t */",
      "/**\n\t * when QR_FIND_BEST_MASK === false\n\t */",
      "// -----------------------------------------------------",
      "// end of definitions",
      "// #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#",
      "// for compaibility with PHP4",
      "/**\n    \t * Convert a string to an array (needed for PHP4 compatibility)\n    \t * @param string $string The input string.\n    \t * @param int $split_len",
      "// #####################################################",
      "/**\n\t * Class to create QR-code arrays for TCPDF class.\n\t * QR Code symbol is a 2D barcode that can be scanned by handy terminals such as a mobile pho",
      "/**\n\t\t * @var barcode array to be returned which is readable by TCPDF\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var QR code version. Size of QRcode is defined as version. Version is from 1 to 40. Version 1 is 21*21 matrix. And 4 modules increases whene",
      "/**\n\t\t * @var Levels of error correction. See definitions for possible values.\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var Encoding mode\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var if true the input string will be converted to uppercase\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var structured QR code (not supported yet)\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var mask data\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var width\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var frame\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var X position of bit\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var Y position of bit\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var direction\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var single bit\n\t\t * @access protected\n\t\t */",
      "// ---- QRrawcode ----",
      "/**\n\t\t * @var data code\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var error correction code\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var blocks\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var Reed-Solomon blocks\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var counter\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var data length\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var error correction length\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var b1\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var run length\n\t\t * @access protected\n\t\t */",
      "// ---- QRsplit ----",
      "/**\n\t\t * @var input data string\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var input items\n\t\t * @access protected\n\t\t */",
      "// Reed-Solomon items",
      "/**\n\t\t * @var Reed-Solomon items\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var array of frames\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var alphabet-numeric convesion table\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var array Table of the capacity of symbols\n\t\t * See Table 1 (pp.13) and Table 12-16 (pp.30-36), JIS X0510:2004.\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var array Length indicator\n\t\t * @access protected\n\t\t */",
      "/**\n\t\t * @var array Table of the error correction code (Reed-Solomon block)\n\t\t * See Table 12-16 (pp.30-36), JIS X0510:2004.\n\t\t * @access protected\n\t\t",
      "/**\n\t\t * @var array Positions of alignment patterns.\n\t\t * This array includes only the second and the third position of the alignment patterns. Rest o",
      "/**\n\t\t * @var array Version information pattern (BCH coded).\n\t\t * See Table 1 in Appendix D (pp.68) of JIS X0510:2004.\n\t\t * size: [QRSPEC_VERSION_MAX ",
      "/**\n\t\t * @var array Format information\n\t\t * @access protected\n\t\t */",
      "// -------------------------------------------------",
      "// -------------------------------------------------",
      "/**\n\t\t * This is the class constructor.\n\t\t * Creates a QRcode object\n\t\t * @param string $code code to represent using QRcode\n\t\t * @param string $eclev",
      "// set error correction level",
      "/**\n\t\t * Returns a barcode array which is readable by TCPDF\n\t\t * @return array barcode array readable by TCPDF;\n\t\t * @access public\n\t\t */",
      "/**\n\t\t * Convert the frame in binary form\n\t\t * @param array $frame array to binarize\n\t\t * @return array frame in binary form\n\t\t */",
      "// the frame is square (width = height)",
      "/**\n\t\t * Encode the input string to QR code\n\t\t * @param string $string input string to encode\n\t\t */",
      "/**\n\t\t * Encode mask\n\t\t * @param int $mask masking mode\n\t\t */",
      "// inteleaved data and ecc codes",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Set frame value at specified position\n\t\t * @param array $at x,y position\n\t\t * @param int $val value of the character to set\n\t\t */",
      "/**\n\t\t * Get frame value at specified position\n\t\t * @param array $at x,y position\n\t\t * @return value at specified position\n\t\t */",
      "/**\n\t\t * Return the next frame position\n\t\t * @return array of x,y coordinates\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Initialize code.\n\t\t * @param array $spec array of ECC specification\n\t\t * @return 0 in case of success, -1 in case of error\n\t\t */",
      "/**\n\t\t * Return Reed-Solomon block code.\n\t\t * @return array rsblocks\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Write Format Information on frame and returns the number of black bits\n\t\t * @param int $width frame width\n\t\t * @param array $frame frame\n\t\t *",
      "/**\n\t\t * mask0\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask1\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask2\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask3\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask4\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask5\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask6\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * mask7\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n\t\t * @return int mask\n\t\t */",
      "/**\n\t\t * Return bitmask\n\t\t * @param int $maskNo mask number\n\t\t * @param int $width width\n\t\t * @param array $frame frame\n\t\t * @return array bitmask\n\t\t ",
      "/**\n\t\t * makeMaskNo\n\t\t * @param int $maskNo\n\t\t * @param int $width\n\t\t * @param int $s\n\t\t * @param int $d\n\t\t * @param boolean $maskGenOnly\n\t\t * @return",
      "/**\n\t\t * makeMask\n\t\t * @param int $width\n\t\t * @param array $frame\n\t\t * @param int $maskNo\n\t\t * @param int $level\n\t\t * @return array mask\n\t\t */",
      "/**\n\t\t * calcN1N3\n\t\t * @param int $length\n\t\t * @return int demerit\n\t\t */",
      "/**\n\t\t * evaluateSymbol\n\t\t * @param int $width\n\t\t * @param array $frame\n\t\t * @return int demerit\n\t\t */",
      "/**\n\t\t * mask\n\t\t * @param int $width\n\t\t * @param array $frame\n\t\t * @param int $level\n\t\t * @return array best mask\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Return true if the character at specified position is a number\n\t\t * @param string $str string\n\t\t * @param int $pos characted position\n\t\t * @r",
      "/**\n\t\t * Return true if the character at specified position is an alphanumeric character\n\t\t * @param string $str string\n\t\t * @param int $pos characted",
      "/**\n\t\t * identifyMode\n\t\t * @param int $pos\n\t\t * @return int mode\n\t\t */",
      "/**\n\t\t * eatNum\n\t\t * @return int run\n\t\t */",
      "/**\n\t\t * eatAn\n\t\t * @return int run\n\t\t */",
      "/**\n\t\t * eatKanji\n\t\t * @return int run\n\t\t */",
      "/**\n\t\t * eat8\n\t\t * @return int run\n\t\t */",
      "/**\n\t\t * splitString\n\t\t */",
      "/**\n\t\t * toUpper\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * newInputItem\n\t\t * @param int $mode\n\t\t * @param int $size\n\t\t * @param array $data\n\t\t * @param array $bstream\n\t\t * @return array input item\n\t\t ",
      "/**\n\t\t * encodeModeNum\n\t\t * @param array $inputitem\n\t\t * @param int $version\n\t\t * @return array input item\n\t\t */",
      "/**\n\t\t * encodeModeAn\n\t\t * @param array $inputitem\n\t\t * @param int $version\n\t\t * @return array input item\n\t\t */",
      "/**\n\t\t * encodeMode8\n\t\t * @param array $inputitem\n\t\t * @param int $version\n\t\t * @return array input item\n\t\t */",
      "/**\n\t\t * encodeModeKanji\n\t\t * @param array $inputitem\n\t\t * @param int $version\n\t\t * @return array input item\n\t\t */",
      "/**\n\t\t * encodeModeStructure\n\t\t * @param array $inputitem\n\t\t * @return array input item\n\t\t */",
      "/**\n\t\t * encodeBitStream\n\t\t * @param array $inputitem\n\t\t * @param int $version\n\t\t * @return array input item\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Append data to an input object.\n\t\t * The data is copied and appended to the input object.\n\t\t * @param array items input items\n\t\t * @param int",
      "/**\n\t\t * insertStructuredAppendHeader\n\t\t * @param array $items\n\t\t * @param int $size\n\t\t * @param int $index\n\t\t * @param int $parity\n\t\t * @return array",
      "/**\n\t\t * calcParity\n\t\t * @param array $items\n\t\t * @return int parity\n\t\t */",
      "/**\n\t\t * checkModeNum\n\t\t * @param int $size\n\t\t * @param array $data\n\t\t * @return boolean true or false\n\t\t */",
      "/**\n\t\t * estimateBitsModeNum\n\t\t * @param int $size\n\t\t * @return int number of bits\n\t\t */",
      "/**\n\t\t * Look up the alphabet-numeric convesion table (see JIS X0510:2004, pp.19).\n\t\t * @param int $c character value\n\t\t * @return value\n\t\t */",
      "/**\n\t\t * checkModeAn\n\t\t * @param int $size\n\t\t * @param array $data\n\t\t * @return boolean true or false\n\t\t */",
      "/**\n\t\t * estimateBitsModeAn\n\t\t * @param int $size\n\t\t * @return int number of bits\n\t\t */",
      "/**\n\t\t * estimateBitsMode8\n\t\t * @param int $size\n\t\t * @return int number of bits\n\t\t */",
      "/**\n\t\t * estimateBitsModeKanji\n\t\t * @param int $size\n\t\t * @return int number of bits\n\t\t */",
      "/**\n\t\t * checkModeKanji\n\t\t * @param int $size\n\t\t * @param array $data\n\t\t * @return boolean true or false\n\t\t */",
      "/**\n\t\t * Validate the input data.\n\t\t * @param int $mode encoding mode.\n\t\t * @param int $size size of data (byte).\n\t\t * @param array data data to valid",
      "/**\n\t\t * estimateBitStreamSize\n\t\t * @param array $items\n\t\t * @param int $version\n\t\t * @return int bits\n\t\t */",
      "/**\n\t\t * estimateVersion\n\t\t * @param array $items\n\t\t * @return int version\n\t\t */",
      "/**\n\t\t * lengthOfCode\n\t\t * @param int $mode\n\t\t * @param int $version\n\t\t * @param int $bits\n\t\t * @return int size\n\t\t */",
      "/**\n\t\t * createBitStream\n\t\t * @param array $items\n\t\t * @return array of items and total bits\n\t\t */",
      "/**\n\t\t * convertData\n\t\t * @param array $items\n\t\t * @return array items\n\t\t */",
      "/**\n\t\t * Append Padding Bit to bitstream\n\t\t * @param array $bstream\n\t\t * @return array bitstream\n\t\t */",
      "/**\n\t\t * mergeBitStream\n\t\t * @param array $bstream\n\t\t * @return array bitstream\n\t\t */",
      "/**\n\t\t * Returns a stream of bits.\n\t\t * @param int $items\n\t\t * @return array padded merged byte stream\n\t\t */",
      "/**\n\t\t * Pack all bit streams padding bits into a byte array.\n\t\t * @param int $items\n\t\t * @return array padded merged byte stream\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Return an array with zeros\n\t\t * @param int $setLength array size\n\t\t * @return array\n\t\t */",
      "/**\n\t\t * Return new bitstream from number\n\t\t * @param int $bits number of bits\n\t\t * @param int $num number\n\t\t * @return array bitstream\n\t\t */",
      "/**\n\t\t * Return new bitstream from bytes\n\t\t * @param int $size size\n\t\t * @param array $data bytes\n\t\t * @return array bitstream\n\t\t */",
      "/**\n\t\t * Append one bitstream to another\n\t\t * @param array $bitstream original bitstream\n\t\t * @param array $append bitstream to append\n\t\t * @return ar",
      "/**\n\t\t * Append one bitstream created from number to another\n\t\t * @param array $bitstream original bitstream\n\t\t * @param int $bits number of bits\n\t\t *",
      "/**\n\t\t * Append one bitstream created from bytes to another\n\t\t * @param array $bitstream original bitstream\n\t\t * @param int $size size\n\t\t * @param arr",
      "/**\n\t\t * Convert bitstream to bytes\n\t\t * @param array $bitstream original bitstream\n\t\t * @return array of bytes\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Replace a value on the array at the specified position\n\t\t * @param array $srctab\n\t\t * @param int $x X position\n\t\t * @param int $y Y position\n",
      "/**\n\t\t * Return maximum data code length (bytes) for the version.\n\t\t * @param int $version version\n\t\t * @param int $level error correction level\n\t\t * ",
      "/**\n\t\t * Return maximum error correction code length (bytes) for the version.\n\t\t * @param int $version version\n\t\t * @param int $level error correction",
      "/**\n\t\t * Return the width of the symbol for the version.\n\t\t * @param int $version version\n\t\t * @return int width\n\t\t */",
      "/**\n\t\t * Return the numer of remainder bits.\n\t\t * @param int $version version\n\t\t * @return int number of remainder bits\n\t\t */",
      "/**\n\t\t * Return a version number that satisfies the input code length.\n\t\t * @param int $size input code length (byte)\n\t\t * @param int $level error cor",
      "/**\n\t\t * Return the size of length indicator for the mode and version.\n\t\t * @param int $mode encoding mode\n\t\t * @param int $version version\n\t\t * @retu",
      "/**\n\t\t * Return the maximum length for the mode and version.\n\t\t * @param int $mode encoding mode\n\t\t * @param int $version version\n\t\t * @return int the",
      "// the number of bytes is required",
      "/**\n\t\t * Return an array of ECC specification.\n\t\t * @param int $version version\n\t\t * @param int $level error correction level\n\t\t * @param array $spec ",
      "/**\n\t\t * Put an alignment marker.\n\t\t * @param array $frame frame\n\t\t * @param int $width width\n\t\t * @param int $ox X center coordinate of the pattern\n\t",
      "/**\n\t\t * Put an alignment pattern.\n\t\t * @param int $version version\n\t\t * @param array $fram frame\n\t\t * @param int $width width\n\t\t * @return array fram",
      "/**\n\t\t * Return BCH encoded version information pattern that is used for the symbol of version 7 or greater. Use lower 18 bits.\n\t\t * @param int $versi",
      "/**\n\t\t * Return BCH encoded format information pattern.\n\t\t * @param array $mask\n\t\t * @param int $level error correction level\n\t\t * @return BCH encoded",
      "/**\n\t\t * Put a finder pattern.\n\t\t * @param array $frame frame\n\t\t * @param int $width width\n\t\t * @param int $ox X center coordinate of the pattern\n\t\t *",
      "/**\n\t\t * Return a copy of initialized frame.\n\t\t * @param int $version version\n\t\t * @return Array of unsigned char.\n\t\t */",
      "// Alignment pattern",
      "// Version information",
      "// and a little bit...",
      "/**\n\t\t * Set new frame for the specified version.\n\t\t * @param int $version version\n\t\t * @return Array of unsigned char.\n\t\t */",
      "/**\n\t\t * Return block number 0\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t* Return block number 1\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return data codes 1\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return ecc codes 1\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return block number 2\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return data codes 2\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return ecc codes 2\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return data length\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "/**\n\t\t * Return ecc length\n\t\t * @param array $spec\n\t\t * @return int value\n\t\t */",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Initialize a Reed-Solomon codec and add it to existing rsitems\n\t\t * @param int $symsize symbol size, bits\n\t\t * @param int $gfpoly  Field gene",
      "// - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * modnn\n\t\t * @param array RS values\n\t\t * @param int $x X position\n\t\t * @return int X osition\n\t\t */",
      "/**\n\t\t * Initialize a Reed-Solomon codec and returns an array of values.\n\t\t * @param int $symsize symbol size, bits\n\t\t * @param int $gfpoly  Field gen",
      "// Based on Reed solomon encoder by Phil Karn, KA9Q (GNU-LGPLv2)",
      "// Check parameter ranges",
      "// PHP style macro replacement ;)",
      "// Generate Galois field lookup tables",
      "// field generator polynomial is not primitive!",
      "// Form RS code generator polynomial from its roots",
      "// Find prim-th root of 1, used in decoding",
      "// intentional empty-body loop!",
      "// Multiply rs->genpoly[] by  @**(root + x)",
      "// rs->genpoly[0] can never be zero",
      "// convert rs->genpoly[] to index form for quicker encoding",
      "/**\n\t\t * Encode a Reed-Solomon codec and returns the parity array\n\t\t * @param array $rs RS values\n\t\t * @param array $data data\n\t\t * @param array $pari",
      "// the total number of symbols in a RS block",
      "// the address of an array of NN elements to convert Galois field elements in index (log) form to polynomial form",
      "// the address of an array of NN elements to convert Galois field elements in polynomial form to index (log) form",
      "// an array of NROOTS+1 elements containing the generator polynomial in index form",
      "// the number of roots in the RS code generator polynomial, which is the same as the number of parity symbols in a block",
      "// first consecutive root, index form",
      "// primitive element, index form",
      "// prim-th root of 1, index form",
      "// the number of pad symbols in a block",
      "// feedback term is non-zero",
      "// This line is unnecessary when GENPOLY[NROOTS] is unity, as it must",
      "// always be for the polynomials constructed by init_rs()",
      "// END OF \"class_exists QRcode\""
    ],
    "length": 82952,
    "preview": "<?php\n//============================================================+\n// File name   : qrcode.php\n// Begin       : 2010-03-22\n// Last Update : 2010-03-29\n// Version     : 1.0.002\n// License     : GNU LGPL v.3 (http://www.gnu.org/copyleft/lesser.html)",
    "file": "src/code/events-manager-pro/add-ons/bookings-manager/phpqrcode/bindings/tcpdf/qrcode.php"
  }
]