[
  {
    "type": "php",
    "functions": [
      "init",
      "count_sync",
      "admin_meta_box",
      "admin_menu",
      "admin_page",
      "select_page",
      "view_page",
      "edit_form"
    ],
    "classes": [
      "EM_Coupons_Admin"
    ],
    "comments": [
      "//coupon admin add/edit page",
      "/**\n     * @param EM_Coupon $EM_Coupon\n     */",
      "//a bit hacky, but this is the only way at least for now",
      "/**\n\t * @param EM_Event $EM_Event\n\t */",
      "//Get available coupons for user",
      "//get event owner to search for",
      "//show coupons that aren't event-wide or site-wide, if not in MB mode",
      "//not in multiple bookings mode and can create their own coupons",
      "//get event owner's coupons",
      "//go through coupons and remove expired coupons, but leave them hidden checked in case they were checked before and are now expired",
      "/* @var EM_Coupon $EM_Coupon */",
      "//loop through coupons and output checkboxes, or let user know no coupons were created.",
      "//Show all coupons that are automatically applied, i.e. sitewide and eventwide",
      "/* @var EM_Coupon $EM_Coupon */",
      "//use wp action/filters to mess with the menus",
      "//load coupon if necessary",
      "//save coupon if necessary",
      "//Delete if necessary",
      "//Display relevant page",
      "//check that user can access this page",
      "/* @todo change how coupon-booking relations are stored */",
      "//FIXME : coupon count not syncing correctly, using this as a fallback",
      "/* @var EM_Booking $EM_Booking */",
      "//check that user can access this page"
    ],
    "length": 24468,
    "preview": "<?php\nclass EM_Coupons_Admin {\n    static function init(){\n\t\tinclude('coupon-admin.php');\n        //coupon admin add/edit page\n        add_action('em_create_events_submenu', 'EM_Coupons_Admin::admin_menu',10,1);\n    }\n    \n    /**\n     * @param EM_Co",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupons-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_booking_get_price_adjustments",
      "get_coupon",
      "event_get_coupon",
      "event_get_coupons",
      "event_get_coupon_ids",
      "event_has_coupons",
      "booking_has_coupons",
      "booking_get_coupons",
      "cart_coupon_apply",
      "cart_coupon_apply_fallback",
      "cart_coupon_apply_ajax",
      "em_booking_get_post",
      "em_booking_validate",
      "em_booking_save",
      "placeholders",
      "em_event_get_post_meta",
      "em_event_save_meta",
      "em_event_save_events",
      "em_event_delete_meta",
      "em_booking_delete",
      "em_bookings_delete",
      "em_booking_set_status",
      "lower_booking_count",
      "refresh_counts",
      "em_booking_form_footer",
      "em_cart_footer",
      "wp_head",
      "em_cart_gateway_js",
      "em_booking_js_footer",
      "coupon_check_ajax",
      "admin_meta_box",
      "get",
      "count",
      "em_bookings_table_cols_template",
      "em_bookings_table_rows_col_coupon",
      "build_sql_conditions",
      "get_default_search"
    ],
    "classes": [
      "EM_Coupons"
    ],
    "comments": [
      "//TODO make coupons stackable",
      "//TODO add logging of coupon useage in seperate log table",
      "//add field to booking form and ajax",
      "//multiple bookings mode",
      "//add coupon field to checkout page booking form",
      "//hook into booking submission to add discount and coupon info",
      "//ajax to apply coupon",
      "//AJAX fallback to apply coupon",
      "//manual bookings - add coupons for single event manual bookings",
      "//add to any booking form",
      "//meta box hook for adding coupons to booking info",
      "//hook into booking submission to add discount and coupon info",
      "//add ajax response for coupon code queries",
      "//deal with bookings that have coupons when they get deleted or cancelled",
      "//show available coupons on event booking admin area",
      "//hook into price calculations",
      "//add coupon info to CSV",
      "//add css for coupon field",
      "//merge coupons into discounts array in new discounts format",
      "/* @var $EM_Coupon EM_Coupon */",
      "/* Event Helpers */",
      "/**\n\t * Depricated, renamed to event_get_coupon\n\t */",
      "/**\n\t * @param int $code\n\t * @param EM_Event $EM_Event\n\t * @return EM_Coupon|boolean\n\t */",
      "//get coupons that are event and sitewide",
      "/* @var $EM_Coupon EM_Coupon */",
      "/**\n\t * Gets all coupons available to an event\n\t * @param EM_Event $EM_Event\n\t * @return array\n\t */",
      "/**\n\t * Gets all coupon ids available to an event\n\t * @param EM_Event $EM_Event\n\t * @return array\n\t */",
      "/**\n\t * @param EM_Event $EM_Event\n\t * @return boolean\n\t */",
      "/* Booking Helpers */",
      "/**\n\t * \n\t * @param EM_Booking $EM_Booking\n\t * @return array\n\t */",
      "/* Use this when stacking coupons\n\t    if( !empty($EM_Booking->booking_meta['coupons']) && is_array($EM_Booking->booking_meta['coupons']) ){\n\t        ",
      "/* Multiple Booking Functions */",
      "//we add an clean a coupon array here for the first time",
      "//to prevent MIME type errors in MultiSite environments",
      "/*\n\t * MODIFYING BOOKING Functions \n\t */",
      "/**\n\t * @param boolean $result\n\t * @param EM_Booking $EM_Booking\n\t * @return boolean\n\t */",
      "//if a previously saved booking, account for the fact it may not work",
      "//we add an clean a coupon array here for the first time",
      "//will not validate later",
      "//if a previously saved booking, account for the fact it may not work",
      "//multiple bookings have no event-specific coupons, so use this",
      "/**\n\t * @param string $replace\n\t * @param EM_Booking $EM_Booking\n\t * @param string $full_result\n\t * @return string\n\t */",
      "//no need for a filter, use the em_booking_email_placeholders filter",
      "//save record of coupons",
      "//delete all previous records of event coupons",
      "//build template insert",
      "//TODO deleted events should delete coupon references",
      "/**\n\t * Removes coupon associations and update the count once booking is deleted.\n\t * @param bool $result\n\t * @param EM_Booking $EM_Booking\n\t * @retur",
      "/**\n\t * Remove coupon associations and update the counts with these deleted bookings.\n\t * @param bool $result\n\t * @param array $booking_ids\n\t * @param",
      "/* @todo when coupon-booking relations are stored, use $booking_ids instead. */",
      "/**\n\t * When the booking status is changed, if the booking has a coupon and is cancelled or rejected, we remove the coupon from this event.\n\t * @param",
      "//refresh the counts in case booking was cancelled or rejected",
      "/**\n\t * Deprecated, use EM_Coupons::refresh_counts instead\n\t */",
      "/**\n\t * Recounts all coupon usages for a specific booking. Returns true if successful, false if not.\n\t * @param EM_Booking $EM_Booking\n\t * @return boo",
      "/* @var EM_Coupon $EM_Coupon */",
      "/**\n\t * Outputs coupon code input field at bottom of booking form.\n\t * @param EM_Event $EM_Event\n\t */",
      "/**\n\t * Echoes a coupon code field in the footer of the cart page. Currently used in MB mode only.\n\t * @param EM_Multiple_Booking $EM_Multiple_Booking",
      "//override this with CSS in your own theme",
      "/**\n\t * @param EM_Event $EM_Event\n\t */",
      "//load this only when needed, so moved into the EM_Coupons_Admin object,",
      "/**\n\t * Returns an array of EM_Coupon objects, accepts search arguments or a numeric array for ids to retreive\n\t * @param boolean $args\n\t * @param boo",
      "//Quick version, we can accept an array of IDs, which is easy to retrieve",
      "//Array of numbers, assume they are event IDs to retreive",
      "//We can just get all the events here and return them",
      "//We return all the events matched as an EM_Event array.",
      "//We assume it's either an empty array or array of search arguments to merge with defaults",
      "//Get the default conditions",
      "//Get ordering instructions",
      "//Now, build orderby sql",
      "//Create the SQL statement and execute",
      "//If we only want the ids, the $selectors was already modified, so return a col instead",
      "//If we're only counting results, return the number of results",
      "//If we want results directly in an array, why not have a shortcut here?",
      "/*\n\t * CSV Functions\n\t */",
      "//if in MB mode, change $EM_Booking with the main booking to grab coupon info, given that we don't support per-event coupons in MB mode atm",
      "//check if coupon code exists for this booking, if so, get it and replace $val with coupon code",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_conditions()\n\t */",
      "//search specific event",
      "//if in MB mode, there are not event-specific coupons atm",
      "//search event-wide coupons by default",
      "//in this case, we explicitly want eventwide coupons",
      "//if not explicitly requested in args, then we just search for eventwide according to event owner",
      "//search sitewide coupons by default or if requested",
      "//sitewide shouldn't have an event requested with it if you only want sitewide events",
      "//if in MB mode, every coupon is considered sitewide.",
      "//when an owner is set, event-wide and sitewide must be explicitly set to filter in/out only these types of coupons",
      "//we explicitly want to check eventwide coupons, not along with owners because by default it'd include eventwide coupons in simple owner searches",
      "//only need to include eventwide searches if 0, since event-wide searches would also appear if owner is set to 1",
      "//include sitewide coupons",
      "//we'll never do an AND search for site-wide/event-wide because it would just negate all coupons that are one or the other",
      "//exclude sitewide coupons",
      "//no owner, so we're looking for either event/site wide coupons",
      "//only need to include eventwide searches if 0, since event-wide searches would also appear if owner is set to 1",
      "//explicitly filter sitewide coupons",
      "//we'll never do an AND search for site-wide/event-wide because it would just negate all coupons that are one or the other",
      "//must not be a sitewide coupon",
      "//in Multiple Bookings Mode, coupon ownership is currently ignored for most purposes, but in admin area, we'll restrict just coupons",
      "//This is an array, let's split it up",
      "// anything available from the start date onwards wheter or not already available",
      "// anything available until the provided end date",
      "/* \n\t * Adds custom Events search defaults\n\t * @param array $array\n\t * @return array\n\t * @uses EM_Object#get_default_search()\n\t */",
      "//site/event-wide lookups - a little special compared to other object condition functions on EM",
      "//can be set to true (1) or false (0) whether to exclusively search for this or not",
      "//can be set to true (1) or false (0) whether to exclusively search for this or not",
      "//also accepts event, blog, array",
      "//sort out whether defaults were supplied or just the array of search values"
    ],
    "length": 32282,
    "preview": "<?php\n//TODO make coupons stackable\n//TODO add logging of coupon useage in seperate log table\ninclude('coupon.php');\nclass EM_Coupons extends EM_Object {\n    \n    static public $can_manage = 'manage_others_bookings';\n    \n\tpublic static function init",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupons.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "apply_discount",
      "get_discount",
      "get_person",
      "is_valid",
      "get_count",
      "recount",
      "get_discount_text",
      "has_events",
      "can_manage"
    ],
    "classes": [
      "EM_Coupon"
    ],
    "comments": [
      "/**\n * Object that holds coupon info and related functions\n * @author marcus\n */",
      "/**\n\t * @var EM_Person\n\t */",
      "/**\n\t * Gets data from POST (default), supplied array, or from the database if an ID is supplied\n\t * @param $coupon_data\n\t * @param $search_by can be ",
      "//Get the array/coupon_id",
      "//search by coupon_id, get post_id and blog_id (if in ms mode) and load the post",
      "//search by coupon_id, get post_id and blog_id (if in ms mode) and load the post",
      "//merge the post data into coupon object",
      "//special tax consideration for EM <5.4",
      "//discount by percent",
      "//no negative values",
      "//This person is already included, so don't do anything",
      "/**\n\t * Returns boolean depending whether this coupon is valid right now (i.e. meets time/capacity requirements)\n\t * @return boolean\n\t */",
      "//check min/max values",
      "//if no number supplied, do a recount",
      "//check if record exists and update/insert accordingly",
      "/**\n\t * Puts the coupon into a text representation in terms of discount\n\t */",
      "//discount by percent",
      "/**\n\t * Can the user manage this coupon? \n\t */"
    ],
    "length": 7852,
    "preview": "<?php\n/**\n * Object that holds coupon info and related functions\n * @author marcus\n */\nclass EM_Coupon extends EM_Object {\n\t//DB Fields\n\tvar $coupon_id = '';\n\tvar $coupon_owner = '';\n\tvar $blog_id = '';\n\tvar $coupon_code = '';\n\tvar $coupon_name = '';",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupon.php"
  },
  {
    "type": "php",
    "functions": [
      "get_post",
      "validate",
      "save",
      "delete"
    ],
    "classes": [
      "EM_Coupon_Admin"
    ],
    "comments": [
      "/**\n * Extended EM_Coupon object with administrative functions which can be used in admin situations to add/edit/delete coupons themselves.\n */",
      "/**\n\t * Retrieve event information via POST (used in situations where posts aren't submitted via WP)\n\t * @param boolean $validate whether or not to ru",
      "//validate both post and meta, otherwise return true",
      "/**\n\t * Validates a coupon to make sure the submitted fields include required ones\n\t * @return boolean\n\t */",
      "//check for duplicates",
      "//check required fields",
      "/**\n\t * Saves the coupon to the db\n\t * @return boolean\n\t */",
      "//if in MB mode, always save it as site/event-wide",
      "//success, so link the coupon with the post via an coupon id meta value for easy retrieval",
      "/**\n\t * Deletes the coupon\n\t * @param boolean $force_delete\n\t * @return boolean\n\t */",
      "//atm wp seems to force cp deletions anyway"
    ],
    "length": 5546,
    "preview": "<?php\n/**\n * Extended EM_Coupon object with administrative functions which can be used in admin situations to add/edit/delete coupons themselves.\n */\nclass EM_Coupon_Admin extends EM_Coupon {\n\t\n\t/**\n\t * Retrieve event information via POST (used in si",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupon-admin.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 1026,
    "preview": "jQuery(document).ready( function($){\n\t$(document).on('submit', '.em-cart-coupons-form', function(e){\n\t\te.preventDefault();\n\t\tvar coupon_form = $(this);\n\t\tvar coupon_input = coupon_form.find('input.em-coupon-code');\n\t\tvar coupon_button = coupon_form.f",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupons-cart.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//simple way to change action of form"
    ],
    "length": 1005,
    "preview": "jQuery(document).ready( function($){\n\t$('.em-coupon-code').on('change', function(){\n\t\tvar coupon_el = $(this);\n\t\tvar formdata = coupon_el.parents('.em-booking-form').serialize().replace('action=booking_add','action=em_coupon_check'); //simple way to ",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/coupons/coupons.js"
  }
]