[
  {
    "type": "php",
    "functions": [
      "__construct",
      "em_wp_localize_script",
      "force_ssl",
      "booking_add",
      "em_booking_save",
      "booking_form_feedback",
      "handle_payment_return",
      "handle_payment_return_api",
      "process_payment_notification",
      "booking_form",
      "get_api",
      "authorize_and_capture",
      "void",
      "mysettings",
      "update"
    ],
    "classes": [
      "EM_Gateway_Authorize_AIM"
    ],
    "comments": [
      "//change these properties below if creating a new gateway, not advised to change this for Authorize_AIM",
      "//we can's use a button here",
      "//account.authorize.net/ui/themes/anet/Transaction/TransactionReceipt.aspx?transid=%s',",
      "//sandbox.authorize.net/ui/themes/sandbox/Transaction/TransactionReceipt.aspx?transid=%s',",
      "/**\n\t * Sets up gateaway and adds relevant actions/filters \n\t */",
      "//Force SSL for booking submissions, since we have card info",
      "//no need if in sandbox mode",
      "//modify booking script, force SSL for all",
      "//modify booking script, force SSL for all",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * This function intercepts the previous booking form url from the javascript localized array of EM variables and forces it to be an HTTPS url. \n",
      "/**\n\t * Turns any url into an HTTPS url.\n\t * @param string $url\n\t * @return string\n\t */",
      "//','https://', $url);",
      "/**\n\t * Triggered by the em_booking_add_yourgateway action, modifies the booking status if the event isn't free and also adds a filter to modify user ",
      "/**\n\t * Added to filters once a booking is added. Once booking is saved, we capture payment, and approve the booking (saving a second time). If paymen",
      "//make sure booking save was successful before we try anything",
      "//Set booking status, but no emails sent",
      "//Set back to normal \"pending\"",
      "//not good.... error inserted into booking in capture function. Delete this booking from db",
      "//delete the user we just created, only if created after em_booking_add filter is called (which is when a new user for this booking would be created)",
      "//remove email confirmation",
      "/**\n\t * Intercepts return data after a booking has been made and adds authorize_aim vars, modifies feedback message.\n\t * @param array $return\n\t * @par",
      "//Double check $EM_Booking is an EM_Booking object and that we have a booking awaiting payment.",
      "//returning a free message",
      "//void this last authroization",
      "/**\n\t * Handles the silent post URL\n\t */",
      "//Make sure this is Authorize.net and process silent post",
      "//Authorize.net uses SHA512 hashes now, so we prefer this method if site admin has set it up.",
      "//fields to make hash according to https://support.authorize.net/s/article/MD5-Hash-End-of-Life-Signature-Key-Replacement",
      "/* @var WP_Error $result */",
      "/**\n\t * Return a WP REST result for handling a payment return\n\t *\n\t * @param WP_REST_Request $request Full data about the request.\n\t * @return WP_Erro",
      "//we know it's from authorize.net now, so we can proceed with logging this hook notification",
      "//get more information about the transaction type",
      "//api.authorize.net/xml/v1/request.api', $post_args);",
      "//apitest.authorize.net/xml/v1/request.api', $post_args);",
      "//proceed with processing transaction info and applying changes to booking if located",
      "/* @var WP_Error $transaction_request */",
      "// cannot locate the transaction that we were notified about",
      "// received the right response, now we verify if there's an error",
      "//if a transaction was never found, but it never will be so we just log the error and prevent a.net retrying for no reason",
      "//Since credit has another txn id we can find a booking by invoice number / booking id and cancel the booking, record new txn.",
      "//Find the transaction and booking, void the transaction, cancel the booking.",
      "/* \n\t * --------------------------------------------------\n\t * Booking UI - modifications to booking pages and tables containing authorize_aim booking",
      "/**\n\t * Outputs custom content and credit card information.\n\t */",
      "/*\n\t * --------------------------------------------------\n\t * Authorize.net AIM Functions - functions specific to authorize_aim payments\n\t * ---------",
      "/**\n\t * Get the AuthorizeNetAIM object and set up basic parameters\n\t * @return AuthorizeNetAIM\n\t */",
      "/**\n\t * Retreive the authorize_aim vars needed to send to the gateway to proceed with payment\n\t * @param EM_Booking $EM_Booking\n\t */",
      "//Get transaction ID for authorization/capture",
      "//address slightly special address field",
      "//cut off at 60 characters",
      "//Add discounts to itemized billing, one line each for post and pre taxes",
      "//Add surcharges to itemized billing, one line each for post and pre taxes",
      "/* DEPRECATED - Remenant of a typoe, will one day get deleted, use filter below */",
      "//Return transaction_id or false",
      "/*\n\t * --------------------------------------------------\n\t * Gateway Settings Functions\n\t * --------------------------------------------------\n\t */",
      "/**\n\t * Outputs custom PayPal setting fields in the settings page \n\t */",
      "//wp-events-plugin.com/documentation/event-bookings-with-authorize-net-aim/'); ?></p>",
      "//developer.authorize.net/integration/fifteenminutes/');?></em>",
      "/* @todo move SSL check outside of A.net and make it a generic gatweay-wide check. */",
      "//','https://', admin_url('admin-ajax.php'));",
      "/* @var $verify WP_Error */",
      "//wp-events-plugin.com/documentation/event-bookings-with-authorize-net-aim/'); ?></p>",
      "/* \n\t * Run when saving settings, saves the settings available in EM_Gateway_Authorize_AIM::mysettings()\n\t */",
      "//add wp_kses filters for relevant options and merge in",
      "//pass options to parent which handles saving"
    ],
    "length": 31737,
    "preview": "<?php\n\nclass EM_Gateway_Authorize_AIM extends EM_Gateway {\n\t//change these properties below if creating a new gateway, not advised to change this for Authorize_AIM\n\tvar $gateway = 'authorize_aim';\n\tvar $title = 'Authorize.net AIM';\n\tvar $status = 4;\n",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway.authorize.aim.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "actions",
      "em_wp_localize_script",
      "booking_form_feedback",
      "em_booking_set_status",
      "em_bookings_pending_count",
      "booking_form",
      "bookings_table_actions",
      "add_payment_form",
      "mysettings",
      "update",
      "uses_gateway"
    ],
    "classes": [
      "EM_Gateway_Offline"
    ],
    "comments": [
      "/**\n * This Gateway is slightly special, because as well as providing functions that need to be activated, there are offline payment functions that ar",
      "/**\n\t * Sets up gateway and registers actions/filters\n\t */",
      "//Booking Interception",
      "//add payment to booking",
      "/**\n\t * Run on init, actions that need taking regarding offline bookings are caught here, e.g. registering manual bookings and adding payments \n\t */",
      "//Check if manual payment has been added",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * Intercepts return JSON and adjust feedback messages when booking with this gateway.\n\t * @param array $return\n\t * @param EM_Booking $EM_Booking",
      "/**\n\t * Sets booking status and records a full payment transaction if new status is from pending payment to completed. \n\t * @param int $status\n\t * @pa",
      "/* \n\t * --------------------------------------------------\n\t * Booking UI - modifications to booking pages and tables containing offline bookings\n\t * ",
      "/**\n\t * Outputs extra custom information, e.g. payment details or procedure, which is displayed when this gateway is selected when booking (not when u",
      "/**\n\t * Adds relevant actions to booking shown in the bookings table\n\t * @param EM_Booking $EM_Booking\n\t */",
      "/**\n\t * Adds a payment form which can be used to submit full or partial offline payments for a booking. \n\t */",
      "/* \n\t * --------------------------------------------------\n\t * Settings pages and functions\n\t * --------------------------------------------------\n\t *",
      "/**\n\t * Outputs custom offline setting fields in the settings page \n\t */",
      "/* \n\t * Run when saving PayPal settings, saves the settings available in EM_Gateway_Paypal::mysettings()\n\t */",
      "/**\n\t * Checks an EM_Booking object and returns whether or not this gateway is/was used in the booking.\n\t * @param EM_Booking $EM_Booking\n\t * @return ",
      "//for all intents and purposes, if there's no gateway assigned but this booking status matches, we assume it's offline"
    ],
    "length": 9627,
    "preview": "<?php\n\n/**\n * This Gateway is slightly special, because as well as providing functions that need to be activated, there are offline payment functions that are always there e.g. adding manual payments.\n * @author marcus\n */\nclass EM_Gateway_Offline ex",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway.offline.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "booking_form_feedback",
      "booking_form_feedback_fallback",
      "booking_add",
      "em_my_bookings_booking_actions",
      "booking_form",
      "em_gateway_js",
      "bookings_table_actions",
      "get_paypal_vars",
      "get_paypal_url",
      "say_thanks",
      "handle_payment_return",
      "handle_payment_status",
      "payment_return_local_ca_curl",
      "is_sandbox",
      "mysettings",
      "update",
      "em_gateway_paypal_booking_timeout"
    ],
    "classes": [
      "EM_Gateway_Paypal"
    ],
    "comments": [
      "//change these properties below if creating a new gateway, not advised to change this for PayPal",
      "//www.paypal.com/activity/payment/%s',",
      "//www.sandbox.paypal.com/activity/payment/%s',",
      "/**\n\t * Sets up gateaway and adds relevant actions/filters \n\t */",
      "//Booking Interception",
      "//say thanks on my_bookings page",
      "//unschedule the cron",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * Intercepts return data after a booking has been made and adds paypal vars, modifies feedback message.\n\t * @param array $return\n\t * @param EM_B",
      "//Double check $EM_Booking is an EM_Booking object and that we have a booking awaiting payment.",
      "//returning a free message",
      "/**\n\t * Called if AJAX isn't being used, i.e. a javascript script failed and forms are being reloaded instead.\n\t * @param string $feedback\n\t * @return",
      "/**\n\t * Triggered by the em_booking_add_yourgateway action, hooked in EM_Gateway. Overrides EM_Gateway to account for non-ajax bookings (i.e. broken J",
      "//we aren't doing ajax here, so we should provide a way to edit the $EM_Notices ojbect.",
      "//add an invoice ID prefix for PayPal - taken from wp_generate_uuid4() but copied here to allow WP <4.7 compat",
      "/* \n\t * --------------------------------------------------\n\t * Booking UI - modifications to booking pages and tables containing paypal bookings\n\t * -",
      "/**\n\t * Instead of a simple status string, a resume payment button is added to the status message so user can resume booking from their my-bookings pa",
      "//if in multiple booking mode, switch the booking for the main booking and treat that as our booking",
      "//first make sure there's no pending payments",
      "/**\n\t * Outputs extra custom content e.g. the PayPal logo by default. \n\t */",
      "/**\n\t * Outputs some JavaScript during the em_gateway_js action, which is run inside a script html tag, located in gateways/gateway.paypal.js\n\t */",
      "/**\n\t * Adds relevant actions to booking shown in the bookings table\n\t * @param EM_Booking $EM_Booking\n\t */",
      "/*\n\t * --------------------------------------------------\n\t * PayPal Functions - functions specific to paypal payments\n\t * ---------------------------",
      "/**\n\t * Retreive the paypal vars needed to send to the gatway to proceed with payment\n\t * @param EM_Booking $EM_Booking\n\t */",
      "//address fields`and name/email fields to prefill on checkout page (if available)",
      "//calculate discounts and surcharges if there are any",
      "/*\n\t\t * IMPORTANT - If there's any adjustments to the price, we need to include one single price.\n\t\t * The reason for this is because PayPal simply ca",
      "/* @var $EM_Ticket_Bookings EM_Ticket_Bookings */",
      "//divide price by spaces for per-ticket price by getting first ticket booking and getting the price that way",
      "/* @var EM_Ticket_Booking $EM_Ticket_Booking */",
      "//we divide this way rather than by $EM_Ticket because that can be changed by user in future, yet $EM_Ticket_Booking will change if booking itself is ",
      "/**\n\t * gets paypal gateway url (sandbox or live mode)\n\t * @returns string \n\t */",
      "//www.sandbox.paypal.com/cgi-bin/webscr':'https://www.paypal.com/cgi-bin/webscr';",
      "/**\n\t * Runs when PayPal sends IPNs to the return URL provided during bookings and EM setup. Bookings are updated and transactions are recorded accord",
      "// PayPal IPN handling code",
      "//Verify IPN request",
      "//www.paypal.com/cgi-bin/webscr';",
      "//www.sandbox.paypal.com/cgi-bin/webscr';",
      "//add a CA certificate so that SSL requests always go through",
      "//using WP's HTTP class",
      "//log ipn request if needed, then move on",
      "//log error if needed, send error header and exit",
      "//if we get past this, then the IPN went ok",
      "// handle cases that the system must ignore",
      "//legacy checking, newer bookings should have a unique invoice number",
      "//since we're overriding the booking ourselves.",
      "// process PayPal response",
      "//header('Status: 404 Not Found');",
      "//echo \"<pre>\"; print_r($_POST); echo \"</pre>\";",
      "// Did not find expected POST variables. Possible access attempt from a non PayPal site.",
      "//header('Status: 404 Not Found');",
      "/**\n\t * Handles a payment status change in PayPal, as in a IPN notification, PDT callback or other lookup.\n\t * @param EM_Booking $EM_Booking\n\t * @para",
      "// case: successful payment",
      "//approve and ignore spaces",
      "//TODO do something if pp payment not enough",
      "//Set back to normal \"pending\"",
      "// case: charge back",
      "//We need to cancel their booking.",
      "//we need to compare two positive numbers for refunds",
      "//Set back to normal \"pending\" but don't send email about it to prevent confusion",
      "// case: payment is pending",
      "//do nothing, just update the transaction",
      "// case: various error cases",
      "/**\n\t * Fixes SSL issues with wamp and outdated server installations combined with curl requests by forcing a custom pem file, generated from - http:/",
      "/*\n\t * --------------------------------------------------\n\t * Gateway Settings Functions\n\t * --------------------------------------------------\n\t */",
      "/**\n\t * Outputs custom PayPal setting fields in the settings page \n\t */",
      "//get creds and check they exist before even trying this",
      "//wp-events-plugin.com/documentation/events-with-paypal/#api-keys\" target=\"_blank\">'.esc_html__('documentation','events-manager').'</a>');",
      "//wp-events-plugin.com/documentation/events-with-paypal/'); ?></p>",
      "//wp-events-plugin.com/documentation/events-with-paypal/paypal-displaying-taxes/\">'. __('Click here for more information.','em-pro').'</a>'); ?>",
      "// address.', 'em-pro'); ?>",
      "/* \n\t * Run when saving PayPal settings, saves the settings available in EM_Gateway_Paypal::mysettings()\n\t */",
      "//add wp_kses sanitization filters for relevant options",
      "//pass options to parent which handles saving",
      "/**\n * Deletes bookings pending payment that are more than x minutes old, defined by paypal options. \n */",
      "//get creds and check they exist before even trying this",
      "//Get a time from when to delete",
      "/* @var $EM_Gateway_Paypal EM_Gateway_Paypal */",
      "//get booking IDs without pending transactions",
      "//get the time in UTC",
      "//multiple bookings mode",
      "//If we're in MB mode, check that this isn't the main booking, if it isn't then skip it.",
      "//go through each booking and check if there's a matching payment on paypal already, in case there's problems with IPN callbacks",
      "//now, only items with a UUID will be checked, as we know we have a valid invoice ID passed for this booking",
      "//Verify if Payment has been made by searching for the Invoice ID, which would be EM-BOOKING#x were x is the booking id",
      "//api-3t.paypal.com/nvp' : $domain = 'https://api-3t.sandbox.paypal.com/nvp';",
      "//1 month back just to be sure",
      "//set request values",
      "//add a CA certificate so that SSL requests always go through",
      "//using WP's HTTP class",
      "//we expect a single result from this search, since searching for a invoice ID should be unique",
      "//check response and see whether we have an actual pending booking",
      "//conservatively decide not to delete a booking by default",
      "//we received a result, so we shouldn't delete this payment and act as if we received an IPN",
      "//search produced no results, so we assume there's no payment made and just delete the booking",
      "//only if a payment hasn't been made do we delete the booking",
      "//some sort of error, log if needed but we won't delete anything",
      "//log error if needed, send error header and exit"
    ],
    "length": 42138,
    "preview": "<?php\n\nclass EM_Gateway_Paypal extends EM_Gateway {\n\t//change these properties below if creating a new gateway, not advised to change this for PayPal\n\tvar $gateway = 'paypal';\n\tvar $title = 'PayPal (Payments Standard)';\n\tvar $status = 4;\n\tvar $status",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway.paypal.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "em_bookings_deleted",
      "get_total_paid",
      "ajax",
      "output",
      "mytransactions",
      "print_transactions",
      "get_transactions",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "emp_transactions_init"
    ],
    "classes": [
      "EM_Gateways_Transactions"
    ],
    "comments": [
      "//Add options and tables to EM admin pages",
      "//Booking Total Payments Hook",
      "//Clean up of transactions when booking is deleted",
      "/**\n\t * @param unknown $result\n\t * @param unknown $booking_ids\n\t * @return unknown\n\t */",
      "//TODO decouple transaction logic from gateways",
      "/**\n\t * Returns the total paid for a specific booking. Hooks into em_booking_get_total_paid.\n\t * @param EM_Booking $EM_Booking\n\t * @return string|floa",
      "//Pagination link clicks",
      "//get page no from url, change page, submit form",
      "//Widgets and filter submissions",
      "//use the below filter to override specific gateways, the above for modifying the field for all gateways",
      "/**\n\t * @param mixed $context\n\t * @return stdClass|false\n\t */",
      "//we can determine what to search for, based on if certain variables are set.",
      "//in MB mode, if the user can manage others bookings, they can view information about the transaction for a group of bookings",
      "//we're looking at a booking within a multiple booking, so we can show payments specific to this event too",
      "//this is a MB booking, so we should show transactions related to the MB or any bookings within it",
      "//in MB mode, if the user can manage others bookings, they can view information about the transaction for a group of bookings",
      "//if not main blog, we show only blog specific booking info",
      "//build conditions string",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Table and CSV Export\n\t * -----------------------------------------------",
      "//check if this isn't a multiple booking, otherwise look for info from main booking",
      "//get latest transaction with an ID",
      "/**\n * Checks for any deletions requested \n */",
      "//get booking from transaction, ensure user can manage it before deleting",
      "//all good, delete it"
    ],
    "length": 19171,
    "preview": "<?php\nif(!class_exists('EM_Gateways_Transactions')) {\nclass EM_Gateways_Transactions{\n\tvar $limit = 20;\n\tvar $total_transactions = 0;\n\t\n\tfunction __construct(){\n\t\t$this->order = ( !empty($_REQUEST ['order']) ) ? $_REQUEST ['order']:'ASC';\n\t\t$this->or",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateways.transactions.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "wp_init",
      "em_wp_localize_script",
      "em_bookings_table",
      "register_gateway",
      "deregister_gateway",
      "active_gateways",
      "gateways_list",
      "get_gateway",
      "em_booking_get_post",
      "em_booking_add",
      "event_booking_form_footer",
      "em_booking_form_footer",
      "mb_booking_form_footer",
      "booking_form_footer",
      "em_booking_delete",
      "em_action_booking_add",
      "em_booking_js",
      "is_manual_booking",
      "handle_payment_gateways",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "get_customer_field",
      "customer_fields_admin_actions",
      "customer_fields_admin",
      "booking_form_buttons",
      "data_privacy_export",
      "emp_register_gateway"
    ],
    "classes": [
      "EM_Gateways",
      "if"
    ],
    "comments": [
      "/*\n\t * --------------------------------------------------\n\t * STATIC Functions - functions that don't need to be overriden\n\t * -----------------------",
      "//add to booking interface (menu options, booking statuses)",
      "//handle cancelled payments via 'back' links on payment gateways",
      "//Booking interception",
      "//Multiple bookings mode (and not doing a manual booking)",
      "//adds gateway var to feedback",
      "//Booking Form Modifications",
      "//Normal Bookings mode, or manual booking",
      "//adds gateway var to feedback",
      "//Booking Form Modifications",
      "//buttons only way, oudated but still possible, will eventually depreciated this once an API is out, so use the latter pls",
      "//Replace button with booking buttons",
      "//new way, with payment selector",
      "// back-compat for the above action",
      "//booking gateways JS",
      "//Gateways and user fields",
      "//data privacy - transaction history",
      "/* @var EM_Notices $EM_Notices */",
      "// restore booking into session - ids can be preserved since they should all be deleted on auto-increment tables",
      "/**\n\t * Returns an array of active gateway objects\n\t * @return array\n\t */",
      "/**\n\t * Returns an array of all registered gateway objects\n\t * @return array\n\t */",
      "/**\n\t * Returns the EM Gateway with supplied name\n\t * @param string $gateway\n\t * @return EM_Gateway\n\t */",
      "//check for array key first",
      "//otherwise we loop through the gateways array in case the gateway key registered doesn't match the actual gateway name",
      "//returns a blank EM_Gateway regardless to avoid fatal errors",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * Hooks into em_booking_get_post filter and makes sure that if there's an active gateway for new bookings, if no $_REQUEST['gateway'] is supplie",
      "//we only deal with the EM_Multiple_Booking class if we're in multi booking mode",
      "//spammer or hacker trying to get around no gateway selection",
      "/**\n\t * Intercepted when a booking is about to be added and saved, calls the relevant booking gateway action provided gateway is provided in submitted",
      "//we haven't been told which gateway to use, revert to offline payment, since it's closest to pending",
      "//Individual gateways will hook into this function",
      "// if firing hook via the back-compat mode then don't proceed, since we'll also likely have the new hook above",
      "/**\n\t * Gets called at the bottom of the form before the submit button. \n\t * Outputs a gateway selector and allows gateways to hook in and provide the",
      "//Check if we can user quick pay buttons",
      "//backward compatability",
      "//Continue with payment gateway selection",
      "//Add gateway selector",
      "//for filter compatibility",
      "/**\n\t * Deprecated, uses em_bookings_deleted hook instead within the transactions object.\n\t * Cleans up Pro-added features in the database, such as de",
      "//TODO decouple transaction logic from gateways",
      "/**\n\t * Verification of whether current page load is for a manual booking or not. If $new_registration is true, it will also check whether a new user ",
      "/*\n\t * ----------------------------------------------------------\n\t * Payment Notification Listeners e.g. for PayPal IPNs or similar postbacks\n\t * ---",
      "/**\n\t * Checks whether em_payment_gateway is passed via WP_Query, GET or POST and fires the appropriate gateway filter.\n\t * \n\t *  yoursite.com/wp-admi",
      "//Listen on admin-ajax.php",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Table and CSV Export\n\t * -----------------------------------------------",
      "//get latest transaction with an ID",
      "/*\n\t * --------------------------------------------------\n\t* USER FIELDS - Adds user details link for use by gateways and options to form editor\n\t* --",
      "/**\n\t * Returns value of a customer field, which are common fields for payment gateways linked to custom user fields in the forms editor.\n\t * @param s",
      "//determine field value",
      "//no-user mode is assumed since id is exactly 0",
      "//get meta from booking if user meta isn't available",
      "//get corresponding user meta field, the one in $EM_Booking takes precedence as it may be newer",
      "//enable dbem_bookings_tickets_single_form if enabled",
      "//enable dbem_bookings_tickets_single_form if enabled",
      "/*\n\t * --------------------------------------------------\n\t * BUTTONS MODE Functions - i.e. booking doesn't require gateway selection, just button cli",
      "/**\n\t * This gets called when a booking form created using the old buttons API, and calls subsequent gateways to output their buttons.\n\t * @param stri",
      "//$gateway_buttons = apply_filters('em_gateway_buttons', $gateway_buttons, $EM_Event);",
      "//hide normal button if we have buttons",
      "/**\n\t * Modifies exported multiple booking items\n\t * @param array $export_item\n\t * @param EM_Booking $EM_Booking\n\t * @return array\n\t */",
      "//we don't need to export bookings with an MB parent",
      "//get the transaction",
      "/* @var EM_Gateways_Transactions $EM_Gateways_Transactions */",
      "//replace ID with txn ID",
      "// replace this with assoc array of name/value key arrays",
      "/* @var EM_Booking $EM_Booking */",
      "//handle potentially deleted events in a MB booking",
      "//handle potentially deleted events in a MB booking",
      "//compatibility, use EM_Gateways directly"
    ],
    "length": 26084,
    "preview": "<?php\nif(!class_exists('EM_Gateways')) {\nclass EM_Gateways {\n    static $customer_fields = array();\n\t/*\n\t * --------------------------------------------------\n\t * STATIC Functions - functions that don't need to be overriden\n\t * ----------------------",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateways.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "register_handle_payment_api",
      "booking_add",
      "booking_form_feedback",
      "booking_form",
      "mysettings",
      "update",
      "em_booking_output_placeholder",
      "handle_payment_return_api",
      "handle_payment_return",
      "em_booking_get_status",
      "em_bookings_get_pending_spaces",
      "em_booking_is_reserved",
      "em_booking_is_pending",
      "em_ticket_get_pending_spaces",
      "booking_form_button",
      "get_invoice_id",
      "handle_return_url",
      "thank_you_message",
      "get_thank_you_message",
      "get_return_url",
      "get_cancel_url",
      "get_option",
      "update_option",
      "uses_gateway",
      "get_payment_return_url",
      "get_payment_return_api_url",
      "record_transaction",
      "em_gateways_transactions_table_gateway_id",
      "toggleactivation",
      "activate",
      "deactivate",
      "is_active",
      "is_sandbox",
      "settings",
      "settings_sensitive_credentials",
      "settings_show_settings_credentials",
      "emp_gateway_ml_init"
    ],
    "classes": [
      "is",
      "which",
      "EM_Gateway",
      "and"
    ],
    "comments": [
      "/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n *",
      "/**\n\t * Gateway reference, which is used in various places for referencing gateway info. Use lowercase characters/numbers and underscores.\n\t * @var st",
      "/**\n\t * This will be what admins see as the gatweway name (e.g. Offline, PayPal, Authorize.net ...)\n\t * @var string\n\t */",
      "/**\n\t * The default status value your gateway assigns this booking. Default is 0, i.e. pending 'something'.\n\t * @var int\n\t */",
      "/**\n\t * Set this to any true value and this will trigger the em_my_bookings_booked_message function to override the status name of this booking when i",
      "/**\n\t * If your gateway supports the ability to pay without requiring further fields (e.g. credit card info), then you can set this to true.\n\t * \n\t * ",
      "/**\n\t * If your gateway is compatible with our Multiple Bookings Mode, then you can set this to true, otherwise your gateway won't be available for bo",
      "/**\n\t * Some external gateways (e.g. PayPal IPNs) return information back to your site about payments, which allow you to automatically track refunds ",
      "/**\n\t * Counts bookings with pending spaces for availability \n\t * @var boolean\n\t */",
      "/**\n\t * Associated array containing counts for pending spaces of specific events, which can be reused when called again later on.\n\t * @var array\n\t */",
      "/**\n\t * Multidimensional associated containing pending spaces for specific tickets, within eacy array item is an array of event id keys and correspond",
      "/**\n\t * Unassociated array containing the url sprintable structure to a live transaction detail, test transaction detail and title service name for li",
      "/**\n\t * Adds some basic actions and filters to hook into the EM_Gateways class and Events Manager bookings interface. \n\t */",
      "// Actions and Filters, only if gateway is active",
      "//add booking placeholders",
      "//handle return payment notifications",
      "//transaction list link",
      "//Modify spaces calculations, required even if inactive, due to previously made bookings whilst this may have been active",
      "//checkout-specific functions for redirects",
      "/*\n\t * --------------------------------------------------\n\t * OVERRIDABLE FUNCTIONS - should be overriden by the extending class\n\t * -----------------",
      "/**\n\t * Triggered by the em_booking_add_yourgateway action, modifies the booking status if the event isn't free and also adds a filter to modify user ",
      "//modify the payment return",
      "//modify the payment return",
      "//status 4 = awaiting online payment",
      "/**\n\t * Intercepts return JSON and adjust feedback messages when booking with this gateway. This filter is added only when the em_booking_add function",
      "//remember this, it's a filter!",
      "/**\n\t * Outputs extra custom content e.g. information about this gateway or extra form fields to be requested if this gateway is selected (not applica",
      "/**\n\t * Called by $this->settings(), override this to output your own gateway options on this gateway settings page  \n\t */",
      "/**\n\t * Run by EM_Gateways_Admin::handle_gateways_panel_updates() if this gateway has been updated. You should capture the values of your new fields a",
      "//custom options as well as ML options",
      "//default action is to return true",
      "//add filters for all $option_wpkses values so they go through wp_kses_post",
      "//go through the options, grab them from $_REQUEST, run them through a filter for sanitization and save",
      "/**\n\t * Adds extra placeholders to the booking email. Called by em_booking_output_placeholder filter, added in this object __construct() function.\n\t *",
      "/**\n\t * Return a WP REST result for handling a payment return\n\t *\n\t * @param WP_REST_Request $request Full data about the request.\n\t * @return WP_Erro",
      "/**\n\t * If you set your gateway class $payment_return property to true, this function will be called when your external gateway sends a notification o",
      "/**\n\t * If you would like to modify the default status message for this payment whilst in progress.\n\t * \n\t * This function is triggered if set $this->",
      "/*\n\t * --------------------------------------------------\n\t * PENDING SPACE COUNTING - if $this->count_pending_spaces is true, depending on the gatewa",
      "/**\n\t * Modifies pending spaces calculations to include paypal bookings, but only if PayPal bookings are set to time-out (i.e. they'll get deleted aft",
      "/**\n\t * Changes EM_Booking::is_reserved() return value to true. Only called if $this->count_pending_spaces is set to true.\n\t * @param boolean $result\n",
      "/**\n\t * Modifies pending spaces calculations for individual tickets to include paypal bookings, but only if PayPal bookings are set to time-out (i.e. ",
      "/*\n\t * --------------------------------------------------\n\t * BUTTONS MODE Functions - i.e. booking doesn't require gateway selection, just button cli",
      "/**\n\t * Shows button, not needed if using the new form display\n\t * @param string $button\n\t * @return string\n\t */",
      "//',get_option('em_'. $this->gateway . \"_button\")) ): ?>",
      "/*\n\t * --------------------------------------------------\n\t * PARENT FUNCTIONS - overriding not required, but could be done\n\t * ----------------------",
      "/**\n\t * Returns unique ID for use in transaction order meta for easy searching/linking of booking to transactions, combines uuid with a booking ID for",
      "// backwards compatible for old transactions since EM Pro > 3.1.3",
      "//START Thank you and cancel page handling for gateways with redirect functionality",
      "/**\n\t * Detect if use was brought back from gateway checkout and needs to be served a thank you message. Adds hooks to thank user on MB checkout page,",
      "//add actions for each page where a thank you might appear by default",
      "/**\n\t * Outputs thank you message from gateway settings.\n\t * @see EM_Gateway::get_thank_you_message()\n\t */",
      "/**\n\t * Returns thank you message from gateway settings.\n\t * @return string\n\t */",
      "/**\n\t * Gets a return url where a thank you message can be displayed. If no return URL can be determined, the home page will be used even though a tha",
      "//if MB mode, redirect to checkout page",
      "//if My Bookings Page exists, use that",
      "//otherwise, send back to original event page when booking is provided",
      "//no thank you message, but we redirect anyway",
      "//add the flag for displaying a message and return",
      "/**\n\t * Gets a cancellation url where a relevant you message can be displayed. If no cancellation URL has been set, the event page the booking was att",
      "//END Thank you and cancel page handling for gateways with redirect functionality",
      "/**\n\t * Gets the gateway option from the correct place. Does not require prefixing of em_gatewayname_\n\t * Will be particularly useful when restricting",
      "/**\n\t * Updates the gateway option to the correct place. Does not require prefixing of em_gatewayname_\n\t * Will be particularly useful when restrictin",
      "/**\n\t * Checks an EM_Booking object and returns whether or not this gateway is/was used in the booking.\n\t * @param EM_Booking $EM_Booking\n\t * @return ",
      "/**\n\t * Returns the notification URL which gateways sends return messages to, e.g. notifying of payment status. \n\t * \n\t * Your URL would correspond to",
      "/**\n\t * Returns the notification URL which gateways sends return messages to, e.g. notifying of payment status.\n\t *\n\t * Your URL would correspond to h",
      "/**\n\t * Records a transaction according to this booking and gateway type.\n\t * @param EM_Booking $EM_Booking\n\t * @param float $amount\n\t * @param string",
      "//we must get the prefix of the transaction table for this event's blog if it is not the root blog",
      "//Duplicate, so we log and ignore it.",
      "// As of EM Pro 2.6.5 we will not update previous transaction but create new ones, so that there's a fuller history of transaction operations",
      "//convert unix timestamps",
      "/**\n\t * Converts the transaction ID field in transaction admin tables into a clickable link to view the transaction on PayPal.\n\t * @param $transaction",
      "/**\n\t * Generates a settings pages.\n\t * @uses EM_Gateway::mysettings()\n\t */",
      "//Gateway booking form info",
      "//...</code>','<code>https://...</code>');",
      "//wp-events-plugin.com/documentation/events-with-paypal/safe-encryption-api-keys/\">'.esc_html__('documentation','events-manager').'</a>');"
    ],
    "length": 33479,
    "preview": "<?php\n/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n * EM_Gateway, which will reduce redundant code and unecessary errors across all gateways. You c",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_updated_gateway_options"
    ],
    "classes": [
      "EM_Gateway_ML"
    ],
    "comments": [
      "//multilingual, same as above, should be triggered by action above"
    ],
    "length": 912,
    "preview": "<?php\nclass EM_Gateway_ML {\n    \n    public static function init(){\n        add_action('em_updated_gateway_options', 'EM_Gateway_ML::em_updated_gateway_options', 10, 2);        \n    }\n    \n    public static function em_updated_gateway_options($option",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway-ml.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "legacy_notice",
      "admin_options",
      "admin_menu",
      "handle_gateways_panel",
      "handle_gateways_panel_updates"
    ],
    "classes": [
      "EM_Gateways_Admin"
    ],
    "comments": [
      "// so we don't show the list below",
      "// so we don't show the list below",
      "/* @var $EM_Gateway EM_Gateway */",
      "//Check if Multi-Booking Ready"
    ],
    "length": 11934,
    "preview": "<?php\nclass EM_Gateways_Admin{\n\t\n\tpublic static function init(){\n\t\tadd_action('em_create_events_submenu', 'EM_Gateways_Admin::admin_menu',10,1);\n\t\tif( !empty($_REQUEST['page']) && $_REQUEST['page'] == 'events-manager-gateways' ){\n\t\t\tadd_action('admin",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateways-admin.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//add paypal redirection",
      "// called by EM if return JSON contains gateway key, notifications messages are shown by now."
    ],
    "length": 653,
    "preview": "//add paypal redirection\n$(document).on('em_booking_gateway_add_paypal', function(event, response){\n\t// called by EM if return JSON contains gateway key, notifications messages are shown by now.\n\tif(response.result && typeof response.paypal_url != 'u",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateway.paypal.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//prevents submission in order to append a hidden field and bind to the booking form submission event"
    ],
    "length": 772,
    "preview": "//Select Submission\n$(document).on('change', '.em-booking-gateway select[name=gateway]', function(e){\n\tvar gateway = $(this).find('option:selected').val();\n\t$('div.em-booking-gateway-form').hide();\n\t$('div#em-booking-gateway-'+gateway).show();\n});\n//",
    "file": "src/code/events-manager-pro/add-ons/gateways-legacy/gateways.js"
  }
]