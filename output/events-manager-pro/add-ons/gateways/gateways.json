[
  {
    "type": "php",
    "functions": [
      "__get",
      "__call",
      "__callStatic",
      "register_gateway",
      "is_manual_booking",
      "__construct",
      "__get",
      "__call",
      "__callStatic",
      "emp_register_gateway"
    ],
    "classes": [
      "EM_Gateways",
      "EM_Gateway"
    ],
    "comments": [
      "/**\n\t * @deprecated\n\t */",
      "// empty, just so we can call EM_Gateways and avoid namespace issues introduced in EM Pro 3.2 and also include some functions that were moved into the",
      "/**\n\t * @deprecated\n\t */",
      "// empty, just so we can call EM_Gateways and avoid namespace issues introduced in EM Pro 3.2 and also include some functions that were moved into the",
      "//compatibility, use \\EM\\Payments\\Gateways directly"
    ],
    "length": 1818,
    "preview": "<?php\n\nif( !class_exists('EM_Gateways') ) {\n\t/**\n\t * @deprecated\n\t */\n\tclass EM_Gateways {\n\t\t// empty, just so we can call EM_Gateways and avoid namespace issues introduced in EM Pro 3.2 and also include some functions that were moved into the Admin ",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways-legacy.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "actions",
      "em_wp_localize_script",
      "is_live_mode",
      "is_test_mode",
      "booking_form_feedback",
      "em_booking_set_status",
      "em_bookings_pending_count",
      "add_payment_form",
      "uses_gateway"
    ],
    "classes": [
      "is",
      "which",
      "Gateway"
    ],
    "comments": [
      "/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n *",
      "/**\n\t * Sets up gateway and registers actions/filters\n\t */",
      "//Booking Interception",
      "//add payment to booking",
      "/**\n\t * Run on init, actions that need taking regarding offline bookings are caught here, e.g. registering manual bookings and adding payments \n\t */",
      "//Check if manual payment has been added",
      "/**\n\t * Adds offline localized message for use in JS\n\t * @param array $vars\n\t * @return array\n\t */",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * Intercepts return JSON and adjust feedback messages when booking with this gateway.\n\t * @param array $return\n\t * @param EM_Booking $EM_Booking",
      "/**\n\t * Sets booking status and records a full payment transaction if new status is from pending payment to completed. \n\t * @param int $status\n\t * @pa",
      "/* \n\t * --------------------------------------------------\n\t * Booking UI - modifications to booking pages and tables containing offline bookings\n\t * ",
      "/**\n\t * Adds a payment form which can be used to submit full or partial offline payments for a booking. \n\t */",
      "/* \n\t * --------------------------------------------------\n\t * Settings pages and functions\n\t * --------------------------------------------------\n\t *",
      "/**\n\t * Checks an EM_Booking object and returns whether or not this gateway is/was used in the booking.\n\t * @param EM_Booking $EM_Booking\n\t * @return ",
      "//for all intents and purposes, if there's no gateway assigned but this booking status matches, we assume it's offline"
    ],
    "length": 8134,
    "preview": "<?php\nnamespace EM\\Payments\\Offline;\nuse EM_Booking, EM_Bookings, EM_Object, EM_Multiple_Bookings, EM_Multiple_Booking, EMP_Logs, EM_Pro, EM;\n\n/**\n * This class is a parent class which gateways should extend. There are various variables and functions",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateway.offline.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "em_bookings_deleted",
      "get_total_paid",
      "ajax",
      "output",
      "mytransactions",
      "print_transactions",
      "get_transactions",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "emp_transactions_init"
    ],
    "classes": [
      "EM_Gateways_Transactions"
    ],
    "comments": [
      "//Add options and tables to EM admin pages",
      "//Booking Total Payments Hook",
      "//Clean up of transactions when booking is deleted",
      "/**\n\t * @param bool $result\n\t * @param int[] $booking_ids\n\t * @return bool\n\t */",
      "/**\n\t * Returns the total paid for a specific booking. Hooks into em_booking_get_total_paid.\n\t * @param EM_Booking $EM_Booking\n\t * @return string|floa",
      "//Pagination link clicks",
      "//get page no from url, change page, submit form",
      "//Widgets and filter submissions",
      "//use the below filter to override specific gateways, the above for modifying the field for all gateways",
      "/**\n\t * @param mixed $context\n\t * @return stdClass|false\n\t */",
      "//we can determine what to search for, based on if certain variables are set.",
      "//in MB mode, if the user can manage others bookings, they can view information about the transaction for a group of bookings",
      "//we're looking at a booking within a multiple booking, so we can show payments specific to this event too",
      "//this is a MB booking, so we should show transactions related to the MB or any bookings within it",
      "//in MB mode, if the user can manage others bookings, they can view information about the transaction for a group of bookings",
      "//if not main blog, we show only blog specific booking info",
      "//build conditions string",
      "/*\n\t * ----------------------------------------------------------\n\t * Booking Table and CSV Export\n\t * -----------------------------------------------",
      "//check if this isn't a multiple booking, otherwise look for info from main booking",
      "//get latest transaction with an ID",
      "/**\n * Checks for any deletions requested \n */",
      "//get booking from transaction, ensure user can manage it before deleting",
      "//all good, delete it"
    ],
    "length": 19387,
    "preview": "<?php\nuse EM\\Payments\\Gateways, EM\\Payments\\Gateway;\n\nif(!class_exists('EM_Gateways_Transactions')) {\nclass EM_Gateways_Transactions{\n\tvar $limit = 20;\n\tvar $total_transactions = 0;\n\tpublic $order;\n\tpublic $orderby;\n\tpublic $page;\n\tpublic $gateway;\n\t",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways.transactions.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "is_mode",
      "get_mode",
      "gateway",
      "toggle",
      "toggleactivation",
      "activate",
      "deactivate",
      "settings_tabs",
      "settings",
      "settings_general",
      "settings_general_footer",
      "settings_general_header",
      "settings_general_feedback",
      "settings_general_cancellation",
      "settings_api",
      "settings_api_test",
      "settings_api_test_limiting",
      "settings_api_test_hiding",
      "settings_api_test_limiting_notices",
      "settings_api_notices",
      "settings_api_credentials",
      "settings_sensitive_credentials",
      "settings_api_notifications",
      "update",
      "verify_webhook",
      "settings_show_settings_credentials"
    ],
    "classes": [
      "is",
      "which",
      "Gateway_Admin",
      "reference",
      "reference"
    ],
    "comments": [
      "/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n *",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * @var Gateway\n\t */",
      "/**\n\t * @var array Associative array of key => label for storing API credentials, this should be assigned in init() so that labels are translated\n\t */",
      "/**\n\t * @deprecated Use Gateway::$api_option_name instead\n\t * @var string\n\t */",
      "// set the right Gateway static class reference if not set hard-coded (and if it even exists)",
      "/**\n\t * @return Gateway|string\n\t */",
      "// set the right Gateway static class reference if not set hard-coded (and if it even exists)",
      "/**\n\t * Toggles gateway on/off.\n\t * @return bool\n\t */",
      "/**\n\t * @deprecated\n\t * @see Gateway_Admin::toggle()\n\t * @return bool\n\t */",
      "/**\n\t * Generates a settings pages.\n\t * @uses EM_Gateway::mysettings()\n\t */",
      "//eventsmanagerpro.com/downloads/\">'. esc_html__('Download new payment methods for this gateway.').'</a>';",
      "//Gateway booking form info",
      "//...</code>', '<code>https://...</code>' );",
      "/**\n\t * Called by $this->settings(), override this to output your own gateway options on this gateway settings page\n\t */",
      "/*\n\t * PayPal\n\t * PayPal Checkout/Advanced\n\t *  - warn users of new integration methods\n\t * Authorize AIM\n\t * Authorize API\n\t * Stripe El / Checkout\n\t",
      "//', 'https://', admin_url( 'admin-ajax.php' ) );",
      "/* @public static $verify WP_Error */",
      "//wp-events-plugin.com/documentation/events-with-paypal/safe-encryption-api-keys/\">'.esc_html__('documentation','events-manager').'</a>');",
      "/**\n\t * Run by EM_Gateways_Admin::handle_gateways_panel_updates() if this gateway has been updated. You should capture the values of your new fields a",
      "//default action is to return true",
      "// mode isn't relevant anymore, handled by gateways button",
      "//add filters for all $option_wpkses values so they go through wp_kses_post",
      "//go through the options, grab them from $_REQUEST, run them through a filter for sanitization and save",
      "//multilingual, same as above",
      "/**\n\t * Override and return true or false if gateway supports a webhook and if detected. If gateway supports webhooks but has no API for auto-creating"
    ],
    "length": 39406,
    "preview": "<?php\nnamespace EM\\Payments;\n/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n * EM_Gateway, which will reduce redundant code and unecessary errors acr",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateway-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_wp_localize_script",
      "em_bookings_table",
      "register",
      "deregister",
      "active_gateways",
      "gateways_list",
      "list",
      "get",
      "get_gateway",
      "is_registered",
      "is_active",
      "is_active_for",
      "switch_current_event",
      "restore_current_event",
      "load_current_event",
      "unload_current_event",
      "em_booking_get_post",
      "em_booking_validate",
      "em_booking_add",
      "em_booking_added",
      "em_booking_form_footer",
      "event_booking_payment_form",
      "mb_payment_form",
      "em_action_booking_add",
      "payment_form",
      "handle_payment_redirections",
      "handle_payment_gateways",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "get_customer_field",
      "buttons_mode_possible",
      "booking_form_buttons",
      "data_privacy_export",
      "check_timeouts"
    ],
    "classes": [
      "Gateways",
      "with",
      "name",
      "name",
      "if",
      "if"
    ],
    "comments": [
      "/**\n\t * Array of registered gateways that can be used on this site.\n\t * @var Gateway[]\n\t */",
      "/**\n\t * The current event ID being acted on, used in situations such as determining Limited Test Mode for a specific event.\n\t * @var int\n\t */",
      "//add to booking interface (menu options, booking statuses)",
      "//handle successful and cancelled payments via redirection from gateways",
      "//Booking interception",
      "//Multiple bookings mode (and not doing a manual booking)",
      "//adds gateway var to feedback",
      "//Booking Form Modifications",
      "//Normal Bookings mode, or manual booking",
      "//adds gateway var to feedback",
      "//Booking Form Modifications",
      "//new way, with payment selector",
      "// back-compat for the above action in case templates are overriden but outdated",
      "// check the edit page if manual booking was made",
      "//booking gateways JS",
      "//data privacy - transaction history",
      "// Now Include things",
      "// prevent major errors",
      "// load native gateways",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * Deregister a gateway from being used on site.\n\t * @param Gateway $class\n\t * @return bool\n\t */",
      "/**\n\t * Deregister a gateway from being used on site.\n\t * @param $gateway\n\t * @return bool\n\t */",
      "/**\n\t * Returns an array of active gateway objects\n\t * @return Gateway[]\n\t */",
      "/**\n\t * Returns an array of all registered gateway object names with gateway name/key as keys.\n\t * @return string[]\n\t */",
      "/**\n\t * Returns the Gateway static class with supplied name\n\t * @param string $gateway\n\t * @return string|Gateway\n\t */",
      "//check for array key first",
      "//otherwise we loop through the gateways array in case the gateway key registered doesn't match the actual gateway name",
      "//returns a blank EM\\Payments\\Gateway regardless to avoid fatal errors",
      "/**\n\t * @deprecated\n\t * @use Gateways::get();\n\t * @see Gateways::get();\n\t * @param $gateway\n\t * @return Gateway|string\n\t */",
      "/**\n\t * Checks whether supplied gateway key name or class name is registered.\n\t * @param string|Gateway $gateway\n\t *\n\t * @return bool\n\t */",
      "/**\n\t * Checks if a gateway is registered and active.\n\t *\n\t * @param string $gateway   The gateway name/key.\n\t * @param string $context   What context",
      "/**\n\t * Checks if gateway is active for a specific context or object, assumes that the gateway is generally active\n\t * @param string|Gateway $gateway ",
      "/**\n\t * Useful for setting and resetting the current event ID being worked on. Returns the current event_id before updated value.\n\t * Ideally should b",
      "/* ------------------------------------------------------------------------------------------------------------------\n   * Booking Interception - func",
      "/**\n\t * Hooks into em_booking_get_post filter and makes sure that if there's an active gateway for new bookings, if no $_REQUEST['gateway'] is supplie",
      "// only proceed if we're not asking for a booking form summary",
      "//we only deal with the EM_Multiple_Booking class if we're in multi booking mode unless it's a manual booking",
      "// hard intercept booking process if gateway not selected or unrecognized",
      "//spammer or hacker trying to get around no gateway selection",
      "// if the booking isn't free, set gateway and other relevant values",
      "// set booking gateway",
      "// set booking status out the door",
      "// e.g. status 4 = awaiting online payment",
      "// check if this booking is in test mode, if so, we add it right now and we know onwards that we're in test mode for this booking",
      "/**\n\t * Hooks into the em_booking_validate filter and runs optional gateway validation before it is saved, such as card details.\n\t * @param bool $resu",
      "//we only deal with the EM_Multiple_Booking class if we're in multi booking mode",
      "/**\n\t * Intercepted when a booking is about to be added and saved, calls the relevant booking gateway action provided gateway is provided in submitted",
      "//Individual gateways will hook into this function",
      "/**\n\t * When a booking is added via form submission, this will fire the subsequent booking_added() function of the relevant gateway class, for easier ",
      "//Individual gateways will hook into this function",
      "/**\n\t * Backwards compatible hook in case templates are overriden but outdated\n\t * @param $EM_Event\n\t *\n\t * @return void\n\t */",
      "// if firing hook via the back-compat mode then don't proceed, since we'll also likely have the new hook above",
      "/* ------------------------------------------------------------------------------------------------------------------\n   * PAYMENT FORM - Generate a p",
      "/**\n\t * Gets called at the bottom of the form before the submit button. \n\t * Outputs a gateway selector and allows gateways to hook in and provide the",
      "// filter out non-displayable gateways",
      "//Check if we can user quick pay buttons",
      "//backward compatability",
      "//Continue with payment gateway selection",
      "//Add gateway selector",
      "// output like wp_localize_js",
      "//for filter compatibility",
      "/* ------------------------------------------------------------------------------------------------------------------\n   * Payment Notification Listen",
      "/**\n\t * Gateways that redirect back will be processed here first if using default links\n\t * @return void\n\t */",
      "/**\n\t * Checks whether em_payment_gateway is passed via WP_Query, GET or POST and fires the appropriate gateway filter.\n\t * yoursite.com/wp-admin/admi",
      "//Listen on admin-ajax.php",
      "/* ----------------------------------------------------------\n   * Booking Table and CSV Export\n   * -------------------------------------------------",
      "//get latest transaction with an ID",
      "/* ----------------------------------------------------------------------------------------------------\n   * USER FIELDS - Adds user details link for ",
      "/**\n\t * Returns value of a customer field, which are common fields for payment gateways linked to custom user fields in the forms editor.\n\t * @param s",
      "//determine field value",
      "//no-user mode is assumed since id is exactly 0",
      "//get meta from booking if user meta isn't available",
      "//get corresponding user meta field, the one in $EM_Booking takes precedence as it may be newer",
      "/* ----------------------------------------------------------------------------------------------------\n   * BUTTONS MODE Functions - i.e. booking doe",
      "/**\n\t * Determines whether bookings mode can be displayed, returns false if any of the gateways supplied in $gateways are not button-enabled.\n\t * @par",
      "/**\n\t * This gets called when a booking form created using the old buttons API, and calls subsequent gateways to output their buttons.\n\t * @param stri",
      "//$gateway_buttons = apply_filters('em_gateway_buttons', $gateway_buttons, $EM_Event);",
      "/**\n\t * OTHER FUNCTIONS\n\t */",
      "/**\n\t * Modifies exported multiple booking items\n\t * @param array $export_item\n\t * @param EM_Booking $EM_Booking\n\t * @return array\n\t */",
      "//we don't need to export bookings with an MB parent",
      "//get the transaction",
      "/* @var EM_Gateways_Transactions $EM_Gateways_Transactions */",
      "//replace ID with txn ID",
      "// replace this with assoc array of name/value key arrays",
      "/* @var EM_Booking $EM_Booking */",
      "//handle potentially deleted events in a MB booking",
      "//handle potentially deleted events in a MB booking",
      "/**\n\t * Deletes bookings pending payment that are more than x minutes old, defined by paypal options.\n\t */",
      "// Go through each gateway",
      "// adheres to general timeout limit",
      "// has a custom timeout limit, add to custom timeout time",
      "//get booking IDs without pending transactions",
      "//get the time in UTC",
      "//multiple bookings mode",
      "//If we're in MB mode, check that this isn't the main booking, if it isn't then skip it."
    ],
    "length": 35728,
    "preview": "<?php\nnamespace EM\\Payments;\nuse EM_Gateways_Transactions, EM_Booking, EM_Multiple_Bookings;\n\nclass Gateways {\n\t\n\t/**\n\t * Array of registered gateways that can be used on this site.\n\t * @var Gateway[]\n\t */\n\tprotected static $registered = array();\n\t\n ",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_booking_get_status",
      "booking_form",
      "payment_form_header",
      "payment_form_info",
      "payment_form",
      "payment_form_loading",
      "payment_form_selector",
      "payment_form_selector_radio_label",
      "payment_form_js",
      "payment_form_footer",
      "localize_js",
      "register_api",
      "handle_api_notify",
      "handle_api_notify_test",
      "handle_api_cancel",
      "handle_api_capture",
      "get_payment_return_api_url",
      "get_api_notify_url",
      "get_api_cancel_url",
      "get_api_capture_url",
      "booking_validate",
      "booking_add",
      "booking_added",
      "booking_form_feedback",
      "booking_form_feedback_fallback",
      "em_booking_output_placeholder",
      "em_my_bookings_booking_actions",
      "capture",
      "em_bookings_get_pending_spaces",
      "em_booking_is_reserved",
      "em_booking_is_pending",
      "em_ticket_get_pending_spaces",
      "handle_return_url",
      "thank_you_message",
      "get_thank_you_message",
      "em_manual_booking_success",
      "get_return_url",
      "handle_cancel_url",
      "get_cancel_url",
      "record_transaction",
      "em_gateways_transactions_table_gateway_id",
      "handle_booking_timeout",
      "handle_booking_timeout_action",
      "get_api_keys",
      "get_invoice_id",
      "get_option",
      "update_option",
      "uses_gateway",
      "is_active",
      "check_conditions",
      "is_displayable",
      "is_sandbox",
      "is_live",
      "is_test_mode",
      "is_live_mode",
      "is_mode",
      "get_mode",
      "force_mode",
      "booking_form_button",
      "admin",
      "admin_load",
      "handle_payment_return",
      "get_payment_return_url"
    ],
    "classes": [
      "is",
      "which",
      "Gateway",
      "and",
      "parent",
      "if",
      "and",
      "if",
      "EM",
      "name",
      "names",
      "must"
    ],
    "comments": [
      "/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken care of by\n *",
      "/**\n\t * Gateway reference, which is used in various places for referencing gateway info. Use lowercase characters/numbers and underscores.\n\t * @var st",
      "/**\n\t * This will be what admins see as the gatweway name (e.g. Offline, PayPal, Authorize.net ...)\n\t * @var string\n\t */",
      "/**\n\t * The default status value your gateway assigns this booking. Default is 0, i.e. pending 'something'.\n\t * @var int\n\t */",
      "/**\n\t * Set this to any true value and this will trigger the em_my_bookings_booked_message function to override the status name of this booking when i",
      "/**\n\t * If your gateway supports the ability to pay without requiring further fields (e.g. credit card info), then you can set this to true.\n\t * \n\t * ",
      "/**\n\t * If your gateway is compatible with our Multiple Bookings Mode, then you can set this to true, otherwise your gateway won't be available for bo",
      "/**\n\t * If your gateway is apt for manual bookings (for example, PayPal Standard is not) so that admins can manually enter payment info, such as card ",
      "/**\n\t * Associative array of supported WP REST API endpoints which are automatically gnerated by this base class, the endpoint name is the array key.\n",
      "/**\n\t * Array of flow settings during the booking process that can automatically trigger/ignore PHP and JS functionality\n\t * @var boolean[]\n\t */",
      "// if gateway would intercept the booking form before submission and handle the submission and result accodingly",
      "// if gateway loads fields etc. when selected",
      "// if gateway loads buttons (such as PayPal checkout)",
      "/**\n\t * Some external gateways (e.g. PayPal IPNs) return information back to your site about payments, which allow you to automatically track refunds ",
      "/**\n\t * If payments made via this gateway time out after a certain time without payment, setting this to true will automatically cancel the booking if",
      "/**\n\t * Counts bookings with pending spaces for availability, if pending spaces are enabled in general EM settings.\n\t * @var boolean\n\t */",
      "/**\n\t * Blocks bookings with pending spaces for availability, even if approvals setting is disabled in general EM settings. This should be enabled for",
      "/**\n\t * If gateway can have option to manually approve a booking after payment. Not always desirable, such as an offline payment essentially being man",
      "/**\n\t * If gateway requires SSL to operate (most will these days) this will check for SSL during is_active() and deactivate the gateway unless\n\t * the",
      "/**\n\t * For security checks such as webhook signatures, SSL checks and other parts of the gateway, if this named constant is defined and set to true t",
      "/**\n\t * Associated array containing counts for pending spaces of specific events, which can be reused when called again later on.\n\t * @var array\n\t */",
      "/**\n\t * Multidimensional associated containing pending spaces for specific tickets, within eacy array item is an array of event id keys and correspond",
      "/**\n\t * Unassociated array containing the url sprintable structure to a live transaction detail, test transaction detail and title service name for li",
      "/**\n\t * JS property name for localized variables under the EM.Gateways JS variable.\n\t * Default value is set to Gateway::$name upon init() unless spec",
      "/**\n\t * @var bool For legacy gateways.\n\t */",
      "/**\n\t * Name of option storing the API credentials of this gatewaym default is em_{static::$gateway}_api, test creds always prefixed with _test\n\t * @v",
      "/**\n\t * New gateway updates should enable this to support the latest test modes, and account for test modes where relevant.\n\t * @var bool\n\t */",
      "/**\n\t * If set to 'live' or 'test' the mode of this gateway will be forced into Live Mode or Test Mode respectively.\n\t * @var string\n\t */",
      "// TODO create generic settings location and admin like booking form content text field, api settings, etc.",
      "// TODO create way for base gateways to hold admin settings etc.",
      "// TODO handle refunds",
      "// TODO handle initial deposit",
      "// TODO handle authorization",
      "// TODO handle storage for multiple payments",
      "// TODO figure out way to hide button depending on flow/method",
      "/**\n\t * Adds some basic actions and filters to hook into the EM_Gateways class and Events Manager bookings interface. \n\t */",
      "/* @var Gateway $Gateway */",
      "// Actions and Filters, only if gateway is active",
      "//add booking placeholders",
      "//handle return payment notifications",
      "//transaction list link",
      "//warn admins about SSL",
      "// Modify spaces calculations, required even if inactive, due to previously made bookings whilst this may have been active",
      "// add default to static payment flow options",
      "/**\n\t * If you would like to modify the default status message for this payment whilst in progress.\n\t *\n\t * This function is triggered if set static::",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * @deprecated\n\t * $see payment_form()\n\t */",
      "/**\n\t * Outputs extra custom content\n\t * @return void\n\t */",
      "// limited test mode",
      "// regular test mode",
      "// outputs html content defined in settings",
      "/**\n\t * Outputs extra custom content e.g. information about this gateway or extra form fields to be requested if this gateway is selected (not applica",
      "/**\n\t * Outputs a skeleton loader\n\t */",
      "//  build data- properties",
      "/**\n\t * Outputs any JS injected directly below the gateway selection HTML, within some script tags (not with jQuery though).\n\t * @return void\n\t */",
      "/**\n\t * @return void\n\t */",
      "/**\n\t * Function automatically called by Gateways which auto-localizes JS into the EM.Gateways var\n\t * @return array|false\n\t */",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * Registers the relevant API endpoitns for this gateway\n\t * @return void\n\t */",
      "// webhook notification listener",
      "// capture of payments API",
      "/**\n\t * Return a WP REST result for handling a payment notification webhook\n\t *\n\t * @param WP_REST_Request $request Full data about the request.\n\t * @",
      "/**\n\t * Return a WP REST result for handling a payment notification webhook in test mode\n\t *\n\t * @param WP_REST_Request $request Full data about the r",
      "/**\n\t * Return a WP REST result for handling a payment cancellation via the EM Gateway form\n\t *\n\t * @param WP_REST_Request $request Full data about th",
      "// nonce OK, get booking, amke sure it's an intent and then delete it",
      "/**\n\t * Return a WP REST result for handling a payment capture via payment via EM Gateway form\n\t *\n\t * @param WP_REST_Request $request Full data about",
      "// nonce OK, get booking, amke sure it's an intent and then delete it",
      "/**\n\t * @deprecated Use Gateway::get_api_notify_url()\n\t */",
      "/**\n\t * Returns the REST API notification URL which gateways can send webhooks to, handled by handle_api_notify()\n\t *\n\t * @return string\n\t */",
      "// localhost testing allows you to set up a tunnel like ngrok or localxpose",
      "/**\n\t * Returns the REST API notification URL where EM can notify iself of a cancelled booking attempt, handled by handle_api_cancel()\n\t *\n\t * @return",
      "// localhost testing allows you to set up a tunnel like ngrok or localxpose",
      "/**\n\t * Returns the REST API notification URL where EM can notify iself of a booking to capture, handled by handle_api_capture()\n\t *\n\t * @return strin",
      "// localhost testing allows you to set up a tunnel like ngrok or localxpose",
      "/* ----------------------------------------------------------------------------------------------------\n* Booking Overrides\n* ------------------------",
      "/**\n\t * Triggered by the em_booking_add_yourgateway action, modifies the booking status if the event isn't free and also adds a filter to modify user ",
      "// handle redirect situations",
      "//modify the payment return",
      "//modify the payment return",
      "// add fallback if we're not in AJAX mode",
      "//we aren't doing ajax (or REST Request) here, so we should provide a way to edit the $EM_Notices ojbect.",
      "/**\n\t * Called by Gateways, triggered by the em_booking_added function. This function can be overriden by gateways to perform an action once a book ha",
      "/**\n\t * Intercepts return JSON and adjust feedback messages when booking with this gateway. This filter is added only when the em_booking_add function",
      "//remember this, it's a filter!",
      "/**\n\t * Called if AJAX isn't being used, i.e. a javascript script failed and forms are being reloaded instead.\n\t * This function adds or overwrites th",
      "/**\n\t * Adds extra placeholders to the booking email. Called by em_booking_output_placeholder filter, added in this object __construct() function.\n\t *",
      "/**\n\t * @param EM_Booking $EM_Booking\n\t * @param array $payload\n\t *\n\t * @return array\n\t */",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * Modifies pending spaces calculations to include gateway bookings, but only if gateway bookings are set to time-out (i.e. they'll get deleted a",
      "/**\n\t * Changes EM_Booking::is_reserved() return value to true. Only called if static::$count_pending_spaces is set to true.\n\t * @param boolean $resul",
      "/**\n\t * Modifies pending spaces calculations for individual tickets to include paypal bookings, but only if PayPal bookings are set to time-out (i.e. ",
      "/* --------------------------------------------------------------------------------------------------------\n* REDIRECTION Functions - Thank you and ca",
      "/**\n\t * Detect if use was brought back from gateway checkout and needs to be served a thank you message. Adds hooks to thank user on MB checkout page,",
      "//add actions for each page where a thank you might appear by default",
      "// load current event if booking_id or event_id supplied so that test mode can be determined",
      "/**\n\t * Outputs thank you message from gateway settings.\n\t * @see EM_Gateway::get_thank_you_message()\n\t */",
      "/**\n\t * Returns thank you message from gateway settings.\n\t * @return string\n\t */",
      "/**\n\t * Outputs info or takes action on gateway transaction if applicable.\n\t */",
      "/**\n\t * Gets a return url where a thank you message can be displayed. If no return URL can be determined, the home page will be used even though a tha",
      "//if MB mode, redirect to checkout page",
      "//if My Bookings Page exists, use that",
      "//otherwise, send back to original event page when booking is provided",
      "//no thank you message, but we redirect anyway",
      "//add the flag for displaying a message and return",
      "/* @var \\EM_Notices $EM_Notices */",
      "// restore booking into session - ids can be preserved since they should all be deleted on auto-increment tables",
      "/**\n\t * Gets a cancellation url where a relevant you message can be displayed. If no cancellation URL has been set, the event page the booking was att",
      "/* --------------------------------------------------\n* TRANSACTION FUNCTIONS\n* --------------------------------------------------*/",
      "/**\n\t * Records a transaction according to this booking and gateway type.\n\t * @param EM_Booking $EM_Booking\n\t * @param float $amount\n\t * @param string",
      "//we must get the prefix of the transaction table for this event's blog if it is not the root blog",
      "//Duplicate, so we log and ignore it.",
      "// As of EM Pro 2.6.5 we will not update previous transaction but create new ones, so that there's a fuller history of transaction operations",
      "//convert unix timestamps",
      "/**\n\t * Converts the transaction ID field in transaction admin tables into a clickable link to view the transaction on PayPal.\n\t * @param $transaction",
      "/**\n\t * If this gateway $has_timeout is set to true, or has a custom timeout time, when there are bookings awaiting payment from this gateway that sur",
      "// go through $booking_ids and check if the booking was paid, otherwise cancel",
      "/* --------------------------------------------------\n * HELPER FUNCTIONS\n * --------------------------------------------------*/",
      "/**\n\t * Gets the API keys whether in live or test mode.\n\t * @param $args\n\t *\n\t * @return false|array\n\t */",
      "// handle passed $args, older PHP versions can pass array as argument for associative array, until PHP 8 is the norm and we can pass named variables",
      "/**\n\t * Returns unique ID for use in transaction order meta for easy searching/linking of booking to transactions, combines uuid with a booking ID for",
      "// backwards compatible for old transactions since EM Pro > 3.1.3",
      "/**\n\t * Gets the gateway option from the correct place. Does not require prefixing of em_gatewayname_\n\t * Will be particularly useful when restricting",
      "/**\n\t * Updates the gateway option to the correct place. Does not require prefixing of em_gatewayname_\n\t * Will be particularly useful when restrictin",
      "/**\n\t * Checks an EM_Booking object and returns whether or not this gateway is/was used in the booking.\n\t * @param EM_Booking $EM_Booking\n\t * @return ",
      "/**\n\t * Returns whether gateway is active, in the particular context. The default context is bookings for backward compatibility.\n\t * An additional ob",
      "//stripe will not work out of SSL to adhere to their requirements",
      "// if no checks, then it's true",
      "// false until proven true",
      "// check against IP limits",
      "// check against User limtis",
      "// check against event type",
      "/**\n\t * If gateway supports sandbox/live mode, returns true if in live/production mode. Returns a boolean value if in limited test mode.\n\t *\n\t * @para",
      "// check against IP and User ID",
      "/**\n\t * If gateway supports sandbox/live mode, returns true if in sandbox/test mode.\n\t *\n\t * @deprecated\n\t * @use static::is_test_mode()\n\t * @return b",
      "/**\n\t * If gateway supports sandbox/live mode, returns true if in live/production mode.\n\t *\n\t * @deprecated\n\t * @use static::is_live_mode()\n\t * @retur",
      "/**\n\t * If gateway supports sandbox/live mode, returns true if in live/production mode. Returns a boolean value or an array if in limited test mode.\n\t",
      "// forced mode is set, return whatever it says",
      "// get all the checks and see if any are truthy, meaning limited mode is on",
      "// forced mode is set, return whatever it says",
      "// check if pure live mode, otherwise if limited test mode is active but not applicable in this instance",
      "// get the mode, then test against $mode",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * Shows button, not needed if using the new form display\n\t * @return string\n\t */",
      "//',get_option('em_'. static::$gateway . \"_button\")) ): ?>",
      "/* --------------------------------------------------\n * ADMIN LOADERS\n * -------------------------------------------------- */",
      "/**\n\t * Loads the gateway admin class parent and child classes and returns the child (or parent if not defined) \\EM\\Payments\\Gateway_Name\\Gateway_Admi",
      "// load default base class if not already loaded",
      "// get admin class and load",
      "/**\n\t * Loads and inits the admin gateway class if the child gateway has the same file prefixed '-admin.php'. For example, the gateway class EM\\Paymen",
      "/* @var Gateway_Admin $admin_class */",
      "/* @var Gateway_Admin $admin_class */",
      "/* ---------------------------------------------------------------------------------------------------------------------------------------------------",
      "/**\n\t * If you set your gateway class $payment_return_ajax property to true, this function will be called when your external gateway sends a notificat",
      "/**\n\t * Returns the notification URL which gateways sends return messages to, e.g. notifying of payment status.\n\t *\n\t * Your URL would correspond to h",
      "// localhost testing allows you to set up a tunnel like ngrok or localxpose"
    ],
    "length": 54778,
    "preview": "<?php\nnamespace EM\\Payments;\nuse EM_Pro, EM_Booking, EM_Event;\nuse WP_REST_Response, WP_REST_Request, WP_Error;\n\n/**\n * This class is a parent class which gateways should extend. There are various variables and functions that are automatically taken ",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateway.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [
      "Gateway_Admin"
    ],
    "comments": [
      "/**\n * This Gateway is slightly special, because as well as providing public static functions that need to be activated, there are offline payment pub"
    ],
    "length": 342,
    "preview": "<?php\nnamespace EM\\Payments\\Offline;\n\n/**\n * This Gateway is slightly special, because as well as providing public static functions that need to be activated, there are offline payment public static functions that are always there e.g. adding manual ",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateway.offline-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_enqueue",
      "ajax_toggle_mode",
      "legacy_check",
      "legacy_notice",
      "admin_options",
      "admin_menu",
      "handle_gateways_panel",
      "handle_gateways_panel_updates",
      "customer_fields_admin_actions",
      "customer_fields_admin"
    ],
    "classes": [
      "Gateways_Admin"
    ],
    "comments": [
      "//Gateways and user fields",
      "// get the gateway and status",
      "// add option to transition out of legacy mode",
      "//eventsmanagerpro.com/downloads/\" target=\"_blank\">Downloads page</a> to get new gateway payment methods.</p>",
      "// break; so we don't show the list below",
      "// break; so we don't show the list below",
      "//Check if Multi-Booking Ready",
      "//eventsmanagerpro.com/downloads/\">'. esc_html__('Download new payment methods for this gateway.').'</a>';",
      "/* @var Gateway $Gateway */",
      "//enable dbem_bookings_tickets_single_form if enabled",
      "//enable dbem_bookings_tickets_single_form if enabled"
    ],
    "length": 21314,
    "preview": "<?php\nnamespace EM\\Payments;\nuse EM_Options, EM_User_Fields;\n\nclass Gateways_Admin{\n\t\n\tpublic static function init(){\n\t\tadd_action('em_create_events_submenu', array(get_called_class(), 'admin_menu'),10,1);\n\t\tif( !empty($_REQUEST['page']) && $_REQUEST",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways-admin.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "// we're live mode, hide test, limited and show live mode info",
      "// we're test mode, hide limited, live and show test mode info",
      "// we're test mode, hide live, test and show limited mode info"
    ],
    "length": 2466,
    "preview": "document.addEventListener('DOMContentLoaded', function(){\n\tdocument.querySelectorAll('.gateway-status-togggle').forEach( function(el) {\n\t\tel.addEventListener('click', function( e ){\n\t\t\te.preventDefault();\n\t\t\tif( !el.getAttribute('data-text') ){\n\t\t\t\te",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways-admin.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "// get currently selected gateway",
      "//prevents submission in order to append a hidden field and bind to the booking form submission event",
      "// Take over booking submission",
      "// we have a paid booking with gateway selection, short-circuit process here entirely",
      "// change to false and populate errors",
      "// errors to be displayed, with field id as key",
      "// run pre-validation, such as card number discrepencies. If errors added, abort here",
      "// execute any promises syncronously",
      "// continue if validation worked",
      "// get options to prevent handling successful booking before gateways intervene",
      "// submit booking, if all good, trigger gateway hook",
      "// create and dispatch custom event",
      "// execute any promises syncronously",
      "// check passed object for success or fail errors and handle accordingly",
      "// let EM handle errors etc.",
      "// trigger gateway event when selected",
      "// hide regular button if necessary",
      "// remove lazy load when loaded",
      "// trigger event for loading",
      "// mark as initialized",
      "// catch price change detection, showing gateway selection if free",
      "// there is an intent",
      "// dispath events for selected gateway",
      "// fire general event",
      "// hide and disable regular button if necessary",
      "// make sure gateway is initialized first time",
      "// it's a free booking"
    ],
    "length": 8229,
    "preview": "//Select Submission\ndocument.addEventListener(\"em_booking_form_init\", function( e ) {\n\tlet booking_form = e.target;\n\tlet selected_gateway;\n\tlet gateway_selectors = '.em-payment-gateways select.em-payment-gateway-options, .em-payment-gateways input[ty",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways.js"
  },
  {
    "type": "css",
    "selectors": [
      "",
      "",
      "",
      "",
      "",
      ".gateway-status-info.hidden",
      ".gateway-status-info.notice",
      "first-of-type",
      "last-of-type",
      ".gateway-status-info .gateway-status-content",
      "a",
      ".gateway-notice",
      ".gateway-notice.gateway-notice-confirm",
      ".gateway-notice.gateway-notice-info",
      ".gateway-notice.has-icon",
      "first-of-type",
      "last-of-type",
      ".gateway-notice",
      "td.em-boxheader"
    ],
    "rules": [
      "color: green;",
      "color: #999;",
      "color: #999;",
      "color: green;",
      "color: orange;",
      "display: none !important;\n  visibility: hidden !important;",
      "padding: 10px;",
      "margin-top: 0;",
      "margin-bottom: 0;",
      "display: grid;\n  grid-template-columns: auto max-content;\n  grid-gap: 15px;\n  align-items: center;\n  align-content: center;",
      "align-self: start;\n  margin-top: 3px;",
      "margin: 20px 0;\n  padding: 15px 20px;\n  background: #fff;\n  border-left: 4px solid #ffa500;",
      "border-color: green;",
      "border-color: #72aee6;",
      "display: grid;\n  grid-template-columns: 25px auto;\n  grid-gap: 15px;",
      "margin-top: 0;",
      "margin-bottom: 0;",
      "margin: 0;",
      "padding-left: 0;"
    ],
    "length": 1465,
    "preview": "span.gateway-mode-live[data-mode=live], span.gateway-mode-live[data-mode=limited] {\n  color: green;\n}\nspan.gateway-mode-live[data-mode=test] {\n  color: #999;\n}\n\nspan.gateway-mode-test[data-mode=live] {\n  color: #999;\n}\nspan.gateway-mode-test[data-mod",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways-admin.css"
  },
  {
    "type": "scss",
    "length": 1201,
    "preview": "span.gateway-mode-live {\n\t&[data-mode=\"live\"], &[data-mode=\"limited\"] {\n\t\tcolor : green;\n\t}\n\t&[data-",
    "file": "src/code/events-manager-pro/add-ons/gateways/gateways-admin.scss"
  }
]