[
  {
    "type": "php",
    "functions": [
      "init",
      "booking_form_feedback",
      "booking_form_feedback_fallback",
      "booking_add",
      "em_my_bookings_booking_actions",
      "payment_form_js",
      "get_paypal_vars",
      "get_paypal_url",
      "handle_payment_return",
      "handle_payment_status",
      "handle_booking_timeout",
      "payment_return_local_ca_curl"
    ],
    "classes": [
      "Gateway"
    ],
    "comments": [
      "//change these properties below if creating a new gateway, not advised to change this for PayPal",
      "//www.paypal.com/activity/payment/%s',",
      "//www.sandbox.paypal.com/activity/payment/%s',",
      "/**\n\t * Sets up gateaway and adds relevant actions/filters \n\t */",
      "//Booking Interception",
      "/* \n\t * --------------------------------------------------\n\t * Booking Interception - functions that modify booking object behaviour\n\t * -------------",
      "/**\n\t * Intercepts return data after a booking has been made and adds paypal vars, modifies feedback message.\n\t * @param array $return\n\t * @param EM_B",
      "//Double check $EM_Booking is an EM_Booking object and that we have a booking awaiting payment.",
      "//returning a free message",
      "/**\n\t * Adds the PayPal booking button, given the request should have been successful if the booking form feedback msg was called.\t *\n\t * @param strin",
      "/**\n\t * Triggered by the em_booking_add_yourgateway action, hooked in EM_Gateway. Overrides EM_Gateway to account for non-ajax bookings (i.e. broken J",
      "//we aren't doing ajax here, so we should provide a way to edit the $EM_Notices ojbect.",
      "/* \n\t * --------------------------------------------------\n\t * Booking UI - modifications to booking pages and tables containing paypal bookings\n\t * -",
      "/**\n\t * Instead of a simple status string, a resume payment button is added to the status message so user can resume booking from their my-bookings pa",
      "//if in multiple booking mode, switch the booking for the main booking and treat that as our booking",
      "//first make sure there's no pending payments",
      "/**\n\t * Outputs some JavaScript during the EM_Gateways::payment_form() function, which is run inside a script html tag, located in gateways/gateway.pa",
      "/*\n\t * --------------------------------------------------\n\t * PayPal Functions - functions specific to paypal payments\n\t * ---------------------------",
      "/**\n\t * Retreive the PayPal vars needed to send to the gatway to proceed with payment\n\t * @param EM_Booking $EM_Booking\n\t */",
      "//address fields`and name/email fields to prefill on checkout page (if available)",
      "//calculate discounts and surcharges if there are any",
      "/*\n\t\t * IMPORTANT - If there's any adjustments to the price, we need to include one single price.\n\t\t * The reason for this is because PayPal simply ca",
      "/* @public static $EM_Ticket_Bookings EM_Ticket_Bookings */",
      "//divide price by spaces for per-ticket price by getting first ticket booking and getting the price that way",
      "/* @var EM_Ticket_Booking $EM_Ticket_Booking */",
      "//we divide this way rather than by $EM_Ticket because that can be changed by user in future, yet $EM_Ticket_Booking will change if booking itself is ",
      "/**\n\t * gets paypal gateway url (sandbox or live mode)\n\t * @returns string \n\t */",
      "//www.sandbox.paypal.com/cgi-bin/webscr':'https://www.paypal.com/cgi-bin/webscr';",
      "/**\n\t * Runs when PayPal sends IPNs to the return URL provided during bookings and EM setup. Bookings are updated and transactions are recorded accord",
      "// PayPal IPN handling code",
      "//Verify IPN request",
      "//www.paypal.com/cgi-bin/webscr';",
      "//www.sandbox.paypal.com/cgi-bin/webscr';",
      "//add a CA certificate so that SSL requests always go through",
      "//using WP's HTTP class",
      "//log ipn request if needed, then move on",
      "//log error if needed, send error header and exit",
      "//if we get past this, then the IPN went ok",
      "// handle cases that the system must ignore",
      "//legacy checking, newer bookings should have a unique invoice number",
      "//since we're overriding the booking ourselves.",
      "// process PayPal response",
      "//header('Status: 404 Not Found');",
      "//echo \"<pre>\"; print_r($_POST); echo \"</pre>\";",
      "// Did not find expected POST variables. Possible access attempt from a non PayPal site.",
      "//header('Status: 404 Not Found');",
      "/**\n\t * Handles a payment status change in PayPal, as in a IPN notification, PDT callback or other lookup.\n\t * @param EM_Booking $EM_Booking\n\t * @para",
      "// case: successful payment",
      "//approve and ignore spaces",
      "//TODO do something if pp payment not enough",
      "//Set back to normal \"pending\"",
      "// case: charge back",
      "//We need to cancel their booking.",
      "//we need to compare two positive numbers for refunds",
      "//Set back to normal \"pending\" but don't send email about it to prevent confusion",
      "// case: payment is pending",
      "//do nothing, just update the transaction",
      "// case: various error cases",
      "//get creds and check they exist before even trying this",
      "//go through each booking and check if there's a matching payment on paypal already, in case there's problems with IPN callbacks",
      "//Verify if Payment has been made by searching for the Invoice ID, which would be EM-BOOKING#x were x is the booking id",
      "//api-3t.paypal.com/nvp' : $domain = 'https://api-3t.sandbox.paypal.com/nvp';",
      "//1 month back just to be sure",
      "//set request values",
      "//add a CA certificate so that SSL requests always go through",
      "//using WP's HTTP class",
      "//we expect a single result from this search, since searching for a invoice ID should be unique",
      "//check response and see whether we have an actual pending booking",
      "//conservatively decide not to delete a booking by default",
      "//we received a result, so we shouldn't delete this payment and act as if we received an IPN",
      "//search produced no results, so we assume there's no payment made and just delete the booking",
      "//only if a payment hasn't been made do we delete the booking",
      "//some sort of error, log if needed but we won't delete anything",
      "//log error if needed, send error header and exit",
      "/**\n\t * Fixes SSL issues with wamp and outdated server installations combined with curl requests by forcing a custom pem file, generated from - http:/"
    ],
    "length": 26075,
    "preview": "<?php\nnamespace EM\\Payments\\Paypal\\Legacy;\n\nuse EM_Booking, EM_Event, EM_Multiple_Bookings, EM_Pro, EM;\n\nclass Gateway extends EM\\Payments\\Gateway {\n\t//change these properties below if creating a new gateway, not advised to change this for PayPal\n\tpu",
    "file": "src/code/events-manager-pro/add-ons/gateways/paypal-legacy-standard/gateway.paypal.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "settings_tabs",
      "settings_options",
      "settings_credentials",
      "update"
    ],
    "classes": [
      "Gateway_Admin"
    ],
    "comments": [
      "//wp-events-plugin.com/documentation/events-with-paypal/paypal-displaying-taxes/\">'. __('Click here for more information.','em-pro').'</a>');",
      "// address.', 'em-pro'); ?>",
      "//wp-events-plugin.com/documentation/events-with-paypal/'); ?></p>",
      "/* \n\t * Run when saving PayPal settings, saves the settings available in EM_Gateway_Paypal::mysettings()\n\t */",
      "//add wp_kses sanitization filters for relevant options",
      "//pass options to parent which handles saving"
    ],
    "length": 5657,
    "preview": "<?php\nnamespace EM\\Payments\\Paypal\\Legacy;\n\nclass Gateway_Admin extends \\EM\\Payments\\Gateway_Admin {\n\t\n\tpublic static function init() {\n\t\tparent::init();\n\t\tstatic::$api_cred_fields = array(\n\t\t\t'username' => __('API Username', 'em-pro'),\n\t\t\t\"password\"",
    "file": "src/code/events-manager-pro/add-ons/gateways/paypal-legacy-standard/gateway.paypal-admin.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//add paypal redirection",
      "// called by EM if return JSON contains gateway key, notifications messages are shown by now."
    ],
    "length": 668,
    "preview": "//add paypal redirection\njQuery(document).on('em_booking_gateway_add_paypal', function(event, response){\n\t// called by EM if return JSON contains gateway key, notifications messages are shown by now.\n\tif(response.result && typeof response.paypal_url ",
    "file": "src/code/events-manager-pro/add-ons/gateways/paypal-legacy-standard/gateway.paypal.js"
  }
]