[
  {
    "type": "php",
    "functions": [
      "__construct",
      "widgets_init",
      "widget",
      "update",
      "form"
    ],
    "classes": [
      "EM_Multiple_Bookings_Widget"
    ],
    "comments": [
      "/**\n * @author marcus\n * Standard events list widget\n */",
      "/** constructor */",
      "/** @see WP_Widget::widget */",
      "/** @see WP_Widget::update */",
      "/** @see WP_Widget::form */"
    ],
    "length": 3167,
    "preview": "<?php\n/**\n * @author marcus\n * Standard events list widget\n */\nclass EM_Multiple_Bookings_Widget extends WP_Widget {\n\n\tvar $defaults;\n\n\t/** constructor */\n\tfunction __construct() {\n\t\t$this->defaults = array(\n\t\t\t\t'title' => __('Event Bookings Cart','e",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings-widget.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "page_warning",
      "single_booking_emails_tip",
      "settings",
      "emails"
    ],
    "classes": [
      "EM_Multiple_Bookings_Admin"
    ],
    "comments": [
      "//Warn about EM page edit",
      "/**\n     * Settings for Multiple Bookings Mode \n     */",
      "//wp-events-plugin.com/documentation/multiple-booking-mode/\"><?php echo sprintf(__('More about %s.','em-pro'), __('Multiple Bookings Mode','em-pro'));"
    ],
    "length": 15993,
    "preview": "<?php\nclass EM_Multiple_Bookings_Admin {\n\n    public static function init(){\n        add_action('em_options_page_footer_bookings', 'EM_Multiple_Bookings_Admin::settings');\n        if( !get_option('dbem_multiple_bookings') ) return false;\n        add_",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__sleep",
      "__wakeup",
      "get_bookings",
      "add_booking",
      "remove_booking",
      "get_post",
      "validate",
      "validate_bookings",
      "validate_bookings_spaces",
      "save_bookings",
      "get_price",
      "get_price_base",
      "get_booking_price",
      "get_booking_price_adjustment",
      "calculate_price",
      "get_event",
      "get_tickets",
      "get_tickets_bookings",
      "delete",
      "set_status",
      "is_reserved",
      "get_admin_url",
      "output",
      "email",
      "admin_email",
      "email_messages",
      "can_manage"
    ],
    "classes": [
      "EM_Multiple_Booking"
    ],
    "comments": [
      "/**\n     * array of booking objects related to this group of bookings\n     * @var array\n     */",
      "//add extra cleaning function in case we're wanting to convert a normal EM_Booking object",
      "//load like a normal booking",
      "/**\n\t * Adds 'bookings' to the EM_Booking parent call.\n\t * @return string[]\n\t * @see EM_Booking::__sleep()\n\t */",
      "/**\n\t * Overrides EM_Booking wakeup to prevent overwriting EM_Ticket_Booking objects with the MB object rather than the EM_Booking single instance.\n\t ",
      "//get bookings related to this object and load into $bookings object",
      "//in case there's a booking that was already deleted",
      "//if status is not set, give 1 or 0 depending on general approval settings",
      "//add booking to cart session",
      "//so that this is done again",
      "//so that this is done again",
      "//refresh status in case bookings are all approved already",
      "//error, booking for event already exists",
      "//remove ticket booking records belonging to this event",
      "/* @var $EM_Ticket EM_Ticket */",
      "//remove event from bookings array",
      "//refresh price and spaces",
      "//reset booking meta to prevent previously saved data being used for empty booking fields",
      "//let forms etc. do their thing",
      "//reset errors since this is always using sessions and we're about to revalidate",
      "//check first that there are even bookings to process, in cases where someone may trick the checkout e.g. via back button on paypal",
      "//let forms etc. do their thing",
      "/* @var $EM_Booking EM_Booking */",
      "//only do this for non-saved bookings",
      "// remove filter added by em_booking_validate hook whilst checking booking spaces",
      "// return result of all booking validations, errors added to $this->errors",
      "/**\n\t * Saves all bookings into the database, whether a new or existing booking\n\t * @param boolean $mail\n\t * @return boolean\n\t */",
      "/* @var $EM_Booking EM_Booking */",
      "//assign person/registration info to this booking, overwrites any previous value",
      "//TODO can probably add more to this, e.g. add everything EXCEPT 'booking', e.g. coupon too",
      "//if all went well, save master booking",
      "//firstly delete all previous relationships if they exist",
      "//create new relations between bookings and master booking",
      "//successfully saved everything",
      "//same concept/code to what we do with EM_Bookings::add();",
      "//something went wrong - roll back and delete",
      "/* @var $EM_Ticket_Booking EM_Ticket_Booking */",
      "/**\n\t * Gets the total price for this whole booking, including taxes, discounts, etc.\n\t * @param boolean $format\n\t * @return float\n\t */",
      "/* Deprecated - use em_multiple_booking_calculate_price instead */",
      "//get post-tax price and save it to booking_price",
      "/* NOTE!!! MB Bookings don't take into account any specific taxes, discounts and surcharges applied to an individual booking in MB mode.\n\t     * The s",
      "//return booking_price, formatted or not",
      "//we can show a relative-adjusted price if there's any discounts or surcharges",
      "//set booking total here as a shortcut",
      "//if MB total is > 0 then we need to get any discounts and surcharges and apply them proportionally to each event",
      "//calculate gross amount of MB value without price adjustments to figure out the true percentage value of this booking wihtin the group",
      "//get total price without discounts to determing % contribution of this event",
      "//calculate discounts and surcharges with taxes already included",
      "/**\n\t * Returns the amount the price is adjusted to the total price of this group of bookings after taxes are applied.\n\t * If you got the total price ",
      "/**\n\t * Gets the event this booking belongs to and saves a refernece in the event property\n\t * @return EM_Event\n\t */",
      "//reset event object",
      "/**\n\t * Gets the tickets object but containing all events \n\t * @return EM_Tickets\n\t */",
      "//Get tickets for every booking within this multiple booking",
      "/**\n\t * Gets the tickets_bookings object with ALL tickets_bookings records for every event.\n\t * @return EM_Tickets_Bookings\n\t */",
      "//get array of booking ids and pass this on below",
      "/**\n\t * Deletes ALL bookings related to this booking and then deletes this booking group \n\t * @return boolean\n\t */",
      "//queue bookings for deletion",
      "//we empty the tickets_bookings array because otherwise we'll try to delete tickets belonging to bookings within this one",
      "/**\n\t * Change the status of the booking group and sub-bookings.\n\t * @param int $status\n\t * @return boolean\n\t */",
      "//we're going to set all of the bookings to this status with one SQL statement, to prevent unecessary hooks from firing",
      "// send emails now after all is done, copied from EM_Booking::set_status",
      "//extra errors may be logged by email() in EM_Object",
      "/* (non-PHPdoc)\n\t * Not a booking for an actual event, so never 'reserved'\n\t * @see EM_Booking::is_reserved()\n\t */",
      "//this booking object doesn't have 'tickets', all these become defunct",
      "//change how this placeholder displays, for backwards compatability",
      "//change how this placeholder displays, for backwards compatability",
      "//change how this placeholder displays, for backwards compatability",
      "//sort out replacements so that during replacements shorter placeholders don't overwrite longer varieties.",
      "//run through original booking object for commonly used fields",
      "//since we're always dealing with a single email",
      "//we also email individual booking emails to the individual event owners",
      "// prevent emailing owner of ownerless event for a mb wrapper",
      "// replace admin email with MB admin email",
      "/**\n\t * Overrides the booking email content function and uses multiple booking templates\n\t * @return array\n\t */",
      "//blank msg template",
      "//admin messages won't change whether pending or already approved",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//generate ical for multiple events",
      "/**\n\t * To manage a multiple booking, only event admins can see the whole set of bookings.\n\t */"
    ],
    "length": 26733,
    "preview": "<?php\nclass EM_Multiple_Booking extends EM_Booking{\n    \n    /**\n     * array of booking objects related to this group of bookings\n     * @var array\n     */\n    public $bookings = array();\n    public $booking_status = 0;\n    \n    function __construct",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-booking.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_booking_email_messages",
      "em_multiple_booking_get_post",
      "em_multiple_booking_email_before_send",
      "em_multiple_booking_email_after_send"
    ],
    "classes": [
      "EM_Multiple_Bookings_ML"
    ],
    "comments": [
      "//circumvent MB booking language switching during email sending",
      "/**\n     * Near copy of EM_ML_Bookings::em_booking_email_messages() but for an EM_Multiple_Booking object.\n     * @param array $msg\n     * @param EM_M",
      "//only proceed if booking was in another language AND we're not in the current language given the option is translated automatically",
      "//below is copied script from EM_Multiple_Booking::email_messages() replacing get_option with EM_ML_Options::get_option() supplying the booking langua",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)"
    ],
    "length": 4450,
    "preview": "<?php\nclass EM_Multiple_Bookings_ML{\n    \n    public static function init(){\n        add_filter('em_multiple_booking_email_messages','EM_Multiple_Bookings_ML::em_booking_email_messages',10,2);\n        add_filter('em_multiple_booking_get_post', 'EM_Mu",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings-ml.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "wp_init",
      "em_ml_init",
      "em_get_booking",
      "em_wp_localize_script",
      "session_start",
      "session_close",
      "get_multiple_booking",
      "session_save",
      "booking_form_classes",
      "prevent_user_fields",
      "prevent_user_validation",
      "em_booking_add",
      "em_booking_button",
      "em_booking_save",
      "placeholders",
      "remove_booking",
      "empty_cart",
      "restore_cart",
      "empty_cart_ajax",
      "checkout",
      "template_redirect",
      "pages",
      "pages_enqueue",
      "cart_contents_ajax",
      "em_booking_js_footer",
      "checkout_page_contents_ajax",
      "checkout_page",
      "checkout_page_polyfill",
      "checkout_page_backcompat",
      "cart_page_contents_ajax",
      "cart_page",
      "em_cart_js_footer",
      "cart_widget_contents_ajax",
      "cart_contents",
      "em_cart_widget_js_footer",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template",
      "em_bookings_admin_ticket_totals_footer",
      "em_booking_get_person_editor",
      "em_booking_get_person_post",
      "get_main_booking",
      "get_main_booking_id",
      "is_main_booking",
      "is_child_booking",
      "bookings_admin_notices",
      "booking_admin",
      "em_cart_js_footer",
      "data_privacy_export"
    ],
    "classes": [
      "EM_Multiple_Bookings"
    ],
    "comments": [
      "/**\n     * Multiple Booking object instance for current user session\n     * @var EM_Multiple_Booking\n     */",
      "// when saving bookings, we need to make sure MB objects update the total price",
      "// switch EM_Booking with EM_Multiple_Booking object if applicable",
      "// for emails of individual bookings needing info from the master booking (this class)",
      "//cart/checkout pages",
      "//ajax calls for cart actions",
      "//ajax calls for cart checkout",
      "//ajax calls for cart contents",
      "//cart content widget and shortcode",
      "//booking admin pages",
      "//add MB warnings if booking is part of a bigger booking",
      "//handle page for showing a single multiple booking",
      "//no user booking mode",
      "//only hook in if we're editing a no-user booking",
      "//price adjustment on booking admin page",
      "//booking table and csv filters",
      "//not admin area or a manual booking",
      "//modify traditional booking forms behaviour",
      "//prevent user fields from showing",
      "//prevent user fields validation",
      "//hooking into the booking process",
      "//prevent booking being made and add to cart",
      "//if we're manually booking, don't load the cart JS stuff",
      "//add MB bookings to export",
      "//remove booking form privacy filters and add them to mb checkout form",
      "// backwards compatible",
      "//session id - previously we didn't need to start a session on init, but we need to as of PHP 7.1 since sessions must be started before headers are se",
      "//to get around this, we check if a session was previously started so we can recover saved session data, otherwise we can start a session later on whe",
      "/**\n     * Starts a session, and returns whether session successfully started or not.\n     * We can start a session after the headers are sent in this",
      "// we can circumvent since $_SESSION has been loaded for reading already",
      "/**\n     * Grabs multiple booking from session, or creates a new multiple booking object\n     * @return EM_Multiple_Booking\n     */",
      "//load and unserialize EM_Multiple_Booking from session",
      "//create new EM_Multiple_Booking object if one wasn't created",
      "//clean booking data to remove unecessary bloat",
      "//don't try removing the booking objects, because there's no booking ID yet, but anything with an ID already can go",
      "/**\n     * Hooks into em_booking_add ajax action early and prevents booking from being saved to the database, instead it adds the booking to the booki",
      "//booking can be added to cart",
      "// we remove any previously saved restorable data at this point",
      "//if not ajax, make this notice static for redirect",
      "//if not ajax, make this notice static for redirect",
      "//em_booking_add uses ob_start(), so flush it here",
      "/**\n\t * Replaces booking button with a link to cart if already added to cart.\n\t * @param string $button\n\t * @param EM_Event $EM_Event\n\t * @return stri",
      "/**\n     * @param boolean $result\n     * @param EM_Booking $EM_Booking\n     */",
      "//only do this to a previously saved EM_Booking object, not newly added",
      "//if part of multiple booking, recalculate and save mb object too",
      "/**\n\t * @param string $replace\n\t * @param EM_Booking $EM_Booking\n\t * @param string $full_result\n\t * @param string $target\n\t * @param array $placeholde",
      "// we output this placeholder as if it was a regular #_BOOKINGFORMCUSTOM in context of the multiple booking wrapper",
      "//to prevent MIME type errors in MultiSite environments",
      "//add this for HTTP -> HTTPS requests which assume it's a cross-site request",
      "//remove filters so that our master booking validates user fields",
      "//prevent user fields from showing",
      "//prevent user fields validation",
      "//now validate the master booking",
      "//re-add filters to prevent individual booking problems",
      "//prevent user fields from showing",
      "//prevent user fields validation",
      "//fire the equivalent of the em_booking_add action, but multiple variation",
      "//get_event returns blank, just for backwards-compatibility",
      "//proceed with saving bookings if all is well",
      "// copy MB object temporarily in case users clicks 'back' button on gateways, will delete next page reload",
      "//save user registration",
      "//save master booking, which in turn saves the other bookings too",
      "//we're done with this checkout!",
      "//delete registered user temp info (if exists)",
      "//add this for HTTP -> HTTPS requests which assume it's a cross-site request",
      "/**\n\t * Checks to see the current post and if it's a cart page, validate here whilst we can read-to-modify sessions\n\t * @param $template\n\t *\n\t * @retu",
      "/**\n     * Hooks into the_content and checks if this is a checkout or cart page, and if so overwrites the page content with the relevant content. Uses",
      "//fix for any other plugins calling the_content outside the loop",
      "//Now, we either replace CONTENTS or just replace the whole page",
      "/* Checkout Page Code */",
      "// backwards compatibility for EM Pro 3.2 and earlier",
      "// for oudated code using deprecated action",
      "// for outdated overriden templates that don't use new actions",
      "//load contents if not using caching, do not alter this conditional structure as it allows the cart to work with caching plugins",
      "/**\n\t * Provides a polyfill for outdated templates that don't trigger new actions such as em_checkout_form_confirm_footer, which is used for\n\t * cruci",
      "// remove the backcompat to prevent loop",
      "// output booking intent",
      "// trigger the new actions required for gateways etc to work",
      "/**\n\t * Triggers any actions that are bound to the deprecated em_checkout_form_footer action, ensuring compatibility with outdated code that\n\t * hasn'",
      "// remove polyfill to prevent loop",
      "// trigger deprecated action",
      "/* Shopping Cart Page */",
      "//load contents if not using caching, do not alter this conditional structure as it allows the cart to work with caching plugins",
      "/* Shopping Cart Widget */",
      "//load cart widget JS once per page",
      "/*\n     * ----------------------------------------------------------\n    * Booking Table and CSV Export\n    * ----------------------------------------",
      "//is this part of a multiple booking?",
      "//add asterisk if MB price had an adjustment",
      "//user fields already handled, htmls shouldn't show",
      "//prefix MB fields with mb_ to avoid clashes with normal booking forms",
      "//is this part of a multiple booking?",
      "//get adjusted price and if different, print it out",
      "/*\n     * ----------------------------------------------------------\n    * No-User Bookings Admin Stuff\n    * ----------------------------------------",
      "//if this is an MB booking or part of one, add a note mentioning that all bookings made will get modified",
      "/**\n\t * Saves personal booking information to all bookings if user has permission\n\t * @return boolean\n\t */",
      "//if this is an MB booking or part of one, edit all the other records too",
      "//save personal info to main booking if this isn't the main booking",
      "//save other sub-bookings",
      "/* @var $booking EM_Booking */",
      "/*\n     * ----------------------------------------------------------\n     * Retrieval and checking of booking objects\n     * -------------------------",
      "/**\n\t * Returns the main booking object of a supplied EM_Booking object, itself if it is in fact the parent booking, or returns false if booking doesn",
      "/**\n\t * Returns the booking ID of multiple booking object, if one is associated to this booking. If supplied booking object is a EM_Multiple_Booking o",
      "//If already main booking, return the booking_id",
      "//if this is not an EM_Booking object, just return false",
      "//cache ids to allow quick reference",
      "/**\n\t * Returns true if booking is a multiple booking object, or if the booking object isn't part of a multiple booking object.\n\t * @param EM_Booking|",
      "// we don't need to know the main booking id, just if it has one",
      "/**\n\t * Returns trus if booking has a multiple booking object booking associated with it.\n\t * @param EM_Booking|EM_Multiple_Booking $EM_Booking\n\t * @r",
      "// mb booking can't be a child",
      "// if this booking has a main booking id, then it is a child",
      "/*\n     * ----------------------------------------------------------\n     * Admin Stuff\n     * -------------------------------------------------------",
      "//not global because we'll get repeated printing of errors here, this is just a notice",
      "//is this part of a multiple booking?",
      "/**\n     * Modifies exported multiple booking items\n\t * @param array $export_item\n\t * @param EM_Multiple_Booking $EM_MB_Booking\n\t * @return array\n\t */",
      "//remove some inaccurate data and rebuild those sections",
      "/* @var EM_Booking $EM_Booking */",
      "//handle potentially deleted events in a MB booking",
      "//we have a booking with a master booking, so we remove pricing since it's the overall booking cost that matters:"
    ],
    "length": 41773,
    "preview": "<?php\nclass EM_Multiple_Bookings{\n    \n    /**\n     * Multiple Booking object instance for current user session\n     * @var EM_Multiple_Booking\n     */\n    public static $booking_data;\n    public static $session_started = false;\n    protected static ",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings.php"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 955,
    "preview": "jQuery(document).ready( function($){ \n\t$(document).on('em_booking_success em_cart_widget_refresh em_cart_refresh',function(){\n\t\t$('.em-cart-widget').each( function( i, el ){\n\t\t\tel = $(el);\n\t\t\tvar form = el.find('form');\n\t\t\tvar formData = form.seriali",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/cart-widget.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [
      "//show error or success message",
      "//sends user back to top of form",
      "//show error or success message"
    ],
    "length": 3237,
    "preview": "//checkout cart\njQuery(document).ready(function($){\n\t$(document).on( 'click', '.em-cart-table a.em-cart-table-details-show', function(e){\n\t\te.preventDefault();\n\t\tvar event_id = $(this).addClass('hidden').attr('rel');\n\t\t$('#em-cart-table-details-hide-",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 821,
    "preview": "jQuery(document).ready(function($){$(document).on(\"em_booking_success em_cart_widget_refresh em_cart_refresh\",function(){$(\".em-cart-widget\").each(function(i,el){el=$(el);var form=el.find(\"form\");var formData=form.serialize();var loading_text=el.find",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/cart-widget.min.js"
  },
  {
    "type": "js",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 2691,
    "preview": "jQuery(document).ready(function($){$(document).on(\"click\",\".em-cart-table a.em-cart-table-details-show\",function(e){e.preventDefault();var event_id=$(this).hide().attr(\"rel\");$(\"#em-cart-table-details-hide-\"+event_id).show();$(\".em-cart-table-event-d",
    "file": "src/code/events-manager-pro/add-ons/multiple-bookings/multiple-bookings.min.js"
  }
]