[
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [
      "// autoload_namespaces.php @generated by Composer"
    ],
    "length": 149,
    "preview": "<?php\n\n// autoload_namespaces.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/autoload_namespaces.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "getPrefixes",
      "getPrefixesPsr4",
      "getFallbackDirs",
      "getFallbackDirsPsr4",
      "getClassMap",
      "addClassMap",
      "add",
      "addPsr4",
      "set",
      "setPsr4",
      "setUseIncludePath",
      "getUseIncludePath",
      "setClassMapAuthoritative",
      "isClassMapAuthoritative",
      "setApcuPrefix",
      "getApcuPrefix",
      "register",
      "unregister",
      "loadClass",
      "findFile",
      "getRegisteredLoaders",
      "findFileWithExtension",
      "includeFile"
    ],
    "classes": [
      "loader",
      "in",
      "under",
      "is",
      "ClassLoader",
      "files",
      "map",
      "lookup",
      "map",
      "or",
      "The",
      "is",
      "The",
      "map",
      "does",
      "name",
      "name"
    ],
    "comments": [
      "/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copy",
      "/**\n * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.\n *\n *     $loader = new \\Composer\\Autoload\\ClassLoader();\n *\n *     // registe",
      "/** @var ?string */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, array<string, int>>\n     */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, array<int, string>>\n     */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, string>\n     */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, array<string, string[]>>\n     */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, string>\n     */",
      "/** @var bool */",
      "/**\n     * @var string[]\n     * @psalm-var array<string, string>\n     */",
      "/** @var bool */",
      "/**\n     * @var bool[]\n     * @psalm-var array<string, bool>\n     */",
      "/** @var ?string */",
      "/**\n     * @var self[]\n     */",
      "/**\n     * @param ?string $vendorDir\n     */",
      "/**\n     * @return string[]\n     */",
      "/**\n     * @return array[]\n     * @psalm-return array<string, array<int, string>>\n     */",
      "/**\n     * @return array[]\n     * @psalm-return array<string, string>\n     */",
      "/**\n     * @return array[]\n     * @psalm-return array<string, string>\n     */",
      "/**\n     * @return string[] Array of classname => path\n     * @psalm-return array<string, string>\n     */",
      "/**\n     * @param string[] $classMap Class to filename map\n     * @psalm-param array<string, string> $classMap\n     *\n     * @return void\n     */",
      "/**\n     * Registers a set of PSR-0 directories for a given prefix, either\n     * appending or prepending to the ones previously set for this prefix.\n",
      "/**\n     * Registers a set of PSR-4 directories for a given namespace, either\n     * appending or prepending to the ones previously set for this names",
      "// Register directories for the root namespace.",
      "// Register directories for a new namespace.",
      "// Prepend directories for an already registered namespace.",
      "// Append directories for an already registered namespace.",
      "/**\n     * Registers a set of PSR-0 directories for a given prefix,\n     * replacing any others previously set for this prefix.\n     *\n     * @param s",
      "/**\n     * Registers a set of PSR-4 directories for a given namespace,\n     * replacing any others previously set for this namespace.\n     *\n     * @p",
      "/**\n     * Turns on searching the include path for class files.\n     *\n     * @param bool $useIncludePath\n     *\n     * @return void\n     */",
      "/**\n     * Can be used to check if the autoloader uses the include path to check\n     * for classes.\n     *\n     * @return bool\n     */",
      "/**\n     * Turns off searching the prefix and fallback directories for classes\n     * that have not been registered with the class map.\n     *\n     * ",
      "/**\n     * Should class lookup fail if not found in the current class map?\n     *\n     * @return bool\n     */",
      "/**\n     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.\n     *\n     * @param string|null $apcuPrefix\n     *\n     ",
      "/**\n     * The APCu prefix in use, or null if APCu caching is not enabled.\n     *\n     * @return string|null\n     */",
      "/**\n     * Registers this instance as an autoloader.\n     *\n     * @param bool $prepend Whether to prepend the autoloader or not\n     *\n     * @return",
      "/**\n     * Unregisters this instance as an autoloader.\n     *\n     * @return void\n     */",
      "/**\n     * Loads the given class or interface.\n     *\n     * @param  string    $class The name of the class\n     * @return true|null True if loaded, n",
      "/**\n     * Finds the path to the file where the class is defined.\n     *\n     * @param string $class The name of the class\n     *\n     * @return strin",
      "// Search for Hack files if we are running on HHVM",
      "// Remember that this class does not exist.",
      "/**\n     * Returns the currently registered loaders indexed by their corresponding vendor directories.\n     *\n     * @return self[]\n     */",
      "/**\n     * @param  string       $class\n     * @param  string       $ext\n     * @return string|false\n     */",
      "// PSR-4 fallback dirs",
      "// namespaced class name",
      "// PEAR-like class name",
      "// PSR-0 fallback dirs",
      "// PSR-0 include paths.",
      "/**\n * Scope isolated include.\n *\n * Prevents access to $this/self from included files.\n *\n * @param  string $file\n * @return void\n * @private\n */"
    ],
    "length": 16068,
    "preview": "<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/ClassLoader.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [
      "// autoload_psr4.php @generated by Composer"
    ],
    "length": 492,
    "preview": "<?php\n\n// autoload_psr4.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Svg\\\\' => array($vendorDir . '/phenx/php-svg-lib/src/Svg'),\n    'Sabberworm\\\\CSS\\\\' => array($vendorDir .",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/autoload_psr4.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [
      "// autoload_classmap.php @generated by Composer"
    ],
    "length": 298,
    "preview": "<?php\n\n// autoload_classmap.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n    'Dompdf\\\\Cpdf' =>",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/autoload_classmap.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [
      "// platform_check.php @generated by Composer"
    ],
    "length": 925,
    "preview": "<?php\n\n// platform_check.php @generated by Composer\n\n$issues = array();\n\nif (!(PHP_VERSION_ID >= 70100)) {\n    $issues[] = 'Your Composer dependencies require a PHP version \">= 7.1.0\". You are running ' . PHP_VERSION . '.';\n}\n\nif ($issues) {\n    if (",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/platform_check.php"
  },
  {
    "type": "php",
    "functions": [
      "getInitializer"
    ],
    "classes": [
      "ComposerStaticInitdb05abf9749221124a0f7ecdee4e1f9e"
    ],
    "comments": [
      "// autoload_static.php @generated by Composer"
    ],
    "length": 1869,
    "preview": "<?php\n\n// autoload_static.php @generated by Composer\n\nnamespace Composer\\Autoload;\n\nclass ComposerStaticInitdb05abf9749221124a0f7ecdee4e1f9e\n{\n    public static $prefixLengthsPsr4 = array (\n        'S' => \n        array (\n            'Svg\\\\' => 4,\n  ",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/autoload_static.php"
  },
  {
    "type": "php",
    "functions": [
      "loadClassLoader",
      "getLoader"
    ],
    "classes": [
      "ComposerAutoloaderInitdb05abf9749221124a0f7ecdee4e1f9e"
    ],
    "comments": [
      "// autoload_real.php @generated by Composer",
      "/**\n     * @return \\Composer\\Autoload\\ClassLoader\n     */"
    ],
    "length": 1897,
    "preview": "<?php\n\n// autoload_real.php @generated by Composer\n\nclass ComposerAutoloaderInitdb05abf9749221124a0f7ecdee4e1f9e\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/autoload_real.php"
  },
  {
    "type": "php",
    "functions": [
      "getInstalledPackages",
      "getInstalledPackagesByType",
      "isInstalled",
      "satisfies",
      "getVersionRanges",
      "getVersion",
      "getPrettyVersion",
      "getReference",
      "getInstallPath",
      "getRootPackage",
      "getRawData",
      "getAllRawData",
      "reload",
      "getInstalled"
    ],
    "classes": [
      "is",
      "InstalledVersions",
      "and",
      "but",
      "safely"
    ],
    "comments": [
      "/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copy",
      "/**\n * This class is copied in every Composer installed project and available to all\n *\n * See also https://getcomposer.org/doc/07-runtime.md#installe",
      "/**\n     * @var mixed[]|null\n     * @psalm-var array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: st",
      "/**\n     * @var bool|null\n     */",
      "/**\n     * @var array[]\n     * @psalm-var array<string, array{root: array{name: string, version: string, reference: string, pretty_version: string, al",
      "/**\n     * Returns a list of all package names which are present, either by being installed, replaced or provided\n     *\n     * @return string[]\n     ",
      "/**\n     * Returns a list of all package names with a specific type e.g. 'library'\n     *\n     * @param  string   $type\n     * @return string[]\n     *",
      "/**\n     * Checks whether the given package is installed\n     *\n     * This also returns true if the package name is provided or replaced by another p",
      "/**\n     * Checks whether the given package satisfies a version constraint\n     *\n     * e.g. If you want to know whether version 2.3+ of package foo/",
      "/**\n     * Returns a version constraint representing all the range(s) which are installed for a given package\n     *\n     * It is easier to use this v",
      "/**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null ",
      "/**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null ",
      "/**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null ",
      "/**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null ",
      "/**\n     * @return array\n     * @psalm-return array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: ",
      "/**\n     * Returns the raw installed.php data for custom implementations\n     *\n     * @deprecated Use getAllRawData() instead which returns all datas",
      "// only require the installed.php file if this file is loaded from its dumped location,",
      "// and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937",
      "/**\n     * Returns the raw data of all installed.php which are currently loaded for custom implementations\n     *\n     * @return array[]\n     * @psalm",
      "/**\n     * Lets you reload the static array from another file\n     *\n     * This is only useful for complex integrations in which a project needs to u",
      "/**\n     * @return array[]\n     * @psalm-return list<array{root: array{name: string, version: string, reference: string, pretty_version: string, alias",
      "// only require the installed.php file if this file is loaded from its dumped location,",
      "// and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937"
    ],
    "length": 14991,
    "preview": "<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/InstalledVersions.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 2534,
    "preview": "<?php return array(\n    'root' => array(\n        'pretty_version' => '1.0.0+no-version-set',\n        'version' => '1.0.0.0',\n        'type' => 'project',\n        'install_path' => __DIR__ . '/../../',\n        'aliases' => array(),\n        'reference'",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/installed.php"
  },
  {
    "type": "json",
    "length": 11066,
    "preview": "{\n    \"packages\": [\n        {\n            \"name\": \"dompdf/dompdf\",\n            \"version\": \"v2.0.0\",\n",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/composer/installed.json"
  }
]