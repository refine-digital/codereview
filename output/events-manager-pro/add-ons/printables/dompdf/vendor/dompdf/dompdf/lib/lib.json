[
  {
    "type": "php",
    "functions": [
      "__construct",
      "__destruct",
      "o_destination",
      "o_viewerPreferences",
      "o_catalog",
      "o_pages",
      "o_outlines",
      "o_font",
      "getFontSubsettingTag",
      "processFont",
      "o_toUnicode",
      "o_fontDescriptor",
      "o_fontEncoding",
      "o_fontDescendentCID",
      "o_cidSystemInfo",
      "o_fontGIDtoCIDMap",
      "o_procset",
      "o_info",
      "o_action",
      "o_annotation",
      "o_page",
      "o_contents",
      "o_embedjs",
      "o_javascript",
      "o_image",
      "o_extGState",
      "o_xobject",
      "o_acroform",
      "o_field",
      "o_sig",
      "o_encryption",
      "o_indirect_references",
      "o_names",
      "o_embedded_file_dictionary",
      "o_embedded_file",
      "md5_16",
      "encryptInit",
      "ARC4_init",
      "ARC4",
      "addLink",
      "addInternalLink",
      "setEncryption",
      "checkAllHere",
      "output",
      "newDocument",
      "openFont",
      "selectFont",
      "setCurrentFont",
      "getFirstPageId",
      "addContent",
      "setColor",
      "setFillRule",
      "setStrokeColor",
      "setGraphicsState",
      "setLineTransparency",
      "setFillTransparency",
      "line",
      "curve",
      "partEllipse",
      "filledEllipse",
      "lineTo",
      "moveTo",
      "curveTo",
      "quadTo",
      "closePath",
      "endPath",
      "ellipse",
      "setLineStyle",
      "polygon",
      "filledRectangle",
      "rectangle",
      "rect",
      "stroke",
      "fill",
      "fillStroke",
      "addXObject",
      "setXObjectResource",
      "addSignature",
      "addFormField",
      "setFormFieldValue",
      "setFormFieldRefValue",
      "setFormFieldAppearance",
      "setFormFieldOpt",
      "addForm",
      "save",
      "restore",
      "clippingRectangle",
      "clippingRectangleRounded",
      "clippingPolygon",
      "clippingEnd",
      "scale",
      "translate",
      "rotate",
      "skew",
      "transform",
      "newPage",
      "stream",
      "getFontHeight",
      "getFontXHeight",
      "getFontDescender",
      "filterText",
      "utf8toCodePointsArray",
      "utf8toUtf16BE",
      "getTextPosition",
      "toUpper",
      "concatMatches",
      "registerText",
      "addText",
      "getTextWidth",
      "saveState",
      "restoreState",
      "openObject",
      "reopenObject",
      "closeObject",
      "stopObject",
      "addObject",
      "serializeObject",
      "restoreSerializedObject",
      "addEmbeddedFile",
      "addInfo",
      "setPreferences",
      "getBytes",
      "image_iscached",
      "addImagePng",
      "addImagePngAlpha",
      "addPngFromFile",
      "addSvgFromFile",
      "addPngFromBuf",
      "addJpegFromFile",
      "addJpegImage_common",
      "openHere",
      "addJavascript",
      "addDestination",
      "setFontFamily",
      "addMessage",
      "transaction"
    ],
    "classes": [
      "to",
      "Cpdf",
      "creator",
      "creator",
      "is",
      "functions"
    ],
    "comments": [
      "/**\n * A PHP class to provide the basic functionality to create a pdf document without\n * any requirement for additional modules.\n *\n * Extended by Or",
      "/**\n     * @var integer The current number of pdf objects in the document\n     */",
      "/**\n     * @var array This array contains all of the pdf objects, ready for final assembly\n     */",
      "/**\n     * @var integer The objectId (number within the objects array) of the document catalog\n     */",
      "/**\n     * @var integer The objectId (number within the objects array) of indirect references (Javascript EmbeddedFiles)\n     */",
      "/**\n     * @var integer The objectId (number within the objects array)\n     */",
      "/**\n     * AcroForm objectId\n     *\n     * @var integer\n     */",
      "/**\n     * @var int\n     */",
      "/**\n     * @var array Array carrying information about the fonts that the system currently knows about\n     * Used to ensure that a font is not loaded",
      "/**\n     * @var string The default font metrics file to use if no other font has been loaded.\n     * The path to the directory containing the font met",
      "/**\n     * @string A record of the current font\n     */",
      "/**\n     * @var string The current base font\n     */",
      "/**\n     * @var integer The number of the current font within the font array\n     */",
      "/**\n     * @var integer\n     */",
      "/**\n     * @var integer Object number of the current page\n     */",
      "/**\n     * @var integer Object number of the currently active contents block\n     */",
      "/**\n     * @var integer Number of fonts within the system\n     */",
      "/**\n     * @var integer Number of graphic state resources used\n     */",
      "/**\n     * @var array Number of graphic state resources used\n     */",
      "/**\n     * @var array Current color for fill operations, defaults to inactive value,\n     * all three components should be between 0 and 1 inclusive w",
      "/**\n     * @var array Current color for stroke operations (lines etc.)\n     */",
      "/**\n     * @var string Fill rule (nonzero or evenodd)\n     */",
      "/**\n     * @var string Current style that lines are drawn in\n     */",
      "/**\n     * @var array Current line transparency (partial graphics state)\n     */",
      "/**\n     * array Current fill transparency (partial graphics state)\n     */",
      "/**\n     * @var array An array which is used to save the state of the document, mainly the colors and styles\n     * it is used to temporarily change t",
      "/**\n     * @var integer Number of elements within the state stack\n     */",
      "/**\n     * @var integer Number of page objects within the document\n     */",
      "/**\n     * @var array Object Id storage stack\n     */",
      "/**\n     * @var integer Number of elements within the object Id storage stack\n     */",
      "/**\n     * an array which contains information about the objects which are not firmly attached to pages\n     * these have been added with the addObjec",
      "/**\n     * array contains information about how the loose objects are to be added to the document\n     */",
      "/**\n     * @var integer The objectId of the information object for the document\n     * this contains authorship, title etc.\n     */",
      "/**\n     * @var integer Number of images being tracked within the document\n     */",
      "/**\n     * @var array An array containing options about the document\n     * it defaults to turning on the compression of the objects\n     */",
      "/**\n     * @var integer The objectId of the first page of the document\n     */",
      "/**\n     * @var integer The object Id of the procset object\n     */",
      "/**\n     * @var array Store the information about the relationship between font families\n     * this used so that the code knows which font is the bol",
      "/**\n     * @var string Folder for php serialized formats of font metrics files.\n     * If empty string, use same folder as original metrics files.\n   ",
      "/**\n     * @var integer The version of the font metrics cache file.\n     * This value must be manually incremented whenever the internal font data str",
      "/**\n     * @var string Temporary folder.\n     * If empty string, will attempt system tmp folder.\n     * This can be passed in from class creator.\n    ",
      "/**\n     * @var string Track if the current font is bolded or italicised\n     */",
      "/**\n     * @var string Messages are stored here during processing, these can be selected afterwards to give some useful debug information\n     */",
      "/**\n     * @var string The encryption array for the document encryption is stored here\n     */",
      "/**\n     * @var integer The object Id of the encryption information\n     */",
      "/**\n     * @var string The file identifier, used to uniquely identify a pdf document\n     */",
      "/**\n     * @var boolean A flag to say if a document is to be encrypted or not\n     */",
      "/**\n     * @var string The encryption key for the encryption of all the document content (structure is not encrypted)\n     */",
      "/**\n     * @var array Array which forms a stack to keep track of nested callback functions\n     */",
      "/**\n     * @var integer The number of callback functions in the callback array\n     */",
      "/**\n     * @var array Store label->id pairs for named destinations, these will be used to replace internal links\n     * done this way so that destinat",
      "/**\n     * @var array Store the stack for the transaction commands, each item in here is a record of the values of all the\n     * publiciables within ",
      "/**\n     * @var array Table of Image origin filenames and image labels which were already added with o_image().\n     * Allows to merge identical image",
      "/**\n     * @var array Table of already added alpha and plain image files for transparent PNG images.\n     */",
      "/**\n     * @var array List of temporary image files to be deleted after processing.\n     */",
      "/**\n     * @var boolean Whether the text passed in should be treated as Unicode or just local character set.\n     */",
      "/**\n     * @var string the JavaScript code of the document\n     */",
      "/**\n     * @var boolean whether the compression is possible\n     */",
      "/**\n     * @var array Current page size\n     */",
      "/**\n     * @var array All the chars that will be required in the font subsets\n     */",
      "/**\n     * @var string The target internal encoding\n     */",
      "/**\n     * @var array\n     */",
      "/**\n     * @var array The list of the core fonts\n     */",
      "/**\n     * Class constructor\n     * This will start a new document\n     *\n     * @param array   $pageSize  Array of 4 numbers, defining the bottom lef",
      "// also initialize the font families that are known about already",
      "/**\n     * Document object methods (internal use only)\n     *\n     * There is about one object method for each type of object in the pdf document\n    ",
      "/**\n     * Destination object, used to specify the location for the user to jump to, presently on opening\n     *\n     * @param $id\n     * @param $acti",
      "/** @noinspection PhpMissingBreakStatementInspection */",
      "/** @noinspection PhpMissingBreakStatementInspection */",
      "/**\n     * set the viewer preferences\n     *\n     * @param $id\n     * @param $action\n     * @param string|array $options\n     * @return string|null\n  ",
      "// Named with limited valid values",
      "// Cast to integer array",
      "/**\n     * define the document catalog, the overall controller for the document\n     *\n     * @param $id\n     * @param $action\n     * @param string|ar",
      "/**\n     * object which is a parent to the pages in the document\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @",
      "// then it will just be the id of the new page",
      "// then it should be an array having 'id','rid','pos', where rid=the page to which this one will be placed relative",
      "// and pos is either 'before' or 'after', saying where this page will fit.",
      "// then there is a match",
      "// which should be an array of 4 numbers",
      "/**\n     * define the outlines in the doc, empty for now\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return s",
      "/**\n     * an object to hold the font description\n     *\n     * @param $id\n     * @param $action\n     * @param string|array $options\n     * @return st",
      "// deal with the encoding and the differences",
      "// then we'll need an encoding dictionary",
      "// we can specify encoding here",
      "// For Unicode fonts, we need to incorporate font data into",
      "// sub-sections that are linked from the primary font section.",
      "// Look at o_fontGIDtoCID and o_fontDescendentCID functions",
      "// for more information.",
      "// All of this code is adapted from the excellent changes made to",
      "// transform FPDF to TCPDF (http://tcpdf.sourceforge.net/)",
      "// also tell the pages node about the new font",
      "// pass values down to descendent font",
      "// For Unicode fonts, we need to incorporate font data into",
      "// sub-sections that are linked from the primary font section.",
      "// Look at o_fontGIDtoCID and o_fontDescendentCID functions",
      "// for more information.",
      "// All of this code is adapted from the excellent changes made to",
      "// transform FPDF to TCPDF (http://tcpdf.sourceforge.net/)",
      "// The horizontal identity mapping for 2-byte CIDs; may be used",
      "// with CIDFonts using any Registry, Ordering, and Supplement values.",
      "// then place a reference to the dictionary",
      "// use the specified encoding",
      "// convert font num to hexavigesimal numeral system letters A - Z only",
      "/**\n     * @param int $fontObjId\n     * @param array $object_info\n     * @return array|false\n     * @throws FontNotFoundException\n     */",
      "//        $fontObj = $this->numObj;",
      "// find the array of font widths, and put that into an object.",
      "// With Unicode, widths array isn't used",
      "// also need to adjust the widths for the differences array",
      "// With Unicode, widths array isn't used",
      "// With Unicode, widths array isn't used",
      "// load the pfb file, and put that into an object too.",
      "// note that pdf supports only binary format type 1 font files, though there is a",
      "// simple utility to convert them from pfa to pfb.",
      "// Force space if not in yet",
      "// Parse the new font to get cid2gid and widths",
      "// Find Unicode char map table",
      "// create the font descriptor",
      "// determine flags (more than a little flakey, hopefully will not matter much)",
      "// assume non-sybolic",
      "//FIXME: php-font-lib is not grabbing this value, so we'll fake it and use the Ascender value // 'CapHeight'",
      "// embed the font program",
      "// determine the cruicial lengths within this file",
      "// tell the font object about all this new stuff",
      "/**\n     * A toUnicode section, needed for unicode fonts\n     *\n     * @param $id\n     * @param $action\n     * @return null|string\n     */",
      "/**\n     * a font descriptor, needed for including additional fonts\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     ",
      "/**\n     * the font encoding\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return null|string\n     */",
      "// the options array should contain 'differences' and maybe 'encoding'",
      "// we cannot make use of consecutive numbering",
      "/**\n     * a descendent cid font, needed for unicode fonts\n     *\n     * @param $id\n     * @param $action\n     * @param string|array $options\n     * @",
      "// we need a CID system info section",
      "// and a CID to GID map",
      "// pass values down to cid to gid map",
      "//      if (isset($o['info']['FirstChar'])) {",
      "//        $res.= \"/FirstChar \".$o['info']['FirstChar'].\"\\n\";",
      "//      if (isset($o['info']['LastChar'])) {",
      "//        $res.= \"/LastChar \".$o['info']['LastChar'].\"\\n\";",
      "/**\n     * CID system info section, needed for unicode fonts\n     *\n     * @param $id\n     * @param $action\n     * @return null|string\n     */",
      "// A string identifying an issuer of character collections",
      "// A string that uniquely names a character collection issued by a specific registry",
      "// The supplement number of the character collection.",
      "/**\n     * a font glyph to character map, needed for unicode fonts\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     *",
      "// then implement ZLIB based compression on this content stream",
      "/**\n     * the document procset, solves some problems with printing to old PS printers\n     *\n     * @param $id\n     * @param $action\n     * @param st",
      "// this is to add new items to the procset list, despite the fact that this is considered",
      "// obsolete, the items are required for printing to some postscript printers",
      "/**\n     * define the document information\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return null|string\n   ",
      "// dates must be outputted as-is, without Unicode transformations",
      "/**\n     * an action object, used to link to URLS initially\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @retur",
      "// then assume a URI action",
      "// there will be an 'label' setting, this is the name of the destination",
      "/**\n     * an annotation object, this will add an annotation to the current page.\n     * initially will support just link annotations\n     *\n     * @p",
      "// add the annotation to the current page",
      "// and add the action object which is going to be required",
      "// this is to a named internal link",
      "/**\n     * a page object, it also creates a contents object to hold its contents\n     *\n     * @param $id\n     * @param $action\n     * @param string $",
      "// then this must be a page insertion, array should contain 'rid','pos'=[before|after]",
      "//make a contents object to go with this page",
      "// add an annotation to this page",
      "// $options should contain the id of the annotation dictionary",
      "// reverse the page contents so added objects are below normal content",
      "//foreach (array_reverse($o['info']['contents']) as $cId) {",
      "// Back to normal now that I've got transparency working --Benj",
      "/**\n     * the contents objects hold all of the content which appears on pages\n     *\n     * @param $id\n     * @param $action\n     * @param string|arr",
      "// then this contents is the primary for a page",
      "// then this page contains some other type of system object",
      "// add more options to the declaration",
      "// then implement ZLIB based compression on this content stream",
      "/**\n     * @param $id\n     * @param $action\n     * @return string|null\n     */",
      "/**\n     * @param $id\n     * @param $action\n     * @param string $code\n     * @return null|string\n     */",
      "/**\n     * an image object, will be an XObject in the document, includes description and data\n     *\n     * @param $id\n     * @param $action\n     * @p",
      "// make the new object",
      "// assign it a place in the named resource dictionary as an external object, according to",
      "// the label passed in with it.",
      "// also make sure that we have the right procset object for it.",
      "/**\n     * graphics state object\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return null|string\n     */",
      "// Tell the pages about the new resource",
      "/**\n     * @param integer $id\n     * @param string $action\n     * @param mixed $options\n     * @return string\n     */",
      "// then implement ZLIB based compression on this content stream",
      "/**\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return null|string\n     */",
      "/**\n     * @param $id\n     * @param $action\n     * @param mixed $options\n     * @return null|string\n     */",
      "/**\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return null|string\n     */",
      "/**\n     * encryption object.\n     *\n     * @param $id\n     * @param $action\n     * @param string $options\n     * @return string|null\n     */",
      "// make the new object",
      "// figure out the additional parameters required",
      "// now make the u value, phew.",
      "// initialize the arc4 array",
      "// and the p-value needs to be converted to account for the twos-complement approach",
      "/**\n     * ARC4 functions\n     * A series of function to implement ARC4 encoding in PHP\n     */",
      "/**\n     * calculate the 16 byte version of the 128 bit md5 digest of the string\n     *\n     * @param $string\n     * @return string\n     */",
      "/**\n     * initialize the encryption for processing a particular object\n     *\n     * @param $id\n     */",
      "/**\n     * initialize the ARC4 encryption\n     *\n     * @param string $key\n     */",
      "// setup the control array",
      "/**\n     * ARC4 encrypt a text string\n     *\n     * @param $text\n     * @return string\n     */",
      "/**\n     * functions which can be called to adjust or add to the document\n     */",
      "/**\n     * add a link in the document to an external URL\n     *\n     * @param $url\n     * @param $x0\n     * @param $y0\n     * @param $x1\n     * @param",
      "/**\n     * add a link in the document to an internal destination (ie. within the document)\n     *\n     * @param $label\n     * @param $x0\n     * @param",
      "/**\n     * set the encryption of the document\n     * can be used to turn it on and/or set the passwords which it will have.\n     * also the functions ",
      "// implement encryption on the document",
      "// then the block does not exist already, add it.",
      "/**\n     * should be used for internal checks, not implemented as yet\n     */",
      "/**\n     * return the pdf stream as a string returned from the function\n     *\n     * @param bool $debug\n     * @return string\n     */",
      "// turn compression off",
      "// pre-process o_font objects before output of all objects",
      "//+1 to account for \\n at the start of each object",
      "// if encryption has been applied to this document then add the marker for this dictionary",
      "// account for \\n added at start of xref table",
      "/**\n     * initialize a new document\n     * if this is called on an existing document results may be unpredictable, but the existing document would be",
      "// need to store the first page id as there is no way to get it to the user during",
      "/**\n     * open the font file and return a php structure containing it.\n     * first check if this one has been done before and saved in a form more s",
      "// assume that $font contains the path and file but not the extension",
      "//$name       filename without folder and extension of font metrics",
      "//$dir        folder of font metrics",
      "//$fontcache  folder of runtime created php serialized version of font metrics.",
      "//            If this is not given, the same folder as the font metrics will be used.",
      "//            Storing and reusing serialized versions improves speed much",
      "// then rebuild the php_<font>.afm file from the <font>.afm file",
      "// Since we're not going to enable Unicode for the core fonts we need to use a font-based",
      "// setting for Unicode support rather than a global setting.",
      "// then there must be some keyword",
      "// OAR - Added so we can offset the height calculation of a Windows font.  Otherwise it's too big.",
      "//C 39 ; WX 222 ; N quoteright ; B 53 463 157 718 ;",
      "// Found in AFM files",
      "// U 827 ; WX 0 ; N squaresubnosp ; G 675 ;",
      "// Found in UFM files",
      "// Set values in CID to GID map",
      "// don't include them as they are not used yet",
      "//KPX Adieresis yacute -40",
      "/*$bits = explode(' ', trim($row));\n                            $data['KPX'][$bits[1]][$bits[2]] = $bits[3];\n                            break;*/",
      "// then implement ZLIB based compression on CIDtoGID string",
      "//Because of potential trouble with php safe mode, expect that the folder already exists.",
      "//If not existing, this will hit performance because of missing cached results.",
      "/**\n     * if the font is not loaded then load it and make the required object\n     * else just make it the current font\n     * the encoding array can",
      "// then encoding and differences might be set",
      "// then perhaps only the encoding has been set",
      "// also set the differences here, note that this means that these will take effect only the",
      "//first time that a font is selected, else they are ignored",
      "// so if for some reason the font was not set in the last one then it will not be selected",
      "// the next lines mean that if a new font is selected, then the current text state will be",
      "// applied to it as well.",
      "/**\n     * sets up the current font, based on the font families, and the current text state\n     * note that this system is quite flexible, a bold-ita",
      "//   if (strlen($this->currentBaseFont) == 0){",
      "//     // then assume an initial font",
      "//     $this->selectFont($this->defaultFont);",
      "//   $cf = substr($this->currentBaseFont,strrpos($this->currentBaseFont,'/')+1);",
      "//   if (strlen($this->currentTextState)",
      "//     && isset($this->fontFamilies[$cf])",
      "//       && isset($this->fontFamilies[$cf][$this->currentTextState])){",
      "//     // then we are in some state or another",
      "//     // and this font has a family, and the current setting exists within it",
      "//     // select the font, then return it",
      "//     $nf = substr($this->currentBaseFont,0,strrpos($this->currentBaseFont,'/')+1).$this->fontFamilies[$cf][$this->currentTextState];",
      "//     $this->selectFont($nf,'',0);",
      "//     $this->currentFont = $nf;",
      "//     $this->currentFontNum = $this->fonts[$nf]['fontNum'];",
      "//     // the this font must not have the right family member for the current state",
      "//     // simply assume the base font",
      "/**\n     * function for the user to find out what the ID is of the first page that was created during\n     * startup - useful if they wish to add some",
      "/**\n     * add content to the currently active object\n     *\n     * @param $content\n     */",
      "/**\n     * sets the color for fill operations\n     *\n     * @param array $color\n     * @param bool  $force\n     */",
      "/**\n     * @param string $fillRule\n     */",
      "/**\n     * sets the color for stroke operations\n     *\n     * @param array $color\n     * @param bool  $force\n     */",
      "/**\n     * Set the graphics state for compositions\n     *\n     * @param $parameters\n     */",
      "// Create a new graphics state object if necessary",
      "/**\n     * Set current blend mode & opacity for lines.\n     *\n     * Valid blend modes are:\n     *\n     * Normal, Multiply, Screen, Overlay, Darken, L",
      "/**\n     * Set current blend mode & opacity for filled objects.\n     *\n     * Valid blend modes are:\n     *\n     * Normal, Multiply, Screen, Overlay, ",
      "/**\n     * draw a line from one set of coordinates to another\n     *\n     * @param float $x1\n     * @param float $y1\n     * @param float $x2\n     * @p",
      "/**\n     * draw a bezier curve based on 4 control points\n     *\n     * @param float $x0\n     * @param float $y0\n     * @param float $x1\n     * @param ",
      "// in the current line style, draw a bezier curve from (x0,y0) to (x3,y3) using the other two points",
      "// as the control points for the curve.",
      "/**\n     * draw a part of an ellipse\n     *\n     * @param float $x0\n     * @param float $y0\n     * @param float $astart\n     * @param float $afinish\n ",
      "/**\n     * draw a filled ellipse\n     *\n     * @param float $x0\n     * @param float $y0\n     * @param float $r1\n     * @param float $r2\n     * @param ",
      "/**\n     * @param float $x\n     * @param float $y\n     */",
      "/**\n     * @param float $x\n     * @param float $y\n     */",
      "/**\n     * draw a bezier curve based on 4 control points\n     *\n     * @param float $x1\n     * @param float $y1\n     * @param float $x2\n     * @param ",
      "/**\n     * draw a bezier curve based on 4 control points\n     *\n     * @param float $cpx\n     * @param float $cpy\n     * @param float $x\n     * @param",
      "/**\n     * draw an ellipse\n     * note that the part and filled ellipse are just special cases of this function\n     *\n     * draws an ellipse in the ",
      "// draw this bit of the total curve",
      "// small 's' signifies closing the path as well",
      "/**\n     * this sets the line drawing style.\n     * width, is the thickness of the line in user units\n     * cap is the type of cap to put on the line",
      "// this is quite inefficient in that it sets all the parameters whenever 1 is changed, but will fix another day",
      "/**\n     * draw a polygon, the syntax for this is similar to the GD polygon command\n     *\n     * @param float[] $p\n     * @param bool    $fill\n     *",
      "/**\n     * a filled rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not\n     * the coordinates of",
      "/**\n     * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not\n     * the coordinates of t",
      "/**\n     * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not\n     * the coordinates of t",
      "/**\n     * @param string $subtype\n     * @param integer $x\n     * @param integer $y\n     * @param integer $w\n     * @param integer $h\n     * @return i",
      "/**\n     * @param integer $numXObject\n     * @param string $type\n     * @param array $options\n     */",
      "/**\n     * add signature\n     *\n     * $fieldSigId = $cpdf->addFormField(Cpdf::ACROFORM_FIELD_SIG, 'Signature1', 0, 0, 0, 0, 0);\n     *\n     * $signat",
      "/**\n     * add field to form\n     *\n     * @param string $type ACROFORM_FIELD_*\n     * @param string $name\n     * @param $x0\n     * @param $y0\n     * ",
      "/**\n     * set Field value\n     *\n     * @param integer $numFieldObj\n     * @param string $value\n     */",
      "/**\n     * set Field value (reference)\n     *\n     * @param integer $numFieldObj\n     * @param integer $numObj Object number\n     */",
      "/**\n     * set Field Appearanc (reference)\n     *\n     * @param integer $numFieldObj\n     * @param integer $normalNumObj\n     * @param integer|null $r",
      "/**\n     * set Choice Field option values\n     *\n     * @param integer $numFieldObj\n     * @param array $value\n     */",
      "/**\n     * add form to document\n     *\n     * @param integer $sigFlags\n     * @param boolean $needAppearances\n     */",
      "/**\n     * save the current graphic state\n     */",
      "// we must reset the color cache or it will keep bad colors after clipping",
      "/**\n     * restore the last graphic state\n     */",
      "// we must reset the color cache or it will keep bad colors after clipping",
      "/**\n     * draw a clipping rectangle, all the elements added after this will be clipped\n     *\n     * @param float $x1\n     * @param float $y1\n     * ",
      "/**\n     * draw a clipping rounded rectangle, all the elements added after this will be clipped\n     *\n     * @param float $x1\n     * @param float $y1",
      "// start: top edge, left end",
      "// line: bottom edge, left end",
      "// curve: bottom-left corner",
      "// line: right edge, bottom end",
      "// curve: bottom-right corner",
      "// line: right edge, top end",
      "// curve: bottom-right corner",
      "// line: bottom edge, right end",
      "// curve: top-right corner",
      "// line: top edge, left end",
      "/**\n     * draw a clipping polygon, the syntax for this is similar to the GD polygon command\n     *\n     * @param float[] $p\n     */",
      "/**\n     * ends the last clipping shape\n     */",
      "/**\n     * scale\n     *\n     * @param float $s_x scaling factor for width as percent\n     * @param float $s_y scaling factor for height as percent\n   ",
      "/**\n     * translate\n     *\n     * @param float $t_x movement to the right\n     * @param float $t_y movement to the bottom\n     */",
      "/**\n     * rotate\n     *\n     * @param float $angle angle in degrees for counter-clockwise rotation\n     * @param float $x     Origin abscissa\n     * ",
      "/**\n     * skew\n     *\n     * @param float $angle_x\n     * @param float $angle_y\n     * @param float $x Origin abscissa\n     * @param float $y Origin ",
      "/**\n     * apply graphic transformations\n     *\n     * @param array $tm transformation matrix\n     */",
      "/**\n     * add a new page to the document\n     * this also makes the new page the current active object\n     *\n     * @param int $insert\n     * @param",
      "// if there is a state saved, then go up the stack closing them",
      "// then on the new page, re-open them with the right setings",
      "// the id from the ezPdf class is the id of the contents of the page, not the page object itself",
      "// query that object to find the parent",
      "// if there is a stack saved, then put that onto the page",
      "// and if there has been a stroke or fill color set, then transfer them",
      "// if there is a line style set, then put this in too",
      "// the call to the o_page object set currentContents to the present page, so this can be returned as the page id",
      "/**\n     * Streams the PDF to the client.\n     *\n     * @param string $filename The filename to present to the client.\n     * @param array $options As",
      "/**\n     * return the height in units of the current font in the given size\n     *\n     * @param float $size\n     *\n     * @return float\n     */",
      "// for the current font, and the given size, what is the height of the font in user units",
      "// have to adjust by a font offset for Windows fonts.  unfortunately it looks like",
      "// the bounding box calculations are wrong and I don't know why.",
      "// For CourierNew from Windows this needs to be -646 to match the",
      "// Adobe native Courier font.",
      "// For FreeMono from GNU this needs to be -337 to match the",
      "// Both have been added manually to the .afm and .ufm files.",
      "/**\n     * @param float $size\n     *\n     * @return float\n     */",
      "// for the current font, and the given size, what is the height of the font in user units",
      "/**\n     * return the font descender, this will normally return a negative number\n     * if you add this number to the baseline, you get the level of ",
      "// note that this will most likely return a negative value",
      "//$h = $this->fonts[$this->currentFont]['FontBBox'][1];",
      "/**\n     * filter the text, this is applied to all text just before being inserted into the pdf document\n     * it escapes the various things that nee",
      "//$text = html_entity_decode($text, ENT_QUOTES);",
      "// the chr(13) substitution fixes a bug seen in TCPDF (bug #1421290)",
      "/**\n     * return array containing codepoints (UTF-8 character values) for the\n     * string passed in.\n     *\n     * based on the excellent TCPDF cod",
      "// http://www.php.net/manual/en/function.mb-strlen.php#77040",
      "// array containing unicode values",
      "// array containing single character byte sequences",
      "// number of octets needed to represent the UTF-8 character",
      "// get one string character at time",
      "// get starting octect",
      "// use the character \"as is\" because is ASCII",
      "// 2 bytes character (0x06 = 110 BIN)",
      "// 3 bytes character (0x0E = 1110 BIN)",
      "// 4 bytes character (0x1E = 11110 BIN)",
      "// use replacement character for other invalid sequences",
      "// bytes 2, 3 and 4 must start with 0x02 = 10 BIN",
      "// compose UTF-8 bytes to a single unicode value",
      "// The definition of UTF-8 prohibits encoding character numbers between",
      "// U+D800 and U+DFFF, which are reserved for use with the UTF-16",
      "// encoding form (as surrogate pairs) and do not directly represent",
      "// use replacement character",
      "// add char to array",
      "// reset data for next char",
      "// use replacement character for other invalid sequences",
      "/**\n     * convert UTF-8 to UTF-16 with an additional byte order marker\n     * at the front if required.\n     *\n     * based on the excellent TCPDF co",
      "// replacement character",
      "/**\n     * given a start position and information about how text is to be laid out, calculate where\n     * on the page the text will end\n     *\n     *",
      "// given this information return an array containing x and y for the end position as elements 0 and 1",
      "// need to adjust for the number of spaces in this text",
      "/**\n     * Callback method used by smallCaps\n     *\n     * @param array $matches\n     *\n     * @return string\n     */",
      "/**\n     * register text for font subsetting\n     *\n     * @param string $font\n     * @param string $text\n     */",
      "/**\n     * add text to the document, at a specified location, size and angle on the page\n     *\n     * @param float  $x\n     * @param float  $y\n     *",
      "// if ($smallCaps) {",
      "//     preg_match_all(\"/(\\P{Ll}+)/u\", $text, $matches, PREG_SET_ORDER);",
      "//     $lower = $this->concatMatches($matches);",
      "//     preg_match_all(\"/(\\p{Ll}+)/u\", $text, $matches, PREG_SET_ORDER);",
      "//     $other = $this->concatMatches($matches);",
      "//     $text = preg_replace_callback(\"/\\p{Ll}/u\", array($this, \"toUpper\"), $text);",
      "// if there are any open callbacks, then they should be called, to show the start of the line",
      "// call each function",
      "// OAR - Don't need this anymore, given that $start always equals zero.  substr($text, $start);",
      "// modify unicode text so that extra word spacing is manually implemented (bug #)",
      "// if there are any open callbacks, then they should be called, to show the end of the line",
      "// call each function",
      "/**\n     * calculate how wide a given text string will be on a page, at a given size.\n     * this can be called externally, but is also used by the ot",
      "// this function should not change any of the settings, though it will need to",
      "// track any directives which change during calculation, so copy them at the start",
      "// and put them back at the end.",
      "// hmm, this is where it all starts to get tricky - use the font information to",
      "// calculate the width of each character, add them up and convert to user units",
      "// for Unicode, use the code points array to calculate width rather",
      "// than just the string itself",
      "// check if we have to replace character",
      "// add the character width",
      "// add additional padding for space",
      "// add additional char spacing",
      "// If CPDF is in Unicode mode but the current font does not support Unicode we need to convert the character set to Windows-1252",
      "// check if we have to replace character",
      "// add the character width",
      "// add additional padding for space",
      "// add additional char spacing",
      "/**\n     * this will be called at a new page to return the state to what it was on the\n     * end of the previous page, before the stack was closed do",
      "// this will be called at a new page to return the state to what it was on the",
      "// end of the previous page, before the stack was closed down",
      "// This is to get around not being able to have open 'q' across pages",
      "// ok to use this as stack starts numbering at 1",
      "//    $this->currentLineStyle = $opt['lin'];",
      "/**\n     * restore a previously saved state\n     *\n     * @param int $pageEnd\n     */",
      "/**\n     * make a loose object, the output will go into this object, until it is closed, then will revert to\n     * the current one.\n     * this objec",
      "// add a new object of the content type, to hold the data flow",
      "/**\n     * open an existing object for editing\n     *\n     * @param $id\n     */",
      "// also if this object is the primary contents for a page, then set the current page to its parent",
      "/**\n     * close an object\n     */",
      "// close the object, as long as there was one open in the first place, which will be indicated by",
      "// an objectId on the stack.",
      "// easier to probably not worry about removing the old entries, they will be overwritten",
      "// if there are new ones.",
      "/**\n     * stop an object from appearing on pages from this point on\n     *\n     * @param $id\n     */",
      "// if an object has been appearing on pages up to now, then stop it, this page will",
      "// be the last one that could contain it.",
      "/**\n     * after an object has been created, it wil only show if it has been added, using this function.\n     *\n     * @param $id\n     * @param string",
      "// add the specified object to the page",
      "// then it is a valid object, and it is not being added to itself",
      "// then this object is to be added to this page (done in the next block) and",
      "// all future new pages.",
      "// then the destination contents is the primary for the page",
      "// (though this object is actually added to that page)",
      "/**\n     * return a storable representation of a specific object\n     *\n     * @param $id\n     * @return string|null\n     */",
      "/**\n     * restore an object from its stored representation. Returns its new object id.\n     *\n     * @param $obj\n     * @return int\n     */",
      "/**\n     * Embeds a file inside the PDF\n     *\n     * @param string $filepath path to the file to store inside the PDF\n     * @param string $embeddedF",
      "/**\n     * Add content to the documents info object\n     *\n     * @param string|array $label\n     * @param string       $value\n     */",
      "// this will only work if the label is one of the valid ones.",
      "// modify this so that arrays can be passed as well.",
      "// if $label is an array then assume that it is key => value pairs",
      "// else assume that they are both scalar, anything else will probably error",
      "/**\n     * set the viewer preferences of the document, it is up to the browser to obey these.\n     *\n     * @param $label\n     * @param int $value\n   ",
      "// this will only work if the label is one of the valid ones.",
      "/**\n     * extract an integer from a position in a byte stream\n     *\n     * @param $data\n     * @param $pos\n     * @param $num\n     * @return int\n   ",
      "// return the integer represented by $num bytes from $pos within $data",
      "/**\n     * Check if image already added to pdf image directory.\n     * If yes, need not to create again (pass empty data)\n     *\n     * @param string ",
      "/**\n     * add a PNG image into the document, from a GD object\n     * this should work with remote files\n     *\n     * @param \\GdImage|resource $img A",
      "//if already cached, need not to read again",
      "// Example for transparency handling on new image. Retain for current image",
      "// $tIndex = imagecolortransparent($img);",
      "// if ($tIndex > 0) {",
      "//   $tColor    = imagecolorsforindex($img, $tIndex);",
      "//   $new_tIndex    = imagecolorallocate($new_img, $tColor['red'], $tColor['green'], $tColor['blue']);",
      "//   imagefill($new_img, 0, 0, $new_tIndex);",
      "//   imagecolortransparent($new_img, $new_tIndex);",
      "// blending mode (literal/blending) on drawing into current image. not relevant when not saved or not drawn",
      "//imagealphablending($img, true);",
      "//default, but explicitely set to ensure pdf compatibility",
      "/*!$is_mask && !$mask*/",
      "//End isset($this->imagelist[$file]) (png Duplicate removal)",
      "/**\n     * @param $file\n     * @param $x\n     * @param $y\n     * @param $w\n     * @param $h\n     * @param $byte\n     */",
      "// FIXME The pixel transformation doesn't work well with 8bit PNGs",
      "// create temp alpha file",
      "// create temp plain file",
      "// generate gray scale palette (0 -> 255)",
      "// Use PECL gmagick + Graphics Magic to process transparent PNG images",
      "// Get opacity channel (negative of alpha channel)",
      "// Negate opacity channel",
      "// Cast to 8bit+palette",
      "// Make opaque image",
      "// Use PECL imagick + ImageMagic to process transparent PNG images",
      "// Native cloning was added to pecl-imagick in svn commit 263814",
      "// the first version containing it was 3.0.1RC1",
      "// Get opacity channel (negative of alpha channel)",
      "// Since ImageMagick7 negate invert transparency as default",
      "// Cast to 8bit+palette",
      "// Make opaque image",
      "// allocated colors cache",
      "// extract alpha channel",
      "// with gamma correction",
      "// without gamma correction",
      "// extract image without alpha channel",
      "// embed image, masked with previously embedded mask",
      "/**\n     * add a PNG image into the document, from a file\n     * this should work with remote files\n     *\n     * @param $file\n     * @param $x\n     *",
      "//if already cached, need not to read again",
      "// http://www.w3.org/TR/PNG/#11IHDR",
      "// 4 => greyscale with alpha",
      "// 6 => fullcolor with alpha",
      "// exclude grayscale alpha",
      "//png files typically contain an alpha channel.",
      "//pdf file format or class.pdf does not support alpha blending.",
      "//on alpha blended images, more transparent areas have a color near black.",
      "//This appears in the result on not storing the alpha channel.",
      "//Correct would be the box background image or its parent when transparent.",
      "//But this would make the image dependent on the background.",
      "//Therefore create an image with white background and copy in",
      "//A more natural background than black is white.",
      "//Therefore create an empty image with white background and merge the",
      "//image in with alpha blending.",
      "// @todo is it still needed ??",
      "/**\n     * add a PNG image into the document, from a file\n     * this should work with remote files\n     *\n     * @param $file\n     * @param $x\n     *",
      "/**\n     * add a PNG image into the document, from a memory buffer of the file\n     *\n     * @param $data\n     * @param $file\n     * @param $x\n     * ",
      "// cycle through the file, identifying chunks",
      "// this is where all the file information comes from",
      "//this chunk can only occur once and it must occur after the PLTE chunk and before IDAT chunk",
      "//print \"tRNS found, color type = \".$info['colorType'].\"\\n\";",
      "// indexed color, rbg",
      "/* corresponding to entries in the plte chunk\n                                     Alpha for palette index 0: 1 byte\n                                 ",
      "// there will be one entry for each palette entry. up until the last non-opaque entry.",
      "// set up an array, stretching over all palette entries which will be o (opaque) or 1 (transparent)",
      "/* corresponding to entries in the plte chunk\n                                     Gray: 2 bytes, range 0 .. (2^bitdepth)-1\n                          ",
      "//            $transparency['grayscale'] = $this->PRVT_getBytes($data,$p+8,2); // g = grayscale",
      "/* corresponding to entries in the plte chunk\n                                     Red: 2 bytes, range 0 .. (2^bitdepth)-1\n                           ",
      "//unsupported transparency type",
      "// so this image is ok... add it in.",
      "//  $this->o_image($this->numObj,'new',array('label' => $label,'data' => $idata,'iw' => $w,'ih' => $h,'type' => 'png','ic' => $info['width']));",
      "/**\n     * add a JPEG image into the document, from a file\n     *\n     * @param $img\n     * @param $x\n     * @param $y\n     * @param int $w\n     * @pa",
      "// attempt to add a jpeg image straight from a file, using no GD commands",
      "// note that this function is unable to operate on a remote file.",
      "/**\n     * common code used by the two JPEG adding functions\n     * @param $data\n     * @param $imgname\n     * @param $imageWidth\n     * @param $image",
      "//if (DEBUGPNG) print '[addJpegImage_common Duplicate '.$imgname.']';",
      "// note that this function is not to be called externally",
      "// it is just the common code between the GD and the file options",
      "/**\n     * specify where the document should open when it first starts\n     *\n     * @param $style\n     * @param int $a\n     * @param int $b\n     * @p",
      "// this function will open the document at a specified page, in a specified style",
      "// the values for style, and the required parameters are:",
      "// 'XYZ'  left, top, zoom",
      "// 'FitR' left,bottom,right",
      "/**\n     * Add JavaScript code to the PDF document\n     *\n     * @param string $code\n     */",
      "/**\n     * create a labelled destination within the document\n     *\n     * @param $label\n     * @param $style\n     * @param int $a\n     * @param int $",
      "// associates the given label with the destination, it is done this way so that a destination can be specified after",
      "// it has been linked to",
      "// styles are the same as the 'openHere' function",
      "// store the label->idf relationship, note that this means that labels can be used only once",
      "/**\n     * define font families, this is used to initialize the font families for the default fonts\n     * and for the user to add new ones for their ",
      "// set the known family groups",
      "// these font families will be used to enable bold and italic markers to be included",
      "// within text streams. html forms will be used... <b></b> <i></i>",
      "// the user is trying to set a font family",
      "// note that this can also be used to set the base ones to something else",
      "/**\n     * used to add messages for use in debugging\n     *\n     * @param $message\n     */",
      "/**\n     * a few functions which should allow the document to be treated transactionally.\n     *\n     * @param $action\n     */",
      "// store all the data away into the checkpoint variable",
      "// do not destroy the current checkpoint, but move us back to the state then, so that we can try again",
      "// can only abort if were inside a checkpoint",
      "// can only abort if were inside a checkpoint"
    ],
    "length": 221557,
    "preview": "<?php\n/**\n * A PHP class to provide the basic functionality to create a pdf document without\n * any requirement for additional modules.\n *\n * Extended by Orion Richardson to support Unicode / UTF-8 characters using\n * TCPDF and others as a guide.\n *\n",
    "file": "src/code/events-manager-pro/add-ons/printables/dompdf/vendor/dompdf/dompdf/lib/Cpdf.php"
  }
]