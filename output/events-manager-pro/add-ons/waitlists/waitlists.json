[
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [
      "// provide the template",
      "// disable flags so bookings can be done"
    ],
    "length": 614,
    "preview": "<?php\nnamespace EM\\Waitlist;\n$EM_Booking = Bookings::$booking;\n// provide the template\nif( $EM_Booking->booking_status == 6 ){\n\tinclude( emp_locate_template('waitlists/already-waiting.php') );\n}elseif($EM_Booking->booking_status == 7 ){\n\t// disable f",
    "file": "src/code/events-manager-pro/add-ons/waitlists/my-bookings.php"
  },
  {
    "type": "php",
    "functions": [],
    "classes": [],
    "comments": [],
    "length": 338,
    "preview": "<?php\nif( is_admin() ){\n\tinclude('waitlists-admin.php');\n}\nif( get_option('dbem_waitlists') ){\n\tinclude('em-waitlist-booking.php');\n\tinclude('waitlists-bookings.php');\n\tinclude('waitlists-events.php');\n\tinclude('waitlists-tickets.php');\n\tinclude('wai",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_ticket",
      "em_ticket_is_available",
      "em_ticket_edit_form_fields",
      "em_ticket_get_post"
    ],
    "classes": [
      "Tickets"
    ],
    "comments": [
      "// add waitlist ticket text and tweak waitlist statuses",
      "/**\n\t * Changes waiting list ticket name in case it's displayed anywhere.\n\t * @param \\EM_Ticket $EM_Ticket\n\t * @param array $ticket_data\n\t * @return v",
      "/**\n\t * Enabled whilst displaying or processing a booking form with a waitlist approved booking, we assume it's booking a wait-listed person and previ",
      "// check that this ticket can be waitlist-booked",
      "// further checks only needed if restriction already let us through",
      "// reset available value so it forces a refresh",
      "// check if ticket is availble to currently logged in/out person and role",
      "/**\n\t * @param $col_count\n\t * @param \\EM_Ticket $EM_Ticket\n\t * @return void\n\t */"
    ],
    "length": 3032,
    "preview": "<?php\nnamespace EM\\Waitlist;\n\nclass Tickets {\n\t\n\tpublic static function init(){\n\t\t// add waitlist ticket text and tweak waitlist statuses\n\t\tadd_action('em_ticket', '\\EM\\Waitlist\\Tickets::em_ticket', 10, 2);\n\t\t// admin stuff\n\t\tif( get_option('dbem_wai",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-tickets.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_bookings_table",
      "bookings_table_actions",
      "em_admin_event_booking_availibility",
      "em_admin_event_booking_before_availibility",
      "em_admin_event_booking_after_availibility",
      "em_bookings_table_cols_template",
      "em_bookings_table_rows_col_waitlist_expiry",
      "em_bookings_table_rows_col_waitlist_position"
    ],
    "classes": [
      "Bookings_Admin"
    ],
    "comments": [
      "/**\n\t * @param array $actions\n\t * @param \\EM_Booking $EM_Booking\n\t * @return string[]\n\t */",
      "//'edit' => '<a class=\"em-bookings-edit\" href=\"'.em_add_get_params($EM_Booking->get_event()->get_bookings_url(), array('booking_id'=>$EM_Booking->book",
      "/**\n\t * Adds columns in the bookings tables\n\t * @param array $template\n\t * @return array\n\t */",
      "/**\n\t * @param string $val\n\t * @param \\EM_Booking $EM_Booking\n\t */",
      "// assuming it expired at all before cancellation",
      "/**\n\t * @param string $val\n\t * @param Booking $EM_Booking\n\t */"
    ],
    "length": 6970,
    "preview": "<?php\nnamespace EM\\Waitlist;\n\nclass Bookings_Admin {\n\t\n\tpublic static function init(){\n\t\tadd_action('em_bookings_table', '\\EM\\Waitlist\\Bookings_Admin::em_bookings_table', 10, 1);\n\t\tadd_action('em_admin_event_booking_availibility', '\\EM\\Waitlist\\Booki",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-bookings-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "can_user_wait",
      "can_event_waitlist",
      "get_booking",
      "waitlist_booking",
      "waitlist_cancel",
      "handle_ajax_return",
      "disable_booking_restrictions",
      "reenable_booking_restrictions",
      "em_before_booking_action_booking_add",
      "waitlist_form",
      "display_booking_form",
      "em_booking_button",
      "em_booking_form_header",
      "em_my_bookings_booking_action_links",
      "em_locate_template",
      "em_bookings_get_pending_spaces"
    ],
    "classes": [
      "Bookings"
    ],
    "comments": [
      "/**\n\t * If currently displaying a booking with waiting list status, it's loaded here for reference whilst being manipulated\n\t * This allows for refere",
      "/**\n\t * Flag showing if booking form via waiting booking is being displayed, used to prevent endless loops.\n\t * @var bool\n\t */",
      "// reserve the waitlisted spaces",
      "// only logged in users, but same destination",
      "// intercept booking to prevent double-booking issues",
      "// output and intercept waitlist form",
      "// add hidden input to booking forms resulting from approved waitlist",
      "// circumvent my bookings page to allow booking a waitlist approved event",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t * @return bool|string\n\t */",
      "// firstly we determine if this user has any potential tickets that would be avialable now if cancelleations occur",
      "// user can book waitlists",
      "// check if user is requesting a specific booking (logged in or not)",
      "// first we make sure that the email is also matching, for double-security",
      "// check if user has a booking we can load for them automatically",
      "// we don't return 'expired' because the user could potentially submit another waitlist reservation, but we also leave the currently expired one in th",
      "// check if waitlist is full, if so then no point checking further",
      "// we assume a fully booked event means event is at capacity, meaning the only thing we check is spaces",
      "// in scenarios where a ticket will be available in the future, then the event isn't at capacity therefore waiting lists doesn't make sense, or rather",
      "// check if ticket is excluded from waitlist, if so ignore",
      "// we also check that there are available tickets based on the user login status, if they're a member with access to registered user tickets, they sho",
      "// if we're here, check user isn't logged in because if so they could log in and join the waitlist that way",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t * @return bool\n\t */",
      "// determine of waitlist is to be shown for this event",
      "// check if event has waitlists enabled",
      "// disabled by default",
      "// enabled by default",
      "// event overrides disabled, we're here because waitlists are enabled so show waitlist if possible",
      "/**\n\t * Gets waitlisted booking provided the booking to be retrieved belongs to the user (or can belong to guest)\n\t * @param string $uuid\n\t * @return ",
      "// ensure this is either a guest booking access or if a registered user access it belongs to that specific user, registered users can claim a guest bo",
      "// continue with allowing overrides so user can view the booking info",
      "// limit spaces bookable by limiting the event",
      "/* ==================\n\t *  Actions\n\t/* ================== */",
      "/**\n\t * AJAX handler for adding someone to the waitlist\n\t */",
      "/* @var \\EM_Notices $EM_Notices */",
      "// double-check again usre can be on a waitlist",
      "// create a booking with a blank ticket representing a waitlist",
      "// we purposefully skip validation to prevent other stuff interfering, the only validation required is when getting the person post above, the rest is",
      "// user is waitlisted, confirm",
      "//remove_filter('em_bookings_ticket_exists', '__return_true', 10); - left over? commented out for now,",
      "//remove_filter('em_ticket_is_available', '__return_true', 10);",
      "// user needs to log in",
      "// user needs to log in",
      "/* @var \\EM_Notices $EM_Notices */",
      "//add this for HTTP -> HTTPS requests which assume it's a cross-site request",
      "/* =============================\n\t *  Restriction circumvention\n\t/* ============================= */",
      "/**\n\t * Disables any flags and filters that impose restrictions preventing a user making a waitlist-approved booking currently loaded in Waitlist\\Book",
      "// make sure tickets aren't checking quantities",
      "// unique number in case other filters at play",
      "// sort out flags if we're dealing with a currently loaded booking",
      "/**\n\t * Re-enable any flags and filters that impose restrictions preventing a user making a waitlist-approved booking\n\t * @return void\n\t */",
      "// make sure tickets aren't checking quantities",
      "// unique number in case other filters at play",
      "// if booking is loaded",
      "/* ====================================\n\t *  Booking form overrides and display\n\t/* ==================================== */",
      "/**\n\t * Outputs a waitlist form, in place the of an 'event full' message if applicable for this event.\n\t * May display other templates if the event wa",
      "// does event have waitlists enabled?",
      "// can user waitlist this event due to tickets, login status, role etc?",
      "// this happens if user is visiting a link with a uuid, so we show info about the booking",
      "// continue with default action if we get here",
      "// show booking form",
      "/**\n\t * @param string $button\n\t * @param \\EM_Event $EM_Event\n\t * @param string $status\n\t * @return string\n\t */",
      "// would only get here if we actually have a fully booked booking without the user having a booking already, so we are just showing the join button if",
      "/**\n\t * Add a hidden input into booking forms that are a result of a waitlisted booking, so we can let it through even in a fully booked event.\n\t * @p",
      "// locate the booking itself here, and the subsequent template can reference it",
      "// first we make sure that the email is also matching, for double-security",
      "/**\n\t * Modifies pending spaces calculations to include waitlisted bookings\n\t * @param integer $count\n\t * @param \\EM_Bookings $EM_Bookings\n\t * @return"
    ],
    "length": 21373,
    "preview": "<?php\nnamespace EM\\Waitlist;\nuse EM_Booking, EM_Object, EM_Ticket_Booking, EM_Ticket_Bookings, EM_DateTime;\n\nclass Bookings {\n\t\n\t// caches\n\tpublic static $event_pending_spaces = array();\n\tpublic static $event_waiting_spaces = array();\n\tpublic static ",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-bookings.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "options",
      "get_waitlist_tip",
      "email_options"
    ],
    "classes": [
      "Admin"
    ],
    "comments": [
      "/*\n\t * --------------------------------------------\n\t * Email Reminders\n\t * --------------------------------------------\n\t */",
      "/**\n\t * Generates meta box for settings page\n\t */",
      "//You can further customize all these templates, or parts of them by overriding our template files as per our %s.",
      "// taken from admin-settings.js in events-manager/includes/js",
      "/**\n\t * Generates meta box for settings page\n\t */",
      "//You can further customize all these templates, or parts of them by overriding our template files as per our %s."
    ],
    "length": 13243,
    "preview": "<?php\nnamespace EM\\Waitlist;\nclass Admin {\n\t\n\tpublic static function init(){\n\t\tadd_action('em_options_page_footer_bookings', '\\EM\\Waitlist\\Admin::options');\n\t\tadd_action('em_options_page_footer_emails', '\\EM\\Waitlist\\Admin::email_options');\n\t}\n\t\n\t/*\n",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get_post",
      "validate",
      "get_status",
      "get_spaces",
      "get_price",
      "is_expired",
      "get_expiry_timestamp",
      "get_expiry_time_left",
      "get_booking_url",
      "output_placeholder",
      "email_messages",
      "set_status",
      "get_max_spaces",
      "em_get_booking",
      "em_booking",
      "em_booking_get_post",
      "em_booking_validate_pre",
      "em_booking_validate_after",
      "em_booking_save",
      "em_booking_output_show_condition"
    ],
    "classes": [
      "Booking"
    ],
    "comments": [
      "// we're assigning a waiting list ticket number i.e. 0",
      "// We add it to the booking directly, tricking EM to think it's OK",
      "// check that the spaces requested meet the limits",
      "// reached limit of event waitlist",
      "// spaces are more than the available spaces",
      "// spaces exceeded for booking limits",
      "// spaces exceeded for booking limits",
      "// check that the user hasn't already reserved",
      "// validate name, email will have been validated in get_post",
      "// TODO: Change the autogenerated stub",
      "// 0 = never expires",
      "// if we get here, we can only assume there's no expiry",
      "// default to date of booking",
      "/**\n\t * @param string $result\n\t * @param array $placeholder_atts\n\t * @param string $format\n\t * @param string $target\n\t * @return string\n\t */",
      "// people ahead of booking",
      "// reservations behind booking",
      "// spaces reserved ahead of yours",
      "// we won't send admins this msg",
      "// we won't send admins this msg",
      "// we won't send admins this msg",
      "// we won't send admins this msg",
      "/**\n\t * @param int $status\n\t * @param bool $email\n\t * @param bool $ignore_spaces\n\t * @return bool\n\t */",
      "// reset the expiry if re-approved, before setting status so emails get correct placeholders for expiry times",
      "// delete expiry record, not relevant anymore",
      "// helper static functions",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t *\n\t * @return int|mixed\n\t */",
      "// get limits imposed by waitlists (current WL bookings, space limits)",
      "// determine max amount possible based on lowest number we've gathered",
      "// Static functinos that'll deal with specific situations in the regular EM_Booking objects",
      "/**\n\t * Converts waitlist bookings into the EM\\Waitlists\\Bookings function\n\t * @param EM_Booking $EM_Booking\n\t * @return EM_Booking\n\t */",
      "// convert to a Waitlist Booking object",
      "/**\n\t * Temporary... in future we could automatically put a ready-to-go booking into a waiting list that automatically gets approved if a real booking",
      "/**\n\t * @param bool $result\n\t * @param EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "// check if there's a waitlist-approved booking id appended, if so double-check and disable space restrictions for this amount of bookings",
      "// we have an associated waitlist booking, so we'll tack on the reference here, assuming it's approved",
      "// we'll set this to true before saving to db",
      "/**\n\t * @param EM_Booking $EM_Booking\n\t * @return void\n\t */",
      "// in case somewhere down the line the booking object got changed, reload it",
      "// remove the restriction of waitlist bookings reserving spaces",
      "/**\n\t * Checks if a space has freed up due to booking update, also associates and cleans up waitlists that have ben changed into a real booking.\n\t * @",
      "// if this is a boking with an associated waitlist, we need to delete it and reset the",
      "// convert EM_Booking waitlist bookings to Waitlist\\Booking objects",
      "// remove waitlist statuses from non-waitlist statuses",
      "// add conditional placeholder for use in general emails",
      "// intercept regular bookings that are dreived from a waitlist-approved reservation"
    ],
    "length": 16405,
    "preview": "<?php\nnamespace EM\\Waitlist;\nuse EM_DateTime, EM_Booking, EM_Ticket_Booking, EM_Ticket_Bookings;\n\nclass Booking extends EM_Booking {\n\t\n\tpublic $booking_status = 6;\n\t\n\tpublic function __construct($booking_data = false) {\n\t\tif( $booking_data instanceof",
    "file": "src/code/events-manager-pro/add-ons/waitlists/em-waitlist-booking.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_event_save",
      "em_booking_save",
      "em_booking_set_status",
      "em_booking_deleted",
      "em_bookings_deleted",
      "check_waitlist",
      "check_expired"
    ],
    "classes": [
      "Manager"
    ],
    "comments": [
      "/**\n * Manages waitlists and waitlist booking capacities, cleans things up, crons etc.\n */",
      "// deal with status changes of bookings that can open up new spaces for waitlist bookings",
      "// manage expired bookings - set up cron for clearing email queue",
      "/**\n\t * @param bool $result\n\t * @param \\EM_Event $EM_Event\n\t * @return bool\n\t */",
      "/**\n\t * Checks if a space has freed up due to booking update, also associates and cleans up waitlists that have ben changed into a real booking.\n\t * @",
      "// trigger a check because booking may have changed number of spaces during an edit",
      "/**\n\t * @param bool $result\n\t * @param \\EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "// we can ignore confirmed and waitlist-approved bookings since they only take away availability",
      "// we can ignore confirmed and waitlist-approved bookings since they only take away availability",
      "// we can ignore confirmed and waitlist-approved bookings since they only take away availability",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t */",
      "// check that we have any available spaces - force a refresh",
      "// check if we have any waitlisted people",
      "// prep guest ticket types to check here and avoid potentially unecessary repetitions",
      "// check if ticket is available without member restrictions, then split for guest/member specific tickets",
      "// go through waitlist, first come first served",
      "// check if user is guest or member and if they have any applicable tickets",
      "// get user info and check all ticket types they could book",
      "// this person is next!",
      "// next waitee needs more spaces so we put it on hold for them until spaces free up",
      "// check for guest/unrestricted tickets they could beok",
      "// this person is next!",
      "// next waitee needs more spaces so we put it on hold for them until spaces free up",
      "// keep going until we find a candidate or run out of waitees",
      "// if we have a candidate at this point, approve their waitlist",
      "// set booking expiry before setting status",
      "// approve waitlist booking",
      "// get any expired bookings",
      "// disable trigger check",
      "// create an object and set status so email is triggered",
      "// in theory this should always and only be a waitlist booking",
      "// quick check just in case!",
      "// let's clean this up regardless and remove the expiry record, it doesn't belong in the booking, change it to past tense so we have a record of when ",
      "// now go through all affected events and trigger a waitlist check",
      "// done! reset the trigger check for status changes"
    ],
    "length": 8521,
    "preview": "<?php\nnamespace EM\\Waitlist;\n\n/**\n * Manages waitlists and waitlist booking capacities, cleans things up, crons etc.\n */\nclass Manager {\n\t\n\tpublic static $disable_triggers = false;\n\t\n\tpublic static function init(){\n\t\t// deal with status changes of bo",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-manager.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_event_output_placeholder",
      "em_event_output_show_condition",
      "get_waiting_spaces",
      "get_waiting_approved_spaces",
      "get_waiting_bookings",
      "get_available_spaces",
      "get_var",
      "em_events_admin_bookings_footer",
      "em_event_get_post_meta",
      "em_event_load_postdata_other_attributes",
      "em_event_save_meta"
    ],
    "classes": [
      "Events"
    ],
    "comments": [
      "// display/load/save meta",
      "// ticket stuff handed in Tickets object",
      "/**\n\t * @param string $replace\n\t * @param \\EM_Event $EM_Event\n\t * @param string $result\n\t * @return string\n\t */",
      "// hours an approved waitlisted booking keeps available spaces reserved",
      "// max number of spaces available to waitlist",
      "// number of people waiting (not including approved wait-listed bookings)",
      "// number of spaces left to reserve on waitlist",
      "// number of spaces already reserved in booking",
      "// number of approved (but not booked yet) spaces",
      "/**\n\t * @param bool $show\n\t * @param string $condition\n\t * @param string $full_match\n\t * @param \\EM_Event $EM_Event\n\t * @return bool\n\t */",
      "// event has waitlist enabled",
      "// event doesn't have waitlists enabled",
      "// waitlist is open for reservations - does not account for user-restricted tickets or whether users must be logged in to apply",
      "// waitlist is closed to reservations, this can mean it's full, not open yet or not enabled - does not account for user-restricted tickets or whether ",
      "// waitlist is enabled and full",
      "// could also be true i.e. unlimited, 0 or false means no spaces",
      "// opposite of closed",
      "// only waitlist should be unavailable here",
      "// event has limited spaces for waitlist",
      "// event has limited spaces for waitlist",
      "// user can book limited spaces on waitlist",
      "// user has no limit of spaces to book per booking, although possibly limited by the general waitlist limit of available spaces",
      "// approved waitlist bookings have an expiry time",
      "// approved waitlist bookings don't have an expiry time",
      "/**\n\t * Get the number of waitlisted spaces currently in line. This doesn't include approved waitlist reservations because they're considered booked o",
      "/**\n\t * Get the number of approved waitlist reservations, waiting to complete a booking. These are considered as 'booked' with an auto-cancel if they ",
      "/**\n\t * Get the number of waitlist reservations for the current event. This is not the number of spaces reserved, but the number of reservations which",
      "/**\n\t * Get the number of waitlist reservations, waiting to complete a booking. These are considered as 'booked' with an auto-cancel if they pass expi",
      "/**\n\t * @param 'expiry'|'limit'|'booking_limit'|'enabled'|'waitlist' $var\n\t * @param \\EM_Event $EM_Event\n\t * @return false|mixed|null\n\t */",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t * @return void\n\t */",
      "// if enabled for all, we by default will not include the value and assume it's enabled elsewhere ?>",
      "/**\n\t * @param bool $result\n\t * @param \\EM_Event $EM_Event\n\t * @return bool\n\t */",
      "// set specifics first, delete later if needed",
      "// check whether to enable/disable or use default",
      "/**\n\t * Get waitlist meta loaded in the EM_Event->load_postdata() function\n\t * @param array $array\n\t * @return array\n\t */",
      "/**\n\t * @param bool $result\n\t * @param EM_Event $EM_Event\n\t * @return bool\n\t */"
    ],
    "length": 14504,
    "preview": "<?php\nnamespace EM\\Waitlist;\n\nclass Events {\n\t\n\tpublic static function init(){\n\t\tif( get_option('dbem_waitlists_events') ) {\n\t\t\t// placeholders\n\t\t\tadd_filter('em_event_output_placeholder','\\EM\\Waitlist\\Events::em_event_output_placeholder',1,3);\n\t\t\tad",
    "file": "src/code/events-manager-pro/add-ons/waitlists/waitlists-events.php"
  }
]