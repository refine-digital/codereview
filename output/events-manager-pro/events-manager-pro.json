[
  {
    "type": "php",
    "functions": [
      "init",
      "install",
      "em_ms_globals",
      "em_public_script_deps",
      "em_enqueue_scripts",
      "enqueue_admin_script",
      "em_enqueue_admin_styles",
      "em_wp_localize_script",
      "em_enqueue_styles",
      "em_install_warning",
      "em_version_warning_critical",
      "log",
      "emp_load_plugin_textdomain",
      "emp_activate",
      "emp_delete_blog",
      "emp_cron_schedules",
      "emp_locate_template",
      "emp__",
      "_e_emp",
      "esc_html__emp",
      "esc_html_e_emp",
      "esc_attr__emp",
      "esc_attr_e_emp",
      "esc_html_x_emp"
    ],
    "classes": [
      "EM_Pro",
      "calls"
    ],
    "comments": [
      "/*\nPlugin Name: Events Manager Pro\nPlugin URI: https://eventsmanagerpro.com\nDescription: Supercharge the Events Manager free plugin with extra feature",
      "//check pre-requisites",
      "//an absolute path to this directory",
      "/**\n\t * em_pro_data option\n\t * @var array\n\t */",
      "/**\n\t * Actions to take upon initial action hook\n\t */",
      "//check that an incompatible version of EM is not running",
      "//check that EM is installed",
      "//don't load EMP further",
      "//add notice and prevent further loading",
      "//check that EM is up to date",
      "//wordpress.org/extend/plugins/events-manager/\">latest version</a> of Events Manager installed, as this may prevent Pro from functioning properly.','e",
      "// Define some tables",
      "//define('EM_AUTOMATION_LOGS_TABLE', $prefix.'em_automation_logs'); //TABLE NAME",
      "//although activate_plugins would be beter here, superusers don't visit every single site on MS",
      "//Add extra Styling/JS",
      "//added only when EM adds its own scripts",
      "//added only when EM adds its own scripts",
      "//added only when EM adds its own scripts",
      "//specific pages in admin that EMP deals with",
      "//booking-specific features",
      "// legacy gateways, containing version freeze from 3.1.5.1 and may disable certain features",
      "// languages after gateways due to dependent class calls",
      "//Upgrade/Install Routine",
      "/**\n\t * Add script dependencies to filter that should be enqueued into EM script loader.\n\t * @param array $scripts\n\t * @return array\n\t */",
      "//for the booking form",
      "/**\n\t * Enqueue scripts when fired by em_enqueue_scripts action.\n\t */",
      "//jQuery will load as dependency",
      "/**\n\t * Add admin scripts for specific pages handled by EM Pro. Fired by admin_init\n\t */",
      "//jQuery will load as dependency",
      "//need to include the em script for dates",
      "/**\n\t * Enqueue Pro CSS file when action em_enqueue_admin_styles is fired.\n\t */",
      "/**\n\t * Add extra localized JS options to the em_wp_localize_script filter.\n\t * @param array $vars\n\t * @return array\n\t */",
      "/**\n\t * Enqueues the CSS required by Pro features. Fired by action em_enqueue_styles which is when EM enqueues it's stylesheet, if it doesn't then thi",
      "//wordpress.org/extend/plugins/events-manager/\">here</a>.','em-pro'); ?> <em><?php _e('Only admins see this message.','em-pro'); ?></em></p></div>",
      "/**\n\t * Creates a log entry in plugins/events-manager-logs/$log_name-yyyy-mm-dd-logs.txt\n\t * @param string|array|object $log_text\n\t * @param string $l",
      "/* Creating the wp_events table to store event data*/",
      "/**\n * Handle MS blog deletions\n * @param int $blog_id\n */",
      "//cron functions - ran here since functions aren't loaded, scheduling done by gateways and other modules",
      "/**\n * Adds a schedule according to EM\n * @param array $shcehules\n * @return array\n */",
      "/**\n * Copied from em_locate_template. Same code, but looks up the folder events-manager-pro in your theme.\n * @param string $template_name\n * @param ",
      "//First we check if there are overriding tempates in the child or parent theme",
      "// now check the wp-content/plugin-templates/events-manager/ folder",
      "// finally get the plugin from EM if no others exist",
      "//Translation shortcut functions for times where WP translation shortcuts for strings in the dbem domain. These are here to prevent the POT file gener",
      "/**\n * Shortcut for the __ function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the _e function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the esc_html__ function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the esc_html_e function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the esc_attr__ function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the esc_attr_e function\n * @param string $text\n * @param string $domain\n */",
      "/**\n * Shortcut for the esc_html_x function\n * @param string $text\n * @param string $domain\n */"
    ],
    "length": 14374,
    "preview": "<?php\n/*\nPlugin Name: Events Manager Pro\nPlugin URI: https://eventsmanagerpro.com\nDescription: Supercharge the Events Manager free plugin with extra features to make your events even more successful!\nAuthor: Pixelite\nAuthor URI: https://pixelite.com/",
    "file": "src/code/events-manager-pro/events-manager-pro.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "logging_settings",
      "logging_enable"
    ],
    "classes": [
      "EM_Pro_Admin"
    ],
    "comments": [
      "/**\n * Used for hooking into the admin page and adding extra settings specific to Events Manager Pro, meaning classes do not need to be loaded until e",
      "/* START Logging */",
      "/* END Logging */"
    ],
    "length": 1781,
    "preview": "<?php\n/**\n * Used for hooking into the admin page and adding extra settings specific to Events Manager Pro, meaning classes do not need to be loaded until enabled here. \n */\nclass EM_Pro_Admin{\n    public static function init(){\n        //Logging\n   ",
    "file": "src/code/events-manager-pro/emp-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "locate_template",
      "get_formatting_modes_map"
    ],
    "classes": [
      "EMP_Formats"
    ],
    "comments": [
      "/**\n * Extends EM_Formats for location templates in the events-manager-pro plugin folder. along with pro-specific formats.\n */",
      "/**\n\t * Override parent by including pro-specific formatting modes map with a specific filter too.\n\t * @return mixed|void\n\t */",
      "/*\n\t\t\t'events-list' => array(\n\t\t\t\t'dbem_event_list_item_format_header',\n\t\t\t\t...\n\t\t\t),\n\t\t\t*/"
    ],
    "length": 754,
    "preview": "<?php\n/**\n * Extends EM_Formats for location templates in the events-manager-pro plugin folder. along with pro-specific formats.\n */\nclass EMP_Formats extends EM_Formats {\n\tprotected static $formats_filter = 'emp_formats_filter';\n\t\n\tpublic static fun",
    "file": "src/code/events-manager-pro/emp-formats.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_menu",
      "admin_page",
      "admin_options",
      "em_wp_localize_script",
      "admin_enqueue_scripts",
      "max_ini_vars_fix",
      "__construct",
      "get_post",
      "get_values",
      "get_formatted_value",
      "is_normal_field",
      "is_user_field",
      "__toString",
      "output_field",
      "output_field_input",
      "validate",
      "validate_field",
      "get_fields_map",
      "translate_field",
      "get_input_default",
      "input_default",
      "show_reg_fields",
      "validate_reg_fields",
      "editor",
      "editor_ml_fields",
      "editor_ml_fields_trigger",
      "editor_save",
      "editor_get_post"
    ],
    "classes": [
      "EM_Forms",
      "EM_Form"
    ],
    "comments": [
      "//specific admin stuff for the editor",
      "//use wp action/filters to mess with the menus",
      "/**\n\t * Add extra localized JS options to the em_wp_localize_script filter.\n\t * @param array $vars\n\t * @return array\n\t */",
      "//so we can check the directive before submitting a form and stringify",
      "/**\n\t * Enqueues the admin JS for the forms editor \n\t */",
      "//jQuery will load as dependency",
      "/**\n\t * Fix for info submitted using JSON workaround for forms containing more fields than the max_ini_vars directive allows.\n\t */",
      "/**\n\t * If this form represents user fields, then it's set to true, otherwise set to false\n\t * @var boolean\n\t */",
      "//load form data from array",
      "//assume the text is the form name",
      "//for things like checkboxes when editing",
      "//force save a 0 rather than a blank so we can check it",
      "//if this is a custom user field, change $filed to the original field so the right date/time info is retreived",
      "//dates and time are special",
      "//check that user fields were indeed submitted for validation by logged in users, or were not editable, in which case we populate form with previously",
      "//FIX FOR BUG IN 2.2.5.4 and earlier for bookings using use no-user-mode",
      "//fix for empty value saves in 2.2.8",
      "//output formatted value for special fields",
      "//split ranges (or create single array) and format, then re-implode",
      "//set seperator and replace the comma",
      "//split ranges (or create single array) and format, then re-implode",
      "//set seperator and replace the comma",
      "/**\n\t * Returns true if this field is not a user field or an html field, meaning it is stored information not at a user-account level, false if not.\n\t",
      "/**\n\t * Returns true if this is a field stored as at a user-account level, false if not.\n\t * @param mixed $field_or_id\n\t * @return boolean\n\t */",
      "/**\n\t * Prints html fields according to this field structure.\n\t * @param array $booking_form_fields\n\t */",
      "// checkboxes will show label ln right so things align better ?>",
      "//registration fields",
      "//calculate default value to be checked",
      "//make sure the value is a date",
      "//we're adding a [%s] to the field id and replacing this for the start-end field names because this way other bits (e.g. attendee forms) can manipulat",
      "//make sure the value is a date",
      "//we're adding a [%s] to the field id and replacing this for the start-end field names because this way other bits (e.g. attendee forms) can manipulat",
      "//language list extracted from - https://developers.google.com/recaptcha/docs/language",
      "//www.google.com/recaptcha/api.js?hl=<?php echo $lang; ?>\"></script>",
      "//registration fields",
      "/**\n\t * Validates all fields, if false, an array of objects is returned.\n\t * @return array|string\n\t */",
      "//don't validate reg info if we won't grab anything in get_post",
      "/**\n\t * Validates a field and adds errors to the object it's referring to (can be any extension of EM_Object)\n\t * @param array $field\n\t * @param mixed",
      "//innocent until proven guilty",
      "//check to see if regex has modifiers if starting with a / string",
      "//decode and trim both submitted and available values",
      "//we must make sure all is decoded, both selection values and submitted value itself",
      "//decode and trim both submitted and available values",
      "//valid end date, check for date order",
      "//www.google.com/recaptcha/api/siteverify', $captcha_post_args);",
      "//captchas can only be checked once, and since we only need one captcha per submission....",
      "//Registration and custom fields",
      "//$is_manual_booking_new_user = (is_user_logged_in() && !empty($_REQUEST['manual_booking']) && wp_verify_nonce($_REQUEST['manual_booking'], 'em_manual",
      "//preliminary checks/exceptions",
      "//add field-specific validation",
      "//regex - array values such as dates or checkboxes don't need regex checking",
      "//custom field chekcs",
      "//custom field, so just apply",
      "/**\n\t * Gets an array of field keys accepted by the booking form \n\t */",
      "/*\n\t * --------------------------------------------------------\n\t * Admin-Side Functions\n\t * --------------------------------------------------------\n",
      "/**\n\t * Returns whether or not to show registration fields, and if a field type or field object is passed it'll check whether that specific field shou",
      "//usernameas and passwords are always hidden once a user exists",
      "//user login is always hiddeen for no-user mode bookings",
      "//short circuit if we're on a manual booking for a new user",
      "// only login fields are exempt, if in no-user mode, since we don't need it",
      "//www.google.com/recaptcha/admin#list\";",
      "//Booking form fields",
      "//extract request info back into item lists, but first assign fieldids to new items and sanitize old ones",
      "//check for duplicate IDs and if they exist, change the latter one to avoid conflicts",
      "//regex can contain 'invalid' html which will get stripped, so we allow raw unsanitized strings given they're never output to a user",
      "//if using the workaround for large forms, regexes seem to already be properly stripped"
    ],
    "length": 81945,
    "preview": "<?php\nclass EM_Forms {\n\tpublic static function init(){\n\t\tif( is_admin() ){\n\t\t\tadd_action('em_create_events_submenu',array('EM_Forms', 'admin_menu'),1,1);\n\t\t\tadd_action('em_options_page_footer_bookings',array('EM_Forms', 'admin_options'),10);\n\t\t\t\n\t\t\t/",
    "file": "src/code/events-manager-pro/emp-forms.php"
  },
  {
    "type": "php",
    "functions": [
      "log",
      "get_log_directory"
    ],
    "classes": [
      "EMP_Logs"
    ],
    "comments": [
      "/**\n\t * Creates a log entry in plugins/events-manager-logs/$log_name-yyyy-mm-dd-logs.txt\n\t * @param string|array|object $log_text\n\t * @param string $l",
      "//try to make a directory and create an .htaccess file"
    ],
    "length": 1681,
    "preview": "<?php\nclass EMP_Logs{\n\t/**\n\t * Creates a log entry in plugins/events-manager-logs/$log_name-yyyy-mm-dd-logs.txt\n\t * @param string|array|object $log_text\n\t * @param string $log_name\n\t */\n\tpublic static function log( $log_text, $log_name ){\n\t    $log_d",
    "file": "src/code/events-manager-pro/emp-logs.php"
  },
  {
    "type": "php",
    "functions": [
      "emp_install",
      "emp_check_utf8mb4_tables",
      "emp_sort_out_table_nu_keys",
      "emp_create_transactions_table",
      "emp_create_coupons_table",
      "emp_create_reminders_table",
      "emp_create_bookings_relationships_table",
      "emp_create_checkin_table",
      "emp_create_automation_table",
      "emp_create_automation_logs_table",
      "emp_add_options"
    ],
    "classes": [],
    "comments": [
      "// Creates the tables + options if necessary",
      "//in case for some reason the user changed global settings",
      "//in case for some reason the user changes global settings in the future",
      "//trigger update action",
      "/**\n * Since WP 4.2 tables are created with utf8mb4 collation. This creates problems when storing content in previous utf8 tables such as when using e",
      "//if this doesn't become true further down, that means we couldn't find a correctly converted utf8mb4 posts table",
      "/**\n * Magic function that takes a table name and cleans all non-unique keys not present in the $clean_keys array. if no array is supplied, all but th",
      "//only add index if needed",
      "//TODO - remove this or create dependency in admin settings",
      "// Bookings Manager - Frontend, QR etc.",
      "// Cancellation Options",
      "// Submission Limiting",
      "//www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif');",
      "// PDF and printables",
      "//wp-events-plugin.com';",
      "//multiple bookings - emails",
      "// dependent bookings",
      "//upgrade, so do any specific version updates",
      "//add new customer information fields",
      "//new booking form data structure",
      "//backward compatability, check first field to see if indexes start with 'booking_form_...' and change this.",
      "//move booking form to meta table and update wp option with booking form id too",
      "//make buttons the default option",
      "//merge offline quick pay button option into one",
      "//merge offline quick pay button option into one",
      "//fix badly stored user dates and times",
      "//search the user meta table and modify all occorunces of this value if the format isn't correct",
      "//update this user meta with the new value",
      "//disable custom emails for upgrades, prevent unecessary features",
      "//fix badly stored user dates and times",
      "//disable custom emails for upgrades, prevent unecessary features",
      "//disable custom emails for upgrades, prevent unecessary features",
      "//transition paypal credentials to serialized array",
      "//transition authorize.net to serialized array",
      "//transition into new license, but don't deactivate their site immediately.",
      "//set api key to autoload",
      "//we're good, just mute the activation message and user will not get confused with change of license interface",
      "// 3.0 onwards we use version_compare, finally!",
      "// Ticket meta time! For now, attendee data only is really what we're after.",
      "// the best way to do this will be by doing it by booking meta, only way to do it in bigger batches that won't require as many SQL queries and process",
      "// let's go through every booking meta regarding tickets and split it all up",
      "// get the ticket attendee info raw, split it up",
      "// now we generate split meta, any meta in an array should be dealt with by corresponding plugin (e.g. Pro for form field meta)",
      "// double-check we don't have a totally empty array here, it happens",
      "// skip, no data to process for this",
      "// get the current ticket booking IDs we'll need for this process",
      "// we're not checking id validity or anything like that, we're just getting the IDs and putting them into the right place for an SQL query",
      "// match, now split up every item within the array",
      "// we go down one level for automated array splitting",
      "// handle emojis - copied check from wpdb",
      "// handle emojis - copied check from wpdb",
      "// finally update the booking again so we know it was migrated",
      "// first check that we maybe didn't die halfway through this and there aren't others with the same ticket/bookingid combo by simply deleting all this ",
      "// update some options for current users",
      "// notify user of new version!",
      "// update native legacy gateways for new test mode, in case already in test mode",
      "//Booking form stuff only run on install"
    ],
    "length": 42571,
    "preview": "<?php\n\nfunction emp_install() {\n\tglobal $wp_rewrite, $em_do_not_finalize_upgrade;\n\t$old_version = get_option('em_pro_version');\n\tif( version_compare(EMP_VERSION, $old_version, '>') || $old_version == ''|| (is_multisite() && !EM_MS_GLOBAL && get_optio",
    "file": "src/code/events-manager-pro/emp-install.php"
  },
  {
    "type": "php",
    "functions": [
      "register",
      "has"
    ],
    "classes": [
      "Feature"
    ],
    "comments": [
      "/**\n * Feature detection plugin to see if something is enabled. Any add-on can register a feature so that checking for that feature is easy and standa",
      "// check it's not registered"
    ],
    "length": 862,
    "preview": "<?php\nnamespace EM;\n\n/**\n * Feature detection plugin to see if something is enabled. Any add-on can register a feature so that checking for that feature is easy and standardized.\n *\n * For example, if we're registering QR codes, we do a check to see ",
    "file": "src/code/events-manager-pro/em-feature.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_ml_admin_settings_pages",
      "em_ml_translatable_options"
    ],
    "classes": [
      "EMP_ML"
    ],
    "comments": [
      "/**\n * Handles MultiLingual stuff for Events Manager Pro\n *\n */",
      "//translatable options",
      "/**\n     * Translate options specific to EM Pro\n     * @param array $options\n     * @return array:\n     */",
      "//payment gateway options (pro, move out asap)",
      "//gateway translateable options"
    ],
    "length": 3609,
    "preview": "<?php\n/**\n * Handles MultiLingual stuff for Events Manager Pro\n *\n */\nclass EMP_ML {\n    public static function init(){\n        //translatable options\n        add_filter('em_ml_translatable_options','EMP_ML::em_ml_translatable_options');\n        if( ",
    "file": "src/code/events-manager-pro/emp-ml.php"
  },
  {
    "type": "txt",
    "length": 64793,
    "preview": "=== Events Manager Pro ===\nContributors: pxlite, msykes\nTags: events, event, event registration, eve",
    "file": "src/code/events-manager-pro/readme.txt"
  }
]