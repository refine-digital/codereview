[
  {
    "type": "php",
    "functions": [
      "__construct",
      "init",
      "wp_init",
      "settings_page_scripts",
      "__get",
      "__isset",
      "get_post",
      "validate",
      "save",
      "em_event_duplicate_pre",
      "em_event_save_events",
      "em_event_save_events_exclude_update_meta_keys",
      "delete",
      "em_event_delete_meta",
      "get_meeting_request_settings",
      "admin_delete_warning",
      "update_questions",
      "get_registrant_questions",
      "get_link",
      "get_admin_column",
      "get_label",
      "load_admin_template",
      "load_admin_class",
      "get_zoom_registrant_questions",
      "get_booking_meta",
      "em_booking_save",
      "em_booking_output_placeholder",
      "booking_admin_single",
      "register_attendee",
      "em_booking_set_status",
      "em_booking_deleted",
      "supports_attendee_form",
      "output",
      "get_ical_location"
    ],
    "classes": [
      "Zoom_Meeting",
      "if",
      "for",
      "for"
    ],
    "comments": [
      "/**\n * Adds a URL event location type by extending EM_Event_Location and registering itself with EM_Event_Locations\n *\n * @property string id         ",
      "/**\n\t * @var int Specific meeting type defined by Zoom API for creating things like webinars or meetings\n\t */",
      "// Meeting, set/translated on init()",
      "// Meeting, set/translated on init()",
      "/**\n\t * @var bool If rate limit is hit for meetings or webinars, flag will be set to true during script run so that further action can be taken.\n\t */",
      "// add listeners for bookings",
      "// recurring event support (unique meeting per recurrence)",
      "// booking admin page",
      "/* @var \\EM_Notices $EM_Notices */",
      "// backward compatibility",
      "// backward compatibility",
      "/**\n\t * @param null $post deprecated, left to prevent warning due to removed $post arg from parent in 5.9.7.8\n\t * @return bool\n\t */",
      "/* @var Zoom_Meeting_Admin $admin_class */",
      "// passwords are stored out of settings so they can be maintained for recurring events",
      "// reset array for post get",
      "// odd zoom nuance that if confirmations are enabled, but not general email notifications, it won't send the confirmation notification.",
      "// check if a recreate flag was raised, if so we do it again",
      "/* @var Zoom_Meeting_Admin $admin_class */",
      "// short circuit recurring events, only settings should be saved",
      "// validate first, and save settings regardless",
      "// check for a valid room ID, and if so populate the info about the room.",
      "// update either meeting or questions",
      "// save individual fields for reuse",
      "// add bookings if they exist by calling the save hook on this class",
      "// unset zoom entirely, backwards compatible with < 6.2 formats",
      "// now update Zoom questions based on Pro custom forms, will throw exception of something goes wrong",
      "/**\n\t * Catches a duplicated event and removes meeting id so it's created again upon publication.\n\t * @param \\EM_Event $EM_Event\n\t */",
      "/* @var Zoom_Meeting $e */",
      "/**\n\t * Hooks into EM_Event::save_events() and creates corresponding meetings for each event.\n\t * @param bool $result\n\t * @param \\EM_Event $EM_Event\n\t",
      "// ensure location type and data is fresh",
      "// in case data is obtained from the cache",
      "// in case we have the same as a recurring event",
      "// check for API request",
      "/**\n\t * Add all properties for this location type to be excluded in recurrence updates, we'll do it ourselves.\n\t * @param array $array\n\t * @param \\EM_",
      "// we exclude all but the settings, as that's something we can update via recurrences",
      "/**\n\t * @return bool|null\n\t */",
      "// delete() is called on a recurrning save() function before save_events(), therefore any data retrieved for recurrences currently saved will retrieve",
      "/* @var \\EM_Notices $EM_Notices */",
      "// reset data here, after item deleted on Zoom",
      "/**\n\t * @param boolean $result\n\t * @param \\EM_Event $EM_Event\n\t * @return boolean\n\t */",
      "// get meeting/webinar and delete it",
      "// create or update this zoom meeting",
      "//we need an amount of time",
      "// scheduled meeting",
      "// we may not include a timezone because Zoom doesn't support all PHP timezones, see further down",
      "//'schedule_for' => 'string', // we could add scheduling for users within a zoom account",
      "// registration type should lock users to the one meeting/webinar since we don't have occurrence/recurrences. Recurrences seem to be very limited for ",
      "// get timezone, and if no corresponding Zoom timezone exists, leave it blank so that UTC is used",
      "/**\n\t * @see Event_Location::admin_delete_warning()\n\t */",
      "//zoom.us/'.static::$zoom_admin_url_base.'/trashcan/list\" target=\"_blank\">'.esc_html__('recently deleted', 'events-manager-zoom').'</a>';",
      "/**\n\t * @param Zoom_API_Client $zoom_client\n\t * @param bool $save\n\t * @throws EM_Exception\n\t */",
      "//if( isset($this->settings['approval_type']) && $this->settings['approval_type'] == 2 ) return;",
      "// save hash for update comparison in future if edits are made",
      "/**\n\t * Gets the questions for the meeting of a Zoom event, based on whether an attendee or custom form is used.\n\t */",
      "// go through attendee form and add the relevant forms if they match",
      "// deal with custom booking form and gateways",
      "// standard Zoom question which matches field ID, check if it accepts specific values or any string",
      "// DDM - ensure this question will provide the same values as accepted by Zoom",
      "// if not met, this will be added as a custom question",
      "// regular string answer",
      "// add this to the questions array",
      "//$field['required'] == true,",
      "// for regular booking forms, check common address fields mapped by gateway settings in case they are with different IDs",
      "// matched common question field",
      "// company = org in Zoom",
      "// for this address line, we're assuming the first line is added too and then later one we merge these two during a booking",
      "// this is a custom question",
      "// we don't need validation of values, this is done by our form and values are passed on during registration",
      "//$field['required'] == true, // won't forced required fields and let EM force requirement on this side of registration",
      "//zoom.us/meeting/'.$this->id.'\" target=\"_blank\">'. __('View/Edit on Zoom.us', 'events-manager-zoom').'</a>';",
      "/**\n\t * Loads admin template automatically if static $admin_template is set to a valid path in templates folder.\n\t * Classes with custom forms outside",
      "/**\n\t * Loads external admin class for admin-specific functions.\n\t * @return Zoom_Meeting_Admin Representation of admin class for static calls e.g. Zo",
      "/* @var Zoom_Meeting_Admin $class */",
      "/**\n\t * Array of standard questions permitted by Zoom, organized by key, where a null value indicates a string and an array a list of possible values.",
      "// 'first_name' => null, 'last_name' => null, 'email' => null, //Required, Zoom won't accept these as arguments",
      "/**\n\t * Helper for backwards compatibility in EM 6.2 (Atomic Tickets and Booking Meta update). This function will check the booking meta and convert i",
      "// we have a zoom item, deduct whether pre or post update",
      "// old way, process result",
      "/**\n\t * @param bool $result\n\t * @param \\EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "/* @var Zoom_Meeting $_this */",
      "// if no registration is required for Zoom meeting, we don't register bookings and send the users a join url",
      "// a newly approved booking (possibly approved manually or automatically) - create new registration",
      "// check for PRO attendee form functionality",
      "/* @var $EM_Ticket_Booking \\EM_Ticket_Booking */",
      "// If we can't register individual attendees, register one person, the booking user",
      "// to prevent unnecessary errors",
      "// to prevent unnecessary errors",
      "// get PRO custom booking form fields",
      "//  common address fields linked via gateway settings, if available",
      "// don't register country if it doesn't exist",
      "// now get regular fields and add as zoom or custom questions",
      "// skip already used (name and common-mapped fields) or sensitive fields (passwords)",
      "// add additional fields",
      "// add custom fields",
      "// if approval type is set to manual approval, we approve meetings/webinars on successful bookings.",
      "// previous booking that was saved",
      "// we now either go through all attendees to build array of registrants, or just add the one",
      "/* @var $EM_Ticket_Booking \\EM_Ticket_Booking */",
      "// go through each attendee and either prepare for modification or add them anew",
      "// register all modifications at once",
      "// throw exception after attempting all modifications",
      "// throw exception after attempting all modifications",
      "// change status of booking, nothing more",
      "// email booking registrants",
      "//zoom.us/'.static::$zoom_admin_url_base.'/'.$_this->id",
      "// save booking meta field just in case anything was modified",
      "// add meta in new EM method",
      "/**\n\t * Proides a Join URL for user booking, and also broken-down join URLS for attendees if using Pro Attendee Forms.\n\t * @param string $replace\n\t * ",
      "// get user join URL",
      "/* @var Zoom_Meeting $_this */",
      "/* @var $EM_Ticket_Booking \\EM_Ticket_Booking */",
      "// go through each attendee and add by name and join URL",
      "/**\n\t * @param \\EM_Booking $EM_Booking\n\t */",
      "/* @var $EM_Ticket_Booking \\EM_Ticket_Booking */",
      "// go through each attendee and add by name and join URL",
      "// status is approved here, but not on Zoom, something went wrong so advise to resave booking",
      "// booking not approved yet, no info about registrant",
      "/**\n\t * @param array $ticket_attendee\n\t * @param int $attendee_key\n\t * @param int $ticket_id\n\t * @param \\EM_Booking $EM_Booking\n\t * @param int $meetin",
      "// custom ticket type",
      "// add additional fields",
      "// add custom fields",
      "/**\n\t * @param bool $result\n\t * @param \\EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "/**\n\t * @param \\EM_Booking $EM_Booking\n\t * @return bool\n\t */",
      "// force a booking cancellation on Zoom",
      "// set back for other plugins to be none the wiser",
      "// check if attendee form has the required fields as a minimum",
      "// return empty link if this is a start_url without perms"
    ],
    "length": 53496,
    "preview": "<?php\nnamespace EM_Event_Locations;\nuse EM_OAuth\\Zoom_API, EM_OAuth\\Zoom_API_Client;\nuse EM_Exception, EM_Gateways, EM_Attendees_Form, EM_Booking_Form, EM_Events;\n\n/**\n * Adds a URL event location type by extending EM_Event_Location and registering i",
    "file": "src/code/events-manager-zoom/event-locations/em-event-location-zoom-meeting.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "get_meeting_request_settings",
      "get_post",
      "validate",
      "get_label",
      "load_admin_class"
    ],
    "classes": [
      "Zoom_Webinar",
      "for"
    ],
    "comments": [
      "/**\n * Adds a URL event location type by extending EM_Event_Location and registering itself with EM_Event_Locations\n *\n * @property string id         ",
      "/**\n\t * @var int Specific meeting type defined by Zoom API for creating things like webinars or meetings\n\t */",
      "/**\n\t * @param null $post deprecated, left to prevent warning due to removed $post arg from parent in 5.9.7.8\n\t * @return bool\n\t */",
      "/**\n\t * @return Zoom_Webinar_Admin Representation of admin class for static calls e.g. Zoom_Meeting_Admin\n\t */",
      "/* @var Zoom_Webinar_Admin $class */"
    ],
    "length": 3299,
    "preview": "<?php\nnamespace EM_Event_Locations;\nuse EM_OAuth\\Zoom_API, EM_OAuth\\Zoom_API_Client;\nuse EM_Exception, EM_Gateways, EM_Attendees_Form, EM_Booking_Form;\n\n/**\n * Adds a URL event location type by extending EM_Event_Location and registering itself with ",
    "file": "src/code/events-manager-zoom/event-locations/em-event-location-zoom-webinar.php"
  },
  {
    "type": "php",
    "functions": [
      "load_admin_template",
      "admin_js",
      "admin_field_input",
      "admin_field_select",
      "admin_field_boolean",
      "admin_fields_settings"
    ],
    "classes": [
      "Zoom_Meeting_Admin"
    ],
    "comments": [
      "/**\n * Class used by Zoom Event Locations for admin area functions\n */",
      "/**\n\t * Loads admin template automatically if static $admin_template is set to a valid path in templates folder.\n\t * Classes with custom forms outside",
      "/* @var Zoom_Meeting $zoom_location */",
      "/* @var Zoom_Meeting $static_class */",
      "// re-import bookings info, copied further down",
      "// change default info for a recurring event, depending on whether this is already a zoom event",
      "// modify password behaviour",
      "// we only need to make sure a valid meeting exists and no exceptions thrown",
      "// zoom meeting alraedy created",
      "//zoom.us/'.$zoom_location::$zoom_admin_url_base.'/'.$zoom_location->id.'\" target=\"_blank\">'. __('View/Edit on Zoom.us', 'events-manager-zoom').'</a>'",
      "//zoom.us/'.$static_class::$zoom_admin_url_base.'/trashcan/list\" target=\"_blank\">'.esc_html__('recently deleted', 'events-manager-zoom').'</a>';",
      "// the show() trigger() above/below select2 is a workaround to ensure select2 is visible when initializing due to bug https://github.com/select2/selec",
      "/**\n\t * @param \\EM_Event $EM_Event\n\t * @return mixed|void\n\t */"
    ],
    "length": 24574,
    "preview": "<?php\nnamespace EM_Event_Locations;\nuse EM_OAuth\\Zoom_API, EM_Exception;\n\n/**\n * Class used by Zoom Event Locations for admin area functions\n */\nclass Zoom_Meeting_Admin {\n\t\n\tprivate static $js_init;\n\tprotected static $static_class = 'EM_Event_Locati",
    "file": "src/code/events-manager-zoom/event-locations/em-event-location-zoom-meeting-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "get_post",
      "validate",
      "get_link",
      "get_admin_column",
      "get_label",
      "output",
      "load_admin_template"
    ],
    "classes": [
      "Zoom_Room"
    ],
    "comments": [
      "/**\n * Adds a URL event location type by extending EM_Event_Location and registering itself with EM_Event_Locations\n *\n * @property string id         ",
      "/**\n\t * @param null $post deprecated, left to prevent warning due to removed $post arg from parent in 5.9.7.8\n\t * @return bool\n\t */",
      "//check for a valid room ID, and if so populate the info about the room.",
      "/**\n\t * Loads admin template automatically if static $admin_template is set to a valid path in templates folder.\n\t * Classes with custom forms outside"
    ],
    "length": 4712,
    "preview": "<?php\nnamespace EM_Event_Locations;\nuse EM_OAuth\\Zoom_API, EM_Exception;\n/**\n * Adds a URL event location type by extending EM_Event_Location and registering itself with EM_Event_Locations\n *\n * @property string id          The unique of this zoom ro",
    "file": "src/code/events-manager-zoom/event-locations/em-event-location-zoom-room.php"
  },
  {
    "type": "php",
    "functions": [
      "admin_fields_settings"
    ],
    "classes": [
      "Zoom_Webinar_Admin"
    ],
    "comments": [
      "/**\n\t * @param \\EM_Event $EM_Event\n\t * @return mixed|void\n\t */"
    ],
    "length": 2541,
    "preview": "<?php\nnamespace EM_Event_Locations;\n\nrequire_once('em-event-location-zoom-meeting-admin.php');\n\nclass Zoom_Webinar_Admin extends Zoom_Meeting_Admin {\n\tprotected static $static_class = 'EM_Event_Locations\\Zoom_Webinar';\n\t\n\t/**\n\t * @param \\EM_Event $EM",
    "file": "src/code/events-manager-zoom/event-locations/em-event-location-zoom-webinar-admin.php"
  }
]