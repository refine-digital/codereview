[
  {
    "type": "php",
    "functions": [
      "init",
      "publish_future_post",
      "single_template",
      "post_class",
      "body_class",
      "get_the_excerpt",
      "the_excerpt",
      "the_excerpt_rss",
      "enable_the_content",
      "disable_the_content",
      "the_content",
      "the_date",
      "the_time",
      "the_category",
      "parse_query"
    ],
    "classes": [
      "EM_Event_Post"
    ],
    "comments": [
      "/**\n * Controls how events are queried and displayed via the WordPress Custom Post APIs\n * @author marcus\n *\n */",
      "//Front Side Modifiers",
      "//override single page with formats?",
      "//excerpts can trigger the_content which isn't ideal, so we disable the_content between the first and last excerpt calls within WP logic",
      "//important add this before wp_trim_excerpt hook, as it can screw up things like wp_editor() for WordPress SEO plugin",
      "//display as page template?",
      "//add classes to body and post_class()",
      "//Override post template tags",
      "/**\n\t * Overrides the default post format of an event and can display an event as a page, which uses the page.php template.\n\t * @param string $templat",
      "//do we have a default template to choose for events?",
      "/**\n\t * Overrides the_excerpt if this is an event post type\n\t */",
      "//Some RSS filtering",
      "//do a little check for preview mode and re-insert content from $post",
      "//we don't do extra checks here because WP will have already done the work for us here...",
      "/* Copied from get_the_category_list function, with a few minor edits to make urls work, and removing parent stuff (for now) */",
      "/* End copying */",
      "//Search Query Filtering",
      "//sorts out filtering admin-side as it searches by id",
      "//Let's deal with the scope - default is future",
      "//TODO limit what a user can see admin side for events/locations/recurring events",
      "//otherwise we'll get 404s for past events",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "// next x months means this month (what's left of it), plus the following x months until the end of that month.",
      "//create default time in blog timezone",
      "//admin areas don't need special ordering, so make it simple"
    ],
    "length": 17452,
    "preview": "<?php\n/**\n * Controls how events are queried and displayed via the WordPress Custom Post APIs\n * @author marcus\n *\n */\nclass EM_Event_Post {\n\t\n\tpublic static function init(){\n\t\t//Front Side Modifiers\n\t\tif( !is_admin() ){\n\t\t\t//override single page wit",
    "file": "src/code/events-manager/classes/em-event-post.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "convert_to_screen",
      "get_column_headers",
      "get_person",
      "get_ticket",
      "get_event",
      "get_bookings",
      "get_count",
      "get_status_search",
      "output",
      "output_overlays",
      "output_table",
      "get_headers",
      "get_table",
      "get_row",
      "get_row_csv",
      "sanitize_spreadsheet_cell",
      "get_booking_actions",
      "get_booking_bulk_actions",
      "table_data",
      "get_sortable_columns",
      "get_columns",
      "column_default",
      "extra_tablenav",
      "column_cb",
      "display",
      "single_row",
      "__get",
      "__callStatic",
      "__call"
    ],
    "classes": [
      "EM_Bookings_Table",
      "EM_WP_Screen"
    ],
    "comments": [
      "//Builds a table of bookings, still work in progress...",
      "/**\n\t * associative array of collumns that'll be shown in order from left to right\n\t * \n\t * * key - collumn name in the databse, what will be used whe",
      "/**\n\t * Asoociative array of available collumn keys and corresponding headers, which will be used to display this table of bookings\n\t * @var array\n\t *",
      "/**\n\t * Object we're viewing bookings in relation to.\n\t * @var object\n\t */",
      "/**\n\t * Index key used for looking up status information we're filtering in the booking table \n\t * @var string\n\t */",
      "/**\n\t * Associative array of status information.\n\t * \n\t * * key - status index value\n\t * * value - associative array containing keys\n\t * ** label - th",
      "/**\n\t * Set to a unique id made up of $this->id dash rand() int\n\t * @var string\n\t */",
      "/**\n\t * Maximum number of rows to show\n\t * @var int\n\t */",
      "// for WP_List_Table",
      "// Basic Vars for List_Table",
      "//build template of possible collumns",
      "// will soon be removed and merged during generation from cols_events_tamplate",
      "// will soon be removed and merged during generation from cols_events_tamplate",
      "// will soon be removed and merged during generation from cols_events_tamplate",
      "//add tickets to template if we're showing rows by booking-ticket",
      "//calculate collumns if post requests",
      "//load collumn view settings",
      "//save collumns depending on context and user preferences",
      "//check if user has settings for object type",
      "//save view settings for next time",
      "//clean any columns from saved views that no longer exist",
      "// handle convert_to_screen lacking in places",
      "/**\n\t * @return EM_Person|false\n\t */",
      "/**\n\t * @return EM_Ticket|false\n\t */",
      "/**\n\t * @return $EM_Event|false\n\t */",
      "/**\n\t * Gets the bookings for this object instance according to its settings\n\t * @param boolean $force_refresh\n\t * @return EM_Bookings\n\t */",
      "//searching bookings with a specific ticket",
      "//bookings for an event",
      "//all bookings for a status",
      "/**\n\t * @deprecated use WP_List_Table functions now\n\t * @return void\n\t */",
      "//won't be overwritten by JS",
      "//won't be overwritten by JS",
      "// join all fields into one set of cols, with general taking precendence over events, then tickets then attendees",
      "//get bookings and refresh",
      "/*\t\t\t\t\t\t\n\t\t\t\t\t\t\t<th class='manage-column column-cb check-column' scope='col'>\n\t\t\t\t\t\t\t\t<input class='select-all' type=\"checkbox\" value='1' />\n\t\t\t\t\t\t\t</",
      "/*\n\t\t\t\t\t\t\t\t<th scope=\"row\" class=\"check-column\" style=\"padding:7px 0px 7px;\"><input type='checkbox' value='<?php echo $EM_Booking->booking_id ?>' name",
      "/* @var $EM_Booking EM_Booking */",
      "/* @var $EM_Ticket_Booking EM_Ticket_Booking */",
      "/* for later - col ordering!\n\t\t\t\tif($this->orderby == $col){\n\t\t\t\t\tif($this->order == 'ASC'){\n\t\t\t\t\t\t$headers[] = '<a class=\"em-bookings-orderby\" href=\"",
      "/**\n\t * @param Object $object\n\t * @return array()\n\t */",
      "/* @var $EM_Ticket EM_Ticket */",
      "/* @var $EM_Ticket_Booking EM_Ticket_Booking */",
      "/* @var $EM_Booking EM_Booking */",
      "//backwards compatibility, previously $format was $csv which was a boolean",
      "// unrecognized $object, return empty padded array",
      "//is col a user col or else?",
      "//TODO fix urls so this works in all pages in front as well",
      "//escape all HTML if destination is HTML or not defined",
      "//use the above filter instead for better performance",
      "//csv/excel escaping",
      "//remove things like &amp; which may have been saved to the DB directly",
      "/**\n\t * @param EM_Booking $EM_Booking\n\t * @return mixed\n\t */",
      "//if approvals are off, treat as a 1",
      "//awaiting online payment - similar to pending but always needs approval in EM Free",
      "//awaiting payment - similar to pending but always needs approval in EM Free",
      "/**\n\t * Get the table data\n\t *\n\t * @return array\n\t */",
      "/**\n\t * Define the sortable columns\n\t *\n\t * @return array\n\t */",
      "// some specific fields that still map",
      "/**\n\t * Override the parent columns method. Defines the columns to use in your listing table\n\t *\n\t * @return array\n\t */",
      "/**\n\t * Define what data to show on each column of the table\n\t *\n\t * @param  EM_Booking   $EM_Booking     Data\n\t * @param  string       $column_name  ",
      "//is col a user col or else?",
      "//TODO fix urls so this works in all pages in front as well",
      "//escape all HTML if destination is HTML or not defined",
      "//use the above filter instead for better performance",
      "//csv/excel escaping",
      "// add responsive extra data",
      "/* WIP for frontend\n\t\t\t\tob_start();\n\t\t\t\t?>\n\t\t\t\t<div class=\"em-table-row-responsive-meta\">\n\t\t\t\t\t<?php echo $EM_Booking->get_event()->output('#_EVENTLIN",
      "// ajax status icons",
      "/* if( $EM_Event !== false ): ?>\n\t\t\t\t<?php esc_html_e('Displaying Event','events-manager'); ?> : <?php echo esc_html($EM_Event->event_name); ?>\n\t\t\t<?p",
      "// booking deleted, no editing/actions possible",
      "//won't be overwritten by JS",
      "//won't be overwritten by JS"
    ],
    "length": 51233,
    "preview": "<?php\nuse EM\\List_Table;\n\n//Builds a table of bookings, still work in progress...\nclass EM_Bookings_Table extends EM\\List_Table {\n\t/**\n\t * associative array of collumns that'll be shown in order from left to right\n\t * \n\t * * key - collumn name in the",
    "file": "src/code/events-manager/classes/em-bookings-table.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "single_template",
      "post_class",
      "body_class",
      "get_the_excerpt",
      "the_excerpt",
      "enable_the_content",
      "disable_the_content",
      "the_content",
      "parse_query"
    ],
    "classes": [
      "EM_Location_Post"
    ],
    "comments": [
      "//Front Side Modifiers",
      "//override single page with formats?",
      "//override excerpts?",
      "//excerpts can trigger the_content which isn't ideal, so we disable the_content between the first and last excerpt calls within WP logic",
      "//display as page or other template?",
      "//add classes to body and post_class()",
      "/**\n\t * Overrides the default post format of a location and can display a location as a page, which uses the page.php template.\n\t * @param string $tem",
      "//do we have a default template to choose for events?",
      "/**\n\t * Overrides the_excerpt if this is an location post type\n\t */",
      "//we don't do extra checks here because WP will have already done the work for us here..."
    ],
    "length": 5377,
    "preview": "<?php\nclass EM_Location_Post {\n\tpublic static function init(){\n\t\t//Front Side Modifiers\n\t\tif( !is_admin() ){\n\t\t\t//override single page with formats? \n\t\t\tadd_filter('the_content', array('EM_Location_Post','the_content'));\n\t\t\t//override excerpts?\n\t\t\tif",
    "file": "src/code/events-manager/classes/em-location-post.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "template",
      "the_content",
      "parse_query",
      "wpseo_breadcrumb_links",
      "static_binding"
    ],
    "classes": [
      "EM_Tags_Frontend",
      "EM_Tag_Taxonomy"
    ],
    "comments": [
      "//converted into a constant value during init()",
      "//needed until 5.3 minimum is enforced for late static binding",
      "//awaiting LSB in PHP 5.3",
      "//These following functions can be removed when PHP 5.3 is minimum and LSB is available",
      "//we do some double-checking here to prevent running self::static_binding() during the self::template() function when WP_Query is called.",
      "/**\n\t * Temporary function until WP requires PHP 5.3, so that we can make use of late static binding. \n\t * Until then, all functions needing LST shoul",
      "//backwards compatibility"
    ],
    "length": 2151,
    "preview": "<?php\nclass EM_Tags_Frontend extends EM_Taxonomy_Frontend {\n\t\n\tpublic static $taxonomy_name = 'event-tag'; //converted into a constant value during init()\n\tpublic static $this_class = 'EM_Tags_Frontend'; //needed until 5.3 minimum is enforced for lat",
    "file": "src/code/events-manager/classes/em-tags-frontend.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "flush",
      "post_type_archive_link",
      "redirection",
      "rewrite_rules_array",
      "url",
      "option_update",
      "query_vars",
      "init_objects",
      "em_get_my_bookings_url",
      "em_get_events_admin_url"
    ],
    "classes": [
      "EM_Permalinks"
    ],
    "comments": [
      "//flush after init, in case there are themes adding cpts etc.",
      "/**\n\t\t * will redirect old links to new link structures.\n\t\t */",
      "//is this a querystring url?",
      "// Adding a new rule",
      "//get the slug of the event page",
      "//event calendar date search",
      "//ignore this rule if events page is the home page",
      "//compatible rss page",
      "//won't apply on homepage",
      "//make sure we hard-code rewrites for child pages of events",
      "//single event booking form with slug    //check if child page has children",
      "//hard code homepage child pages",
      "//single event booking form with slug    //check if child page has children",
      "//global links hard-coded",
      "//MS Mode has slug also for global links",
      "//single event from subsite",
      "//add redirection for backwards compatability",
      "//single location page",
      "//single category page slug",
      "//add a rule that ensures that the events page is found and used over other pages",
      "//event calendar date search",
      "//event calendar date search paged",
      "//only added if bookings page isn't assigned",
      "//page for users to manage bookings",
      "//check for potentially conflicting posts with the same slug as events",
      "//won't apply on homepage",
      "//make sure we hard-code rewrites for child pages of events",
      "//single event booking form with slug",
      "//check if child page has children",
      "//Check the event category and tags pages, because if we're overriding the pages and they're not within the Events page hierarchy it may 404",
      "//if taxonomy base permalink is same as page permalink",
      "//we are using a categories page, so we add it to permalinks if it's not a parent of the events page",
      "//make sure there's no page with same name as archives, that should take precedence as it can easily be deleted wp admin side",
      "//make sure there's no page with same name as archives, that should take precedence as it can easily be deleted wp admin side",
      "//If in MS global mode and locations are linked on same site",
      "//single event booking form with slug",
      "//add ical CPT endpoints",
      "//add ical taxonomy endpoints",
      "//set the dynamic rule for this taxonomy",
      "//add RSS location CPT endpoint",
      "/**\n\t\t * deprecated, use get_post_permalink() from now on or the output function with a placeholder\n\t\t * Generate a URL. Pass each section of a link a",
      "/*&& !defined('EM_DISABLE_PERMALINKS')*/",
      "/**\n\t\t * checks if the events page has changed, and sets a flag to flush wp_rewrite.\n\t\t * @param mixed $val\n\t\t * @return mixed\n\t\t */",
      "// Adding the id var so that WP recognizes it",
      "/**\n\t\t * Not the \"WP way\" but for now this'll do!\n\t\t * This function tricks WP into thinking an EM static home page is just a page so that query_vars ",
      "//check some homepage conditions",
      "// comment long after this is written - pretty sure this prevents seach query and pagination issues on the home page when an event page is set as the ",
      "// WP will not technically expect this to be the home page, but the front page only",
      "//dirty rss condition",
      "//Specific links that aren't generated by objects",
      "/**\n * returns the url of the my bookings page, depending on the settings page and if BP is installed.\n * @return string\n */",
      "// @todo add filter for bookings url, remove bp condition and add it to bp-em-core.php",
      "/**\n * Gets the admin URL for editing events. If called from front-end and there's a front-end edit events page, that will be\n * returned, otherwise a"
    ],
    "length": 16944,
    "preview": "<?php\n\nif( !class_exists('EM_Permalinks') ){\n\tclass EM_Permalinks {\n\t\tstatic $em_queryvars = array(\n\t\t\t'event_id','event_slug', 'em_redirect',\n\t\t    'recurrence_id',\n\t\t\t'location_id','location_slug',\n\t\t\t'person_id',\n\t\t\t'booking_id',\n\t\t\t'category_id',",
    "file": "src/code/events-manager/classes/em-permalinks.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "add",
      "remove",
      "network_add",
      "network_remove",
      "admin_notices",
      "get_notice",
      "network_admin_notices",
      "output",
      "dismiss_admin_notice",
      "admin_footer"
    ],
    "classes": [
      "EM_Admin_Notices"
    ],
    "comments": [
      "/**\n * Handles the registration and display of admin notices, including storage and retrieval of individual EM_Admin_Notice notice objects. \n * @since",
      "/**\n\t * Flag for whether or not to add dismissable notice JS to admin page footer.\n\t * @var boolean\n\t */",
      "/**\n\t * Initialize EM Admin Notices by adding the relevant hooks. \n\t */",
      "/**\n\t * Adds an admin notice to the site. If $network is set to true, notice will be saved at network level.\n\t * If a string is provided as $EM_Admin_",
      "//make sure we are actually in multisite!",
      "//we store the data regarldess of whether a message will require a hook, since it contains location and caps considtions",
      "//start building data",
      "//we only skip this if simply a key is provided initially in $EM_Admin_Notice",
      "/**\n\t * Remove an admin notice. If $network is true, then a network-level admin notice will be removed.\n\t * @param string $notice_key\n\t * @param strin",
      "//make sure we are actually in multisite!",
      "/**\n\t * Adds admin notice to network rather than specific blog. Equivalent to self::add( $EM_Admin_Notice, true );\n\t * @see EM_Admin_Notices::add()\n\t ",
      "/**\n\t * Removes admin notice from network rather than specific blog. Equivalent to self::remove( $EM_Admin_Notice, true );\n\t * @see EM_Admin_Notices::",
      "/**\n\t * Output the admin notices we need to output now. If $network is true, MultiSite network messages will be output.\n\t * @param string $network\n\t *",
      "//we may have something to show, so we make sure that there's something to show right now",
      "//to avoid extra loading etc. we weed out time-based notices that aren't triggered right now",
      "//we have a match, so we add this to $notices",
      "//build notice object",
      "/**\n\t * Outputs admin notices at network level, same as EM_Admin_Notices::admin_notices(true)\n\t * @see EM_Admin_Notices::admin_notices()\n\t */",
      "/**\n\t * Outputs admin notices and calls the dismissable JS to be output at footer of admin page.\n\t * If $network is true, only MultiSite network-level",
      "//output the notice if meant to",
      "/**\n\t * If called via AJAX, the notice will be removed. \n\t */",
      "//user-specific notices are flagged on the user-level",
      "/**\n\t * Outputs JS for dismissing notices. \n\t */"
    ],
    "length": 8961,
    "preview": "<?php\n/**\n * Handles the registration and display of admin notices, including storage and retrieval of individual EM_Admin_Notice notice objects. \n * @since 5.8.2.0\n */\nclass EM_Admin_Notices {\n\t\n\t/**\n\t * Flag for whether or not to add dismissable no",
    "file": "src/code/events-manager/classes/em-admin-notices.php"
  },
  {
    "type": "php",
    "functions": [
      "send",
      "load_phpmailer",
      "return_texthtml",
      "add_attachments_to_mailer",
      "delete_email_attachments",
      "get_attachments_dir",
      "add_email_attachment"
    ],
    "classes": [
      "EM_Mailer"
    ],
    "comments": [
      "/**\n * phpmailer support\n *\n */",
      "/**\n\t * if any errors crop up, here they are\n\t * @var array\n\t */",
      "/**\n\t * Array of attachments which will be added to WP_Mail's phpmailer just before sending, and subsequently emptied.\n\t * @var array\n\t */",
      "/**\n\t * Send an email via the EM-saved settings.\n\t * @param $subject\n\t * @param $body\n\t * @param $receiver\n\t * @param $attachments\n\t * @param $args\n\t ",
      "//TODO add an EM_Error global object, for this sort of error reporting. (@marcus like StatusNotice)",
      "//decode entities, but run kses first just in case users use placeholders containing html",
      "//create filter to change content type to html in wp_mail",
      "//prep attachments for WP Mail, which only accept a path",
      "//send and handle errors",
      "//unload attachments hook",
      "/* @var PHPMailer $phpmailer */",
      "//$mail->SMTPDebug = true;",
      "//if port is supplied via the host address, give that precedence over the port setting",
      "// This is the from name in the email, you can put anything you like here",
      "//$mail will still be modified",
      "//$mail can still be modified",
      "//$mail can still be modified",
      "/**\n\t * load phpmailer classes\n\t */",
      "/**\n\t * Shorthand function for filters to return 'text/html' string.\n\t * @return string 'text/html'\n\t */",
      "/**\n\t * WP_Mail doesn't accept attachment meta, only an array of paths, this function post-fixes attachments to the PHPMailer object.\n\t * @param PHPMa",
      "/**\n\t * Returns the path of the attachments folder, creating it if non-existent. Returns false if folder could not be created.\n\t * A .htaccess file is",
      "//get and possibly create attachment directory path",
      "//try to make a directory and create an .htaccess file",
      "//could not create directory",
      "//add .htaccess file to prevent access to folder by guessing filenames",
      "/**\n\t * Adds file to email attachments folder, which defaults to wp-content/uploads/em-email-attachments/ and returns the location of said file, false"
    ],
    "length": 9326,
    "preview": "<?php\n/**\n * phpmailer support\n *\n */\nclass EM_Mailer {\n\t\n\t/**\n\t * if any errors crop up, here they are\n\t * @var array\n\t */\n\tpublic $errors = array();\n\t/**\n\t * Array of attachments which will be added to WP_Mail's phpmailer just before sending, and s",
    "file": "src/code/events-manager/classes/em-mailer.php"
  },
  {
    "type": "php",
    "functions": [
      "get",
      "set",
      "add",
      "remove",
      "site_get",
      "site_set",
      "site_add",
      "site_remove"
    ],
    "classes": [
      "deal",
      "EM_Options"
    ],
    "comments": [
      "/**\n * An interface for the dbem_data option stored in wp_options as a serialized array. \n * This option can hold various information which can be sto",
      "/**\n\t * Get a specific setting form the EM options array. If no value is set, an empty array is provided by default.\n\t * @param string $option_name\n\t ",
      "/**\n\t * Set a value in the EM options array. Returns result of storage, which may be false if no changes are made.\n\t * @param string $option_name\n\t * ",
      "/**\n\t * Adds a value to an specific key in the EM options array, and assumes the option name is an array.\n\t * Returns true on success or false saving ",
      "/**\n\t * Removes an item from an array in the EM options array, it assumes the supplied option name is an array.\n\t *\n\t * @param string $option_name\n\t *",
      "/**\n\t * @see EM_Options::get()\n\t * @param string $option_name\n\t * @param mixed $default\n\t * @param string $dataset\n\t * @return boolean\n\t */",
      "/**\n\t * @see EM_Options::set()\n\t * @param string $option_name\n\t * @param mixed $option_value\n\t * @param string $dataset\n\t * @return boolean\n\t */",
      "/**\n\t * @see EM_Options::add()\n\t * @param string $option_name\n\t * @param string $option_key\n\t * @param mixed $option_value\n\t * @param string $dataset\n",
      "/**\n\t * @see EM_Options::remove()\n\t * @param string $option_name\n\t * @param string $option_key\n\t * @param string $dataset\n\t * @return boolean\n\t */"
    ],
    "length": 4503,
    "preview": "<?php\n/**\n * An interface for the dbem_data option stored in wp_options as a serialized array. \n * This option can hold various information which can be stored in one record rather than individual records in wp_options.\n * The functions in this class",
    "file": "src/code/events-manager/classes/em-options.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "template",
      "the_content",
      "remove_em_the_content",
      "parse_query",
      "get_page_id",
      "wpseo_breadcrumb_links",
      "flip_the_query"
    ],
    "classes": [
      "EM_Taxonomy_Frontend",
      "of"
    ],
    "comments": [
      "/**\n\t * The name of this taxonomy, e.g. event-categories, which is defined in child class.\n\t * @var string\n\t */",
      "/**\n\t * The name of the child class, used for now whilst late static binding isn't guaranteed since we may be running on PHP <5.3\n\t * Once PHP 5.3 is ",
      "/**\n\t * Currently used to instantiate a class of the specific term. Eventually we could just use EM_Taxonomy since these will be standardized function",
      "/**\n\t * Name of taxonomy for reference in saving to database, e.g. category will be used to save category-image.\n\t * This may differ from the name of ",
      "/**\n\t * Overrides archive pages e.g. locations, events, event categories, event tags based on user settings\n\t * @param string $template\n\t * @return st",
      "//use this for situations where other plugins need to access 'original' query data, which you can switch back/forth.",
      "//less chance for things to go wrong with themes etc. so just reset the WP_Query to think it's a page rather than taxonomy",
      "//not needed by WP SEO Breadcrumbs, we deal with it in a filter further down - wpseo_breadcrumb_links",
      "//we won't do this to the else section because we should deprecate it due to its instability",
      "//we don't have a categories page, so we create a fake page",
      "//tweak flags for determining page type",
      "//set taxonomy id to globals and query object",
      "//we assign global taxononmy id just in case other themes/plugins do something out of the ordinary to WP_Query",
      "//category becomes a page",
      "//come in slightly early and consider other plugins",
      "// Meta Tag Manager Tweaks",
      "//Yoast WP SEO Tweals",
      "//could be em_category_name or em_tag_name",
      "/**\n\t * Removes the em_content filter from firing, which should be triggered by wp_head after EM has added this filter\n\t */",
      "/**\n\t * Parses the query on regular taxonomy archives so events are cronologically ordered.\n\t * @param WP_Query $wp_query\n\t */",
      "//in case events aren't publicly searchable due to 'bug' in WP - https://core.trac.wordpress.org/ticket/17592",
      "/**\n\t * Switches the query back/forth from the original query if EM has interferred to add formatting for taxonomy pages.\n\t * Useful if you want plugi"
    ],
    "length": 9785,
    "preview": "<?php\nclass EM_Taxonomy_Frontend {\n\t\n\t/**\n\t * The name of this taxonomy, e.g. event-categories, which is defined in child class.\n\t * @var string\n\t */\n\tpublic static $taxonomy_name = 'EM_TAXONOMY_NAME';\n\t/**\n\t * The name of the child class, used for n",
    "file": "src/code/events-manager/classes/em-taxonomy-frontend.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get_post",
      "save",
      "save_index",
      "has",
      "get_first",
      "get_ids",
      "get_slugs",
      "get_event",
      "get",
      "output",
      "get_pagination_links",
      "get_post_search",
      "get_default_search",
      "rewind",
      "current",
      "key",
      "next",
      "valid",
      "count"
    ],
    "classes": [
      "EM_Taxonomy_Terms",
      "used"
    ],
    "comments": [
      "/**\n\t * String representing the search action used in AJAX searches which will be available in child function when PHP 5.3 brings us LSB\n\t * @var stri",
      "/**\n\t * Blank instance of this class used in the static functions until PHP 5.3 brings us LSB\n\t * @var EM_Taxonomy_Terms\n\t */",
      "/**\n\t * Array of EM_Taxonomy_Term child objects for a specific event\n\t * @var array\n\t */",
      "/**\n\t * Event ID of this set of taxonomy terms\n\t * @var int\n\t */",
      "/**\n\t * Post ID of this set of taxonomy terms\n\t * @var int\n\t */",
      "/**\n\t * Creates an EM_Taxonomy_Terms instance, currently accepts an EM_Event object (gets all Taxonomy Terms for that event) or array of any EM_Taxono",
      "//Creates a blank taxonomies object if needed",
      "//In MS Global mode, we also save taxonomy meta information for global lookups",
      "//delete terms from event",
      "/* @var EM_Taxonomy_Term $EM_Taxonomy_Term */",
      "/**\n\t * Gets the event for this object, or a blank event if none exists\n\t * @return EM_Event\n\t */",
      "//Quick version, we can accept an array of IDs, which is easy to retrieve",
      "//Array of numbers, assume they are taxonomy IDs to retreive",
      "//We assume it's either an empty array or array of search arguments to merge with defaults",
      "//If we want results directly in an array, why not have a shortcut here? We don't use this in code, so if you're using it and filter the em_{taxonomy}",
      "//Make returned results EM_Taxonomy_Term child objects",
      "//When looping, we can replace EM_Taxonomy_Term global with the current event in the loop",
      "//get page number if passed on by request (still needs pagination enabled to have effect)",
      "//Can be either an array for the get search or an array of EM_Taxonomy_Term objects",
      "//we count overall terms here",
      "//What format shall we output this to, or use default",
      "//Add headers and footers to output",
      "//we're using the default format, so if a custom format header or footer is supplied, we can override it, if not use the default",
      "//we're using a custom format, so if a header or footer isn't specifically supplied we assume it's blank",
      "//Pagination (if needed/requested)",
      "//Show the pagination links (unless there's less than 10 events, or the custom limit)",
      "//FIXME check if reference is ok when restoring object, due to changes in php5 v 4",
      "//get default args if we're in a search, supply to parent since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "//supply $accepted_args to parent argument since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "/* \n\t * Adds custom calendar search defaults\n\t * @param array $array_or_defaults may be the array to override defaults\n\t * @param array $array\n\t * @re",
      "//added from get_terms, so they don't get filtered out",
      "//sort out whether defaults were supplied or just the array of search values",
      "//this shouldn't change regardless",
      "//clean up for WP functions",
      "//Iterator Implementation"
    ],
    "length": 14964,
    "preview": "<?php\nclass EM_Taxonomy_Terms extends EM_Object implements Iterator, Countable{\n\n\tprotected $is_ms_global = false;\n\tprotected $meta_key = 'event-taxonomy';\n\tprotected $taxonomy = 'event-taxonomy';\n\tprotected $terms_name = 'taxonomies';\n\tprotected $te",
    "file": "src/code/events-manager/classes/em-taxonomy-terms.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__sleep",
      "get_post",
      "save",
      "validate",
      "get_spaces",
      "get_price",
      "get_price_with_taxes",
      "calculate_price",
      "get_booking",
      "get_ticket",
      "delete",
      "output",
      "can_manage",
      "__debugInfo"
    ],
    "classes": [
      "EM_Ticket_Booking"
    ],
    "comments": [
      "// always 1 as of v6.1",
      "/**\n\t * Any ticket meta stored in the em_ticket_bookings_meta table\n\t * @var array\n\t */",
      "/**\n\t * Contains ticket object\n\t * @var EM_Ticket\n\t */",
      "/**\n\t * Contains the booking object of this\n\t * @var EM_Booking\n\t */",
      "/**\n\t * Creates ticket object and retreives ticket data (default is a blank ticket object). Accepts either array of ticket data (from db) or a ticket ",
      "// if we get supplied this info we should load the references so we don't need to later",
      "//Retreiving from the database",
      "//Save into the object",
      "// sort out uuid if not assigned already",
      "// fallback, create a consistent but unique MD5 hash in case it's not saved for some reason.",
      "/**\n\t * Cleans up serialization of this object and returns only relevant fields. For EM_Bookings that get serialized but aren't saved yet with an ID, ",
      "/**\n\t * Saves the ticket into the database, whether a new or existing ticket\n\t * @return boolean\n\t */",
      "//Now we save the ticket",
      "//event wouldn't exist before save, so refresh id",
      "//add the true to remove the nulls",
      "//TODO better error handling",
      "// first check that the uuid is unique, if not change it and repeat until unique",
      "// now insert with unique uuid",
      "//no point saving a booking with no spaces",
      "//Step 2 - Save ticket meta",
      "// we go down one level of array",
      "/**\n\t * Validates the ticket during a booking\n\t * @return boolean\n\t */",
      "/**\n\t * Get the total number of spaces booked for this ticket within this booking. As of 6.1 it's always one space.\n\t * @return int\n\t */",
      "/**\n\t * Gets the total price for these tickets. If $format is set to true, the value returned is a price string with currency formatting.\n\t * @param b",
      "// depracated - preferable to use the _calculate_price filter",
      "//do some legacy checking here for bookings made prior to 5.4, due to how taxes are calculated",
      "//check multisite nuances",
      "//MultiSite AND Global tables enabled - get settings for blog that published the event",
      "//get booking from current site, whether or not we're in MultiSite",
      "//this booking never had a tax rate fixed to it (i.e. prior to v5.4), and according to legacy settings, taxes were applied to this price",
      "//we now calculate price of ticket bookings without taxes, so remove the tax",
      "//return price formatted or not",
      "//get the ticket, calculate price on spaces",
      "/**\n\t * Smart booking locator, saves a database read if possible.\n\t * @return EM_Booking \n\t */",
      "/**\n\t * Gets the ticket object this booking belongs to, saves a reference in ticket property\n\t * @return EM_Ticket\n\t */",
      "/**\n\t * I wonder what this does....\n\t * @return boolean\n\t */",
      "//cannot delete ticket",
      "/**\n\t * Outputs ticket information, mainly reserved for add-ons that may extend ticket functionality, such as Pro.\n\t * @param $format\n\t * @param $targ",
      "//Check if the language we want exists, if not we take the first language there",
      "//calculate lengths to delete placeholders",
      "/* For now there's nothing to switch, pro and others override this\n\t\t\t$replace = '';\n\t\t\tswitch( $result ){\n\t\t\t\tdefault:\n\t\t\t\t\t$replace = $full_result;\n",
      "/**\n\t * Can the user manage this ticket?\n\t */"
    ],
    "length": 14725,
    "preview": "<?php\nclass EM_Ticket_Booking extends EM_Object{\n\t//DB Fields\n\tvar $ticket_booking_id;\n\tvar $ticket_uuid;\n\tvar $booking_id;\n\tvar $ticket_id;\n\tvar $ticket_booking_price;\n\tvar $ticket_booking_spaces = 1; // always 1 as of v6.1\n\tvar $fields = array(\n\t\t'",
    "file": "src/code/events-manager/classes/em-ticket-booking.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "form_add",
      "form_edit",
      "save",
      "delete",
      "static_binding"
    ],
    "classes": [
      "extends",
      "properties",
      "via",
      "EM_Categories_Admin"
    ],
    "comments": [
      "/**\n * This class extends the EM_Taxonomy_Admin and adds category images and colors to the admin area.\n * \n * Currently, all functions here serve the ",
      "//converted into a constant value during init()",
      "//needed until 5.3 minimum is enforced for late static binding",
      "/**\n\t * Temporary function until WP requires PHP 5.3, so that we can make use of late static binding. \n\t * Until then, all functions needing LST shoul"
    ],
    "length": 2308,
    "preview": "<?php\n/**\n * This class extends the EM_Taxonomy_Admin and adds category images and colors to the admin area.\n * \n * Currently, all functions here serve the purpose of getting around lack of late static binding in PHP < 5.3.\n * Eventually when PHP 5.3",
    "file": "src/code/events-manager/classes/em-categories-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get_ticket_bookings",
      "__get",
      "__call",
      "__sleep",
      "get_post",
      "validate",
      "get_spaces",
      "get_ticket",
      "delete",
      "__debugInfo"
    ],
    "classes": [
      "EM_Ticket_Bookings",
      "functions"
    ],
    "comments": [
      "/**\n * Groups up ticket bookings for a single ticket type, simlar to EM_Tickets_Bookings but this is specific to one ticket type.\n * This essentially ",
      "/**\n\t * @var EM_Ticket_Booking[]\n\t */",
      "/**\n\t * The ticket ID associated with these ticket bookings\n\t * @var int\n\t */",
      "/**\n\t * Ensures extended parent class functions use the right filter name\n\t * @var string\n\t */",
      "/**\n\t * Adds EM_Ticket_Booking objects to the internal array or alternatively\n\t * @param EM_Ticket_Booking[]|array  Array of tiket booking objects or ",
      "// try to load a booking in any way possible, preferably by a passed reference rather than ID",
      "// we may have been passed an array of options we can use to create multiple single EM_Ticket_Booking objects",
      "// get a booking ID and object (if booking not made, we need a booking object reference)",
      "// booking id may not exist yet but we must have a booking reference",
      "// we don't necessarily need to create spaces, get_post will sort that out for us",
      "// create multiple single-space bookings here",
      "// Load ticket bookings if needed",
      "/**\n\t * Get specific EM_Ticket_Booking properties we already know here, especially for code that assumes EM_Ticket_Booking still has more than one spa",
      "/**\n\t * Safety measure in case methods belonging to $EM_Ticket_Booking are called that aren't defined here.\n\t * @param $function\n\t * @param $args\n\t * ",
      "// handle some functions that may cause problems if old scripts assume we're on a direct EM_Ticket_Booking",
      "/**\n\t * Return relevant fields that will be used for storage, excluding things such as event and ticket objects that should get reloaded\n\t * @return s",
      "/**\n\t * @return bool\n\t */",
      "// first, determine how many spaces we're dealing with here and if we're adding or subtracting tickets",
      "// check first if we're missing uuids, remove them already",
      "// now if we're still short, remove some off the end of the array",
      "// recheck spaces since above may have removed some",
      "// adding more? add new ones to the end",
      "// subtracting? shift stuff off the end if all uuids are provided, otherwise remove the missing uuids",
      "// keep some add rest to array",
      "// we'll also grab the first available $_REQUEST[ticket_id][tickets_bookings][id] that's not a uuid or %n (template) and reserve it for any newly crea",
      "// we'll maintain the order of these keys so ticket_booking objects can also have reordering (eventually)",
      "// run a get_post() on these ones too to hook any info into each ticket booking",
      "// add any tickets to be deleted here and empty the array (although in theory, we'd be deleting a booking entirely in this scenario)",
      "// if we're editing the booking, this is the real number of spaces we're booking",
      "// we're editing the booking, meaning we need to calculate then number of spaces we deleted into the total spaces we had",
      "// then add those spaces back to being available spaces, as if we're booking again",
      "// check if ticket is available to the user the booking is associated to",
      "// TODO current implementation won't work because we're trying to validate potentially a guest that beomes a user, therefore a guest ticket can be boo",
      "// TODO I think we probably need to circumvent on the manual_booking level rather than here... or make sure we're validating in some smarter way",
      "/**\n\t * Counts how many spaces it has (essentially, how many EM_Ticket_Booking objects it has, since each one represents one space as of v6.1\n\t * @par",
      "/**\n\t * Delete all ticket bookings\n\t * @return boolean\n\t */"
    ],
    "length": 13843,
    "preview": "<?php\n/**\n * Groups up ticket bookings for a single ticket type, simlar to EM_Tickets_Bookings but this is specific to one ticket type.\n * This essentially marries a EM_Tickets_Bookings with EM_Ticket_Booking, it can be used as one or the other with ",
    "file": "src/code/events-manager/classes/em-ticket-bookings.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get_error_code",
      "get_message",
      "get_messages",
      "is_wp_error",
      "get_wp_error"
    ],
    "classes": [
      "that",
      "EM_Exception"
    ],
    "comments": [
      "//in case we include it in EM core code",
      "/**\n\t * Extended Exception class that allows for creating multiple error messages in an exception as an array and outputting them together at once.\n\t ",
      "/**\n\t\t * @var WP_Error\n\t\t */",
      "/**\n\t\t * @var array\n\t\t */",
      "/**\n\t\t * @var int|string Allows for a custom code to be used rather than an integer.\n\t\t */",
      "/**\n\t\t * Exception constructor.\n\t\t * @param string $error\n\t\t * @param int $code\n\t\t * @param null $previous\n\t\t */",
      "/* @var WP_Error $error */",
      "/**\n\t\t * Returns either a string code reference, or a regular Exception code number.\n\t\t * @return int|string\n\t\t */",
      "/**\n\t\t * Provides a paragraph-formatted message which may contain multiple paragraphs for multiple errors.\n\t\t * @return string\n\t\t */",
      "/**\n\t\t * @return array|string\n\t\t */",
      "/**\n\t\t * Whether or not this exception was triggered by a WP_Error\n\t\t * @return bool\n\t\t */",
      "/**\n\t\t * Returns exception in WP_Error format, whether or not it was originally a WP_Error in the first place.\n\t\t * @return WP_Error\n\t\t */"
    ],
    "length": 2764,
    "preview": "<?php\n//in case we include it in EM core code\nif( !class_exists('EM_Exception') ){\n\t/**\n\t * Extended Exception class that allows for creating multiple error messages in an exception as an array and outputting them together at once.\n\t * Class Exceptio",
    "file": "src/code/events-manager/classes/em-exception.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_head",
      "admin_notices",
      "admin_notices_filter",
      "wp_insert_post_data",
      "save_post",
      "refresh_cache",
      "before_delete_post",
      "trashed_post",
      "untrash_post",
      "untrashed_post",
      "meta_boxes",
      "meta_box_metadump",
      "meta_box_where",
      "meta_box_attributes",
      "meta_box_anonymous"
    ],
    "classes": [
      "EM_Location_Post_Admin"
    ],
    "comments": [
      "//only needed if editing post",
      "//validate post meta before saving is done",
      "//set to 1 so metadata gets saved ASAP",
      "/**\n\t * Hooks in just before a post is saves and does a quick post meta validation. \n\t * This prevents the location from being temporarily published a",
      "//If we're saving a location via EM_Location::save() we should never run the below",
      "//we don't need to save anything here, we don't use this action",
      "//this is only run if we know form data was submitted, hence the nonce",
      "//Handle Errors by making post draft",
      "/**\n\t * Once the post is saved, saves EM meta data\n\t * @param int $post_id\n\t */",
      "//If we're saving a location via EM_Location::save() we should never run the below",
      "//we don't need to save anything here, we don't use this action",
      "//Handle Errors by making post draft",
      "//Always seems to redirect, so we make it static",
      "//Always seems to redirect, so we make it static",
      "//flag a cache refresh if we get here",
      "//do a quick and dirty update",
      "//check for existence of index",
      "//before we save anything",
      "//flag a cache refresh if we get here",
      "/**\n\t * Refreshes the cache of the current global $EM_Location, provided the refresh_cache flag is set to true within the object and the object has a ",
      "//if this is a published event, and the refresh_cache flag was added to this event during save_post, refresh the meta and update the cache",
      "//no validation/notices needed",
      "//set a constant so we know this event doesn't need 'saving'",
      "//no validation/notices needed",
      "//since this is the first point when the admin area loads location stuff, we load our EM_Event here",
      "//add_meta_box('em-location-metadump', __('EM_Location Meta Dump','events-manager'), array('EM_Location_Post_Admin','meta_box_metadump'),EM_POST_TYPE_",
      "//anonymous submission meta",
      "/* @var EM_Location $EM_Location */"
    ],
    "length": 10977,
    "preview": "<?php\nclass EM_Location_Post_Admin{\n\tpublic static function init(){\n\t\tglobal $pagenow;\n\t\tif($pagenow == 'post.php' || $pagenow == 'post-new.php' ){ //only needed if editing post\n\t\t\tadd_action('admin_head', array('EM_Location_Post_Admin','admin_head')",
    "file": "src/code/events-manager/classes/em-location-post-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__set",
      "__get",
      "is_user_notice",
      "to_array",
      "can_show",
      "output"
    ],
    "classes": [
      "EM_Admin_Notice"
    ],
    "comments": [
      "/**\n * A single admin notice which contains information about who to display it to, what to dispaly, when and where to display it.\n * @since 5.8.2.0\n ",
      "/**\n\t * Notice key\n\t * @var string\n\t */",
      "/**\n\t * Which user should see this message. Can be 'admin', 'all' (or false), or a specific capability.\n\t * Note that 'admin' in MultiSite context is ",
      "/**\n\t * What kind of notices this is, which can be 'success','info','warning' or 'error'\n\t * @var string\n\t */",
      "/**\n\t * Timestamp indicating when a notice should be shown. If empty, message will show immediately.\n\t * @var int\n\t */",
      "/**\n\t * Where a message should be shown. Values accepted are 'all' (all pages), 'network_admin', 'plugin' (plugin-specific pages), 'settings'\n\t * or a",
      "/**\n\t * The actual message that will be displayed. If left blank, a filter will be applied upon output with format\n\t * em_admin_notice_output_{$this->",
      "/**\n\t * Whether a message is dismissable\n\t * @var boolean\n\t */",
      "/**\n\t * If a message is dismissable and this is set to true, it will be shown to every user matching the who property until dismissed.\n\t * This is als",
      "/**\n\t * If set to true, this is treated as a network-level notice, meaning it can apply to all sites on the network or the network admin in MultiSite ",
      "//process the supplied data",
      "//we may even have simply a key/name for this notice, for hooking later on",
      "//here we expect a string for eveything",
      "//we should have an array to process at this point",
      "//add where if defined",
      "/**\n\t * Returns whether or not this object should be dismissed on a per-user basis.\n\t * @return boolean\n\t */",
      "//user_notice was not specifically set, so if notice is dismissible and not targetted at admins we assume it's dismissed at per-user basis",
      "/**\n\t * Returns notice as an array with non-default values.\n\t * @return array\n\t */",
      "//check that we have at least a notice to show",
      "//can we display due to time?",
      "//who to display it to",
      "//unless this test passes, don't show it",
      "//can we display due to location?",
      "//unless this test passes, don't show it",
      "//does this even have a message we can display?",
      "//is this user-dismissable, and if so, did this user dismiss it?"
    ],
    "length": 6982,
    "preview": "<?php\n/**\n * A single admin notice which contains information about who to display it to, what to dispaly, when and where to display it.\n * @since 5.8.2.0\n */\nclass EM_Admin_Notice {\n\t\n\t/**\n\t * Notice key\n\t * @var string\n\t */\n\tpublic $name = '';\n\t/**",
    "file": "src/code/events-manager/classes/em-admin-notice.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__set",
      "__isset",
      "get_notes",
      "save",
      "get_post",
      "validate",
      "is_available",
      "is_available_to",
      "is_displayable",
      "get_price",
      "get_price_with_tax",
      "get_price_without_tax",
      "get_price_precise",
      "get_spaces",
      "get_available_spaces",
      "get_pending_spaces",
      "get_booked_spaces",
      "get_bookings_count",
      "get_event",
      "get_bookings",
      "get_recurrence_ticket_ids",
      "delete",
      "get_spaces_minimum",
      "is_required",
      "get_spaces_options",
      "start",
      "end",
      "get_datetime",
      "can_manage",
      "output_property"
    ],
    "classes": [
      "EM_Ticket",
      "start"
    ],
    "comments": [
      "/**\n * Class EM_Ticket\n * @param string name\n * @param string description\n * @param string ticket_name\n * @param string ticket_description\n * @param s",
      "/**\n\t * Contains only bookings belonging to this ticket.\n\t * @var EM_Booking\n\t */",
      "/**\n\t * is this ticket limited by spaces allotted to this ticket? false if no limit (i.e. the events general limit of seats)\n\t * @var bool\n\t */",
      "/**\n\t * An associative array containing event IDs as the keys and pending spaces as values.\n\t * This is in array form for future-proofing since at one",
      "/**\n\t * @var EM_Event\n\t */",
      "/**\n\t * Creates ticket object and retreives ticket data (default is a blank ticket object). Accepts either array of ticket data (from db) or a ticket ",
      "//Retreiving from the database",
      "//Save into the object",
      "//sort out recurrence meta to save extra empty() checks, the 'true' cut-off info is here for the ticket if part of a recurring event",
      "//if we have start and end times, we'll set the ticket start/end properties",
      "//these are deprecated properties, use the start() and end() functions directly instead",
      "//These are deprecated and should not be used. Either use the class start() or end() equivalent methods",
      "//start and end properties are inefficient to set, and deprecated. Set ticket_start and ticket_end with a valid MySQL DATETIME value instead.",
      "//start_timestamp and end_timestamp are deprecated, don't use them anymore",
      "/**\n\t * Saves the ticket into the database, whether a new or existing ticket\n\t * @return boolean\n\t */",
      "//Now we save the ticket",
      "//add the true to remove the nulls",
      "//since currently wpdb calls don't accept null, let's build the sql ourselves.",
      "/**\n\t * Get posted data and save it into the object (not db)\n\t * @return boolean\n\t */",
      "//We are getting the values via POST or GET",
      "//sort out price and un-format in the event of special decimal/thousand seperators",
      "//Sort out date/time limits",
      "// reset start/end objects",
      "//sort out user availability restrictions",
      "//if event is recurring, store start/end restrictions of this ticket, which are determined by number of days before (negative number) or after (positi",
      "//start/end of ticket cut-off",
      "//by default the start/end date is the point of reference",
      "/**\n\t * Validates the ticket for saving. Should be run during any form submission or saving operation.\n\t * @return boolean\n\t */",
      "// TODO Create friendly equivelant names for missing fields notice in validation",
      "/**\n\t * @param bool $ignore_member_restrictions  Makes a member-restricted ticket available to any user or guest\n\t * @param bool $ignore_guest_restric",
      "// complete short-circuit, but overriding functions should beware of the $disable_restrictions flag!",
      "//save extra queries if doing a standard check",
      "//either defined ending rsvp time, or start datetime is used here",
      "//check if user has the right role to use this ticket",
      "//Time Constraints met, now quantities",
      "//$this->is_available is only stored for the viewing user",
      "/**\n\t * Checks if ticket is abailable to a specific user type based on user restrictions, other restrictions like dates, availability etc. is ignored.",
      "// registered user, all but guest tickets theoretically available",
      "/*  @var WP_User $user */",
      "// return whether roles coincide with current user roles",
      "// otherwise check if limited to guests, if not it doesn't matter whether it's general user logged-in limit or no limit",
      "// otherwise check if limited to guests",
      "/**\n\t * Returns whether this ticket should be displayed based on availability and other ticket properties and general settings\n\t * @param bool $ignore",
      "/**\n\t * Gets the total price for this ticket, includes tax if settings dictates that tax is added to ticket price. \n\t * Use $this->ticket_price or $th",
      "/**\n\t * Calculates how much the individual ticket costs with applicable event/site taxes included.\n\t * @param boolean $format\n\t * @return float|int|st",
      "/**\n\t * Calculates how much the individual ticket costs with taxes excluded.\n\t * @param boolean $format\n\t * @return float|int|string\n\t */",
      "/**\n\t * Shows the ticket price which can contain long decimals but will show up to 2 decimal places and remove trailing 0s\n\t * For example: 10.010230 ",
      "/**\n\t * Get the total number of tickets (spaces) available, bearing in mind event-wide maxiumums and ticket priority settings.\n\t * @return int\n\t */",
      "/**\n\t * Returns the number of available spaces left in this ticket, bearing in mind event-wide restrictions, previous bookings, approvals and other ti",
      "/**\n\t * Get total number of pending spaces for this ticket.\n\t * @param boolean $force_refresh\n\t * @return int\n\t */",
      "/**\n\t * Returns the number of booked spaces in this ticket.\n\t * @param boolean $force_refresh\n\t * @return int\n\t */",
      "/**\n\t * Returns the total number of bookings of all statuses for this ticket\n\t * @param int $status\n\t * @param boolean $force_refresh\n\t * @return int\n",
      "/**\n\t * Returnds the event associated with this set of tickets, if there is one.\n\t * @return EM_Event\n\t */",
      "/**\n\t * returns array of EM_Booking objects that have this ticket\n\t * @return EM_Bookings\n\t */",
      "/**\n\t *\n\t * @return mixed|void\n\t */",
      "//try the new way, just search tickets with the recurring ticket id stored as parent",
      "//we don't have the exact ID reference for each ticket, and we can't assume changes to EM save_events will reschedule previously created events in ear",
      "//clean for SQL usage",
      "/**\n\t * I wonder what this does....\n\t * @return boolean\n\t */",
      "/**\n\t * Based on ticket minimums, whether required and if the event has more than one ticket this function will return the absolute minimum required s",
      "//count available tickets to make sure",
      "/**\n\t * Get the html options for quantities to go within a <select> container\n\t * @return string\n\t */",
      "/**\n\t * Returns an EM_DateTime object of the ticket start date/time in local timezone of event.\n\t * If no start date defined or if date is invalid, fa",
      "/**\n\t * Returns an EM_DateTime object of the ticket end date/time in local timezone of event.\n\t * If no start date defined or if date is invalid, fals",
      "/**\n\t * Generates an EM_DateTime for the the start/end date/times of the ticket in local timezone.\n\t * If ticket has no start/end date, or an invalid ",
      "//currently only start/end dates are relevant",
      "//Initialize EM_DateTime if not already initialized, or if previously initialized object is invalid (e.g. draft event with invalid dates being resubmi",
      "//we take a pass at creating a new datetime object if it's empty, invalid or a different time to the current start date",
      "//Set to UTC timezone if requested, local by default",
      "/**\n\t * Can the user manage this event? \n\t */",
      "/**\n\t * Deprecated since 5.8.2, just access properties directly or use relevant functions such as $this->start() for ticket_start time - Outputs prope"
    ],
    "length": 37404,
    "preview": "<?php\n\n/**\n * Class EM_Ticket\n * @param string name\n * @param string description\n * @param string ticket_name\n * @param string ticket_description\n * @param string ticket_start\n * @param string ticket_end\n *\n * @property EM_Event $event\n */\nclass EM_T",
    "file": "src/code/events-manager/classes/em-ticket.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "format",
      "formatTimezones",
      "formatDefault",
      "i18n",
      "__toString",
      "setTimeString",
      "setTimestamp",
      "setTimezone",
      "setTime",
      "setDate",
      "setISODate",
      "modify",
      "add",
      "sub",
      "setStartOfWeek",
      "copy",
      "getTimestampWithOffset",
      "getTimezone",
      "getTime",
      "getDate",
      "getDateTime",
      "createFromFormat",
      "get_week_dates"
    ],
    "classes": [
      "EM_DateTime"
    ],
    "comments": [
      "/**\n * Extends DateTime allowing supplied timezone to be a string, which can also be a UTC offset.\n * Also prevents an exception being thrown. Some ad",
      "/**\n\t * The name of this timezone. For example, America/New_York or UTC+3.5\n\t * @var string\n\t */",
      "/**\n\t * @var bool Whether or not string is UTC offset with a UTC+-d timezone name pattern, which isn't supported in PHP normally.\n\t */",
      "/**\n\t * Flag for validation purposes, so we can still have a real EM_DateTime and extract dates but know if the intended datetime failed validation.\n\t",
      "/**\n\t * @see DateTime::__construct()\n\t * @param string $time\n\t * @param string|EM_DateTimeZone $timezone Unlike DateTime this also accepts string repr",
      "//get our EM_DateTimeZone",
      "//save timezone name for use in getTimezone()",
      "//fix DateTime error if a regular timestamp is supplied without prepended @ symbol",
      "//finally, run parent function with our custom timezone",
      "//if we get this far, supplied time is valid",
      "//get current date/time in relevant timezone and set valid flag to false",
      "/**\n\t * {@inheritDoc}\n\t * @see DateTime::format()\n\t */",
      "// format UTC timezones",
      "/**\n\t * Formats timezone name/abbreviation placeholders when there is a manual offset, which would be passed onto date formatting functions and usuall",
      "/**\n\t * Returns a date and time representation in the format stored in Events Manager settings.\n\t * @param bool $include_hour\n\t * @return string\n\t */",
      "/**\n\t * Provides a translated date and time according to the current blog language.\n\t * Useful if using formats that provide date-related names such a",
      "// since we use WP's date functions which don't use DateTime (and if so, don't inherit our timezones), we need to preformat timezone related formats, ",
      "// support for < WP 5.3.0",
      "/**\n\t * Outputs a default mysql datetime formatted string.\n\t * @return string\n\t */",
      "/**\n\t * Modifies the time of this object, if a mysql TIME valid format is provided (e.g. 14:30:00).\n\t * Returns EM_DateTime object in all cases, but $",
      "/**\n\t * Sets timestamp and returns EM_DateTime object in all cases, but $this->valid will be set to false if unsuccessful\n\t * @param int $timestamp\n\t ",
      "/**\n\t * Extends DateTime functionality by accepting a false or string value for a timezone. If set to false, default WP timezone will be used.\n\t * Ret",
      "// only ever valid if previously valid",
      "/**\n\t * Sets time along and returns EM_DateTime object in all cases, but $this->valid will be set to false if unsuccessful\n\t * {@inheritDoc}\n\t * @see ",
      "/**\n\t * Sets date along and returns EM_DateTime object in all cases, but $this->valid will be set to false if unsuccessful\n\t * {@inheritDoc}\n\t * @see ",
      "/**\n\t * Returns EM_DateTime object in all cases, but $this->valid will be set to false if unsuccessful\n\t * {@inheritDoc}\n\t * @see DateTime::setISODate",
      "/**\n\t * Returns EM_DateTime object in all cases, but $this->valid will be set to false if unsuccessful\n\t * {@inheritDoc}\n\t * @see DateTime::modify()\n\t",
      "/**\n\t * Extends DateTime function to allow string representation of argument passed to create a new DateInterval object.\n\t * Returns EM_DateTime objec",
      "/**\n\t * Extends DateTime function to allow string representation of argument passed to create a new DateInterval object.\n\t * Returns EM_DateTime objec",
      "/**\n\t * @return EM_DateTime\n\t * @throws Exception\n\t */",
      "/**\n\t * Easy chainable cloning function, useful for situations where you may want to manipulate the current date,\n\t * such as adding a month and getti",
      "/**\n\t * Gets a timestamp with an offset, which will represent the local time equivalent in UTC time.\n\t * If using this to supply to a date() function,",
      "//aside from the actual offset from the timezone, we also have a local server offset we need to deal with here...",
      "/**\n\t * Returns an EM_DateTimeZone object instead of the default DateTimeZone object.\n\t * @see DateTime::getTimezone()\n\t * @return EM_DateTimeZone\n\t *",
      "/**\n\t * Returns a MySQL TIME formatted string, with the option of providing the UTC equivalent.\n\t * @param bool $utc If set to true a UTC relative tim",
      "/**\n\t * Returns a MySQL DATE formatted string.\n\t * @param bool $utc\n\t * @return string\n\t */",
      "/**\n\t * Returns a MySQL DATETIME formatted string, with the option of providing the UTC equivalent.\n\t * @param bool $utc If set to true a UTC relative",
      "/**\n\t * Extends the DateTime::createFromFormat() function by setting the timezone to the default blog timezone if none is provided.\n\t * @param string ",
      "/**\n\t * Gets a set of start/end dates for the relative week of this $EM_DateTime, until the day before the starting weekday as per WP Settings.\n\t *\n\t ",
      "// so we don't modify this $EM_DateTime",
      "// get stat date, either today if it's start of week or 'this-week' scope, or the previous start day of week",
      "// set as today in event it's the last day of week",
      "// if we're looking for whole week, $EM_DateTime is set to start of week, so get relative end of week even if it's today"
    ],
    "length": 14568,
    "preview": "<?php\n/**\n * Extends DateTime allowing supplied timezone to be a string, which can also be a UTC offset.\n * Also prevents an exception being thrown. Some additional shortcuts added so less coding is required for regular tasks.\n * By doing this, we su",
    "file": "src/code/events-manager/classes/em-datetime.php"
  },
  {
    "type": "php",
    "functions": [
      "prepare_items",
      "display_tablenav",
      "get_hidden_columns",
      "table_data",
      "get_columns",
      "column_default",
      "column_cb"
    ],
    "classes": [
      "that",
      "List_Table"
    ],
    "comments": [
      "// WP_List_Table is not loaded automatically so we need to load it in our application",
      "/**\n * Create a new table class that will extend the WP_List_Table\n */",
      "/**\n\t * Prepare the items for the table to process\n\t *\n\t * @return Void\n\t */",
      "/**\n\t * Adds a wrapper to the top/bottom of the actual table of values\n\t *\n\t * @param $which\n\t *\n\t * @return void\n\t */",
      "/**\n\t * Define which columns are hidden\n\t *\n\t * @return array\n\t */",
      "/**\n\t * Should be overriden, obtains data for populating the table.\n\t * @return array\n\t */",
      "/**\n\t * Override the parent columns method. Defines the columns to use in your listing table\n\t *\n\t * @return array\n\t */",
      "/**\n\t * Define what data to show on each column of the table\n\t *\n\t * @param  array $item        Data\n\t * @param  String $column_name - Current column ",
      "/**\n\t * Bulk Edit Checkbox\n\t * @param array $item\n\t * @return string\n\t */"
    ],
    "length": 2666,
    "preview": "<?php\nnamespace EM;\nuse WP_List_Table;\n\n// WP_List_Table is not loaded automatically so we need to load it in our application\nif( ! class_exists( 'WP_List_Table' ) ) {\n\trequire_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );\n}\n\n/**\n * ",
    "file": "src/code/events-manager/classes/em-list-table.php"
  },
  {
    "type": "php",
    "functions": [
      "get",
      "can_manage",
      "em_get_category"
    ],
    "classes": [
      "EM_Category",
      "instantiations"
    ],
    "comments": [
      "//static options for EM_Category, but until PHP 5.3 is the WP minimum requirement we'll make them regular properties due to lack of late static bindin",
      "//the singular name of this taxonomy which is used in option names consistent across EM taxonomies",
      "/**\n\t * Necessary to supply the $class_name until late static binding is reliably available on all WP sites running PHP 5.3\n\t * @param string $id\n\t * ",
      "/**\n * Get an category in a db friendly way, by checking globals and passed variables to avoid extra class instantiations\n * @param mixed $id\n * @retu"
    ],
    "length": 1216,
    "preview": "<?php\nclass EM_Category extends EM_Taxonomy_Term {\n\t\n\t//static options for EM_Category, but until PHP 5.3 is the WP minimum requirement we'll make them regular properties due to lack of late static binding\n\tpublic $option_ms_global = true;\n\tpublic $o",
    "file": "src/code/events-manager/classes/em-category.php"
  },
  {
    "type": "php",
    "functions": [
      "get",
      "count_date",
      "count",
      "delete",
      "output",
      "output_grouped",
      "get_pagination_links",
      "can_manage",
      "get_post_search",
      "build_sql_conditions",
      "build_sql_orderby",
      "build_sql_groupby",
      "build_sql_groupby_orderby",
      "build_sql_ambiguous_fields_helper",
      "get_default_search"
    ],
    "classes": [
      "to",
      "in",
      "EM_Events",
      "should"
    ],
    "comments": [
      "//TODO EM_Events is currently static, better we make this non-static so we can loop sets of events, and standardize with other objects.",
      "/**\n * Use this class to query and manipulate sets of events. If dealing with more than one event, you probably want to use this class in some way.\n *",
      "/**\n\t * Like WPDB->num_rows it holds the number of results found on the last query.\n\t * @var int\n\t */",
      "/**\n\t * If $args['pagination'] is true or $args['offset'] or $args['page'] is greater than one, and a limit is imposed when using a get() query, \n\t * ",
      "/**\n\t * Returns an array of EM_Events that match the given specs in the argument, or returns a list of future evetnts in future \n\t * (see EM_Events::g",
      "//Quick version, we can accept an array of IDs, which is easy to retrieve",
      "//Array of numbers, assume they are event IDs to retreive",
      "//We can just get all the events here and return them",
      "//We assume it's either an empty array or array of search arguments to merge with defaults",
      "//Get fields that we can use in ordering and grouping, which can be event and location (excluding ambiguous) fields",
      "//will contain location-specific fields, not ambiguous ones",
      "//if locations disabled then we don't accept location-specific fields",
      "//Start SQL statement",
      "//Create the SQL statement selectors",
      "//get all fields from table, add events table prefix to avoid ambiguous fields from location",
      "//for storing total rows found",
      "//duplicate avoidance",
      "//check if we need to join a location table for this search, which is necessary if any location-specific are supplied, or if certain arguments such as",
      "//if set to false the following would provide a false negative in the line above",
      "//check ordering and grouping arguments for precense of location fields requiring a join",
      "//ignore this argument if set to false",
      "//we assume all these arguments are now array thanks to self::get_search_defaults() cleaning it up",
      "//we join, no need to keep searching",
      "//end temporary if( !empty($args['groupby']).... wrapper",
      "//plugins can override this optional joining behaviour here in case they add custom WHERE conditions or something like that",
      "//depending on whether to join we do certain things like add a join SQL, change specific values like status search",
      "//Build ORDER BY and WHERE SQL statements here, after we've done all the pre-processing necessary",
      "//Build GROUP BY SQL statement, which will be very different if we group things due to how we need to filter out by event date",
      "//get groupby field(s)",
      "//we can safely assume we've been passed at least one array item with index of 0 containing a valid field due to build_sql_groupby()",
      "//we only support one field for events",
      "//get minimum required selectors within the inner query to shorten query length as much as possible",
      "//we're selecting all fields from events table so add only location fields required in the outer ORDER BY statement",
      "//THE Query - Grouped",
      "//if we're grouping by any fields in the locations table, we run a different (slightly slower) query to provide reliable results",
      "//we may not have included the grouped field if it's not in the outer ORDER BY clause, so we add it for this specific query",
      "//we'll keep this query simply because it's a little faster and still seems reliable when not grouping or group-sorting any fields in the locations ta",
      "//Build THE Query SQL statement if not already built for a grouped query",
      "//if( em_wp_is_super_admin() && WP_DEBUG_DISPLAY ){ echo \"<pre>\"; print_r($sql); echo '</pre>'; }",
      "//If we're only counting results, return the number of results and go no further",
      "//get the result and count results",
      "//If we want results directly in an array, why not have a shortcut here?",
      "//Make returned results EM_Event objects",
      "/**\n\t * Returns the number of events on a given date\n\t * @param $date\n\t * @return int\n\t */",
      "/**\n\t * Will delete given an array of event_ids or EM_Event objects\n\t * @param unknown_type $id_array\n\t */",
      "//Detect array type and generate SQL for event IDs",
      "//TODO add better error feedback on events delete fails",
      "/**\n\t * Output a set of matched of events. You can pass on an array of EM_Events as well, in this event you can pass args in second param.\n\t * Note th",
      "//When looping, we can replace EM_Event global with the current event in the loop",
      "//get page number if passed on by request (still needs pagination enabled to have effect)",
      "//Can be either an array for the get search or an array of EM_Event objects",
      "//Firstly, let's check for a limit/offset here, because if there is we need to remove it and manually do this",
      "//What format shall we output this to, or use default",
      "//Add headers and footers to output",
      "//we're using the default format, so if a custom format header or footer is supplied, we can override it, if not use the default",
      "//we're using a custom format, so if a header or footer isn't specifically supplied we assume it's blank",
      "//Pagination (if needed/requested)",
      "//TODO check if reference is ok when restoring object, due to changes in php5 v 4",
      "/**\n\t * Generate a grouped list of events by year, month, week or day.\n\t * \n\t * There is a nuance with this function, long_events won't work unless yo",
      "//Reset some args to include pagination for if pagination is requested.",
      "// must override this to display events in right cronology.",
      "//Reset some vars for counting events and displaying set arrays of events",
      "//decide what form of dates to show",
      "//go through the events and put them into a monthly array",
      "/* @var $EM_Event EM_Event */",
      "//if long events requested, add event to other dates too",
      "//go through the events and put them into a monthly array",
      "//if long events requested, add event to other dates too",
      "///$EM_DateTime is synoymous with the next month here",
      "//obtain start of the week as per WordPress general settings",
      "//save event to date representing start of week for this WP install based on general settings",
      "//if long events requested, add event to other dates too",
      "//go through the events and put them into a daily array",
      "/* @var EM_DateTime $EM_DateTime */",
      "//if long events requested, add event to other dates too",
      "//store indexes as Y-m-d format so we become timezone independent",
      "//Show the pagination links (unless there's less than $limit events)",
      "//get default args if we're in a search, supply to parent since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "/* (non-PHPdoc)\n\t * DEPRECATED - this class should just contain static classes,\n\t * @see EM_Object::can_manage()\n\t */",
      "//we try to find any of these events that don't belong to this user",
      "//supply $accepted_args to parent argument since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_conditions()\n\t */",
      "//continue with conditions",
      "//specific location query conditions if locations are enabled",
      "//events with or without locations",
      "// generate array of clean and enabled event location types",
      "// add condition if at least one valid/clean type supplied",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_orderby()\n\t */",
      "//fix ambiguous fields",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_groupby()\n\t */",
      "//fix ambiguous fields and give them scope of events table",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_groupby_orderby()\n\t */",
      "//fix ambiguous fields and give them scope of events table",
      "/**\n\t * Overrides EM_Object method to provide specific reserved fields and events table.\n\t * @see EM_Object::build_sql_ambiguous_fields_helper()\n\t */",
      "//This will likely be removed when PHP 5.3 is the minimum and LSB is a given",
      "/* \n\t * Adds custom Events search defaults\n\t * @param array $array_or_defaults may be the array to override defaults\n\t * @param array $array\n\t * @retu",
      "//we don't initially look for recurring events only events and recurrences of recurring events",
      "//groups according to event start time, i.e. by default shows earliest event in a scope",
      "//groups according to event start time, i.e. by default shows earliest event in a scope",
      "//approved events only",
      "//ouput_grouped specific arguments",
      "//event-specific search attributes",
      "//search events with a location",
      "//search events without a location",
      "//search events with locations of a specific publish status",
      "//sort out whether defaults were supplied or just the array of search values",
      "//specific functionality",
      "//admin-area specific modifiers",
      "//figure out default owning permissions",
      "//by default, admins see pending and live events",
      "//check if we're doing any location-specific searching, if so then we (by default) want to match the status of events",
      "//we're looking for events with locations, so we match the status we're searching for events unless there's an argument passed on for something differ",
      "//if no location is being searched for, we should ignore any status searches for location",
      "//do some post-parnet cleaning up here if locations are enabled or disabled",
      "//locations disabled, wipe any args to do with locations so they're ignored"
    ],
    "length": 35395,
    "preview": "<?php\nuse EM_Event_Locations\\Event_Locations;\n//TODO EM_Events is currently static, better we make this non-static so we can loop sets of events, and standardize with other objects.\n/**\n * Use this class to query and manipulate sets of events. If dea",
    "file": "src/code/events-manager/classes/em-events.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get_bookings",
      "get_events",
      "get_bookings_url",
      "display_summary",
      "get_summary",
      "get_name",
      "to_api"
    ],
    "classes": [
      "EM_Person"
    ],
    "comments": [
      "// TODO make person details more secure and integrate with WP user data",
      "//create new object if passed a wp_user",
      "//', '', get_site_url());",
      "//extra field for EM",
      "//not the main blog, force single blog search",
      "//empty booking for fields",
      "/**\n\t * @return EM_Events\n\t */",
      "// maybe hide this depending on permissions",
      "// whether person is registered or not"
    ],
    "length": 5599,
    "preview": "<?php\n// TODO make person details more secure and integrate with WP user data \nclass EM_Person extends WP_User{\n\n    public $custom_user_fields = array();\n\n\tfunction __construct( $person_id = false, $username = '', $blog_id='' ){\n\t\tif( is_array($pers",
    "file": "src/code/events-manager/classes/em-person.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_head",
      "admin_menu",
      "columns_add",
      "columns_output"
    ],
    "classes": [
      "EM_Location_Posts_Admin"
    ],
    "comments": [
      "//only needed if editing post",
      "//hide some cols by default:",
      "//quick hacks to make event admin table make more sense for events",
      "// Add a submenu to the custom top-level menu:",
      "//prepend ID after checkbox"
    ],
    "length": 3064,
    "preview": "<?php\nclass EM_Location_Posts_Admin{\n\tpublic static function init(){\n\t\tglobal $pagenow;\n\t\tif($pagenow == 'edit.php' && !empty($_REQUEST['post_type']) && $_REQUEST['post_type'] == EM_POST_TYPE_LOCATION ){ //only needed if editing post\n\t\t\t//hide some c",
    "file": "src/code/events-manager/classes/em-location-posts-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "get_default_search",
      "build_sql_conditions",
      "get_taxonomies",
      "build_wpquery_conditions",
      "build_sql_orderby",
      "build_sql_groupby_orderby",
      "build_sql_groupby",
      "build_sql_x_by_helper",
      "build_sql_ambiguous_fields_helper",
      "get_post_search",
      "get_pagination_links",
      "__get",
      "__set",
      "__isset",
      "get_id",
      "get_owner",
      "can_manage",
      "ms_global_switch",
      "ms_global_switch_back",
      "to_object",
      "compat_keys",
      "to_array",
      "get_types",
      "get_fields",
      "clean_id_atts",
      "email_send",
      "array_is_numeric",
      "get_errors",
      "add_error",
      "json_encode",
      "json_encode_e",
      "array_to_json",
      "get_image_type",
      "get_image_url",
      "image_delete",
      "image_upload",
      "image_validate",
      "output_excerpt",
      "sanitize_time",
      "format_price",
      "get_tax_rate",
      "generate_uuid",
      "process_meta"
    ],
    "classes": [
      "which",
      "EM_Object",
      "e",
      "type"
    ],
    "comments": [
      "/**\n * Base class which others extend on. Contains functions shared across all EM objects.\n *\n */",
      "/**\n\t * @var array Associative array of shortname => property names for this object. For example, an EM_Event object will have a 'language' key to 'ev",
      "//see self::get_taxonomies()",
      "/**\n\t * Provides context in searches where ambiguous field names may coincide between event and location database searches requiring a specific field ",
      "/**\n\t * Takes the array and provides a clean array of search parameters, along with details\n\t * @param array $defaults\n\t * @param array $array\n\t * @re",
      "//TODO accept all objects as search options as well as ids (e.g. location vs. location_id, person vs. person_id)",
      "//Create minimal defaults array, merge it with supplied defaults array",
      "//default blog timezone",
      "//hard-coded at end of this function",
      "//custom html above the list",
      "//custom html below the list",
      "//default message if no results used in output() function",
      "//automatically set to 'status' value if in EM_Events, useful only for EM_Locations",
      "//automatically set to 'status' value if in EM_Locations, useful only for EM_Events",
      "//basically, if greater than 0, calculates offset at end",
      "//look for a specific recurrence by ID",
      "//if set, exclusively show (true) or omit (false) recurrences",
      "//if set to 'include' it'll only show recurring event templates, if set to false, it'll omit them from results, null or true will include in results",
      "//if set to true, only events with bookings enabled are returned",
      "//reserved for future searching via name",
      "//lat,lng coordinates in array or comma-separated format",
      "//distance from near coordinates - currently the default is the same as for the search form",
      "//considered during pagination",
      "//for language searches in ML mode",
      "//auto-add taxonomies to defaults",
      "//Return default if nothing passed",
      "//TODO decide on search defaults shared across all objects and then validate here",
      "//We are still dealing with recurrence_id, location_id, category_id in some place, so we do a quick replace here just in case",
      "//Clean all id lists",
      "//clean owner attribute if not 'me'",
      "//tags and cats turned into an array regardless",
      "//trim , and & from ends",
      "//assume it's a string to geocode, not supported yet",
      "//Country - Turn into array for multiple search if comma-separated",
      "//TODO validate search query array",
      "//Clean the supplied array, so we only have allowed keys",
      "//return clean array",
      "//No point using WP's cleaning function, we're doing it already.",
      "//Do some spring cleaning for known values",
      "//Month & Year - may be array or single number",
      "//Deal with scope and date searches",
      "//This is to become an array, so let's split it up",
      "//looking for a date range here, so we'll verify the dates validate, if not get the default.",
      "//ORDER and GROUP BY ORDER - split up string array, if just text do a quick validation and set to default if upon failure",
      "//ORDER BY, GROUP BY and GROUP BY ORDER ensure we have a valid array, splitting by commas if present",
      "//reset array keys because we want an index 0 present",
      "//TODO should we clean format of malicious code over here and run everything through this?",
      "//Calculate offset if event page is set",
      "/**\n\t * Builds an array of SQL query conditions based on regularly used arguments\n\t * @param array $args\n\t * @return array\n\t */",
      "//Format the arguments passed on",
      "//undefined variable warnings in ZDE, could just delete this (but dont pls!)",
      "// - not used anymore, accesses the $args directly",
      "// - not used anymore, accesses the $args directly",
      "//Create the WHERE statement",
      "//Statuses - we search for the 'status' based on the context of current object (i.e. is it an event or location for the moment)",
      "// if we define the alternative status such as location_status in event context, if set to true it matches the event 'status'",
      "// if a specific status search value is given i.e. not true and not false then that's used to generate the right condition for that specific field",
      "// e.g. if in events, search for 'publish' events and 0 location_status, it'll find events with a location pending review.",
      "//find out whether the main status context we're after is an event or location i.e. are we running an events or location query",
      "//$is_joined_status decides whether this status we're dealing with is part of a joined table or the main table",
      "//we add a status condition if this is the main status context or if joining a table and joined status arg is not exactly false",
      "//the key for this condition type",
      "//if this is the status belonging to the joined table, if set to true we match the main context status otherwise we check the specific status",
      "//if joining by event or location, we may mistakenly omit any results without a complementing event or location, we need to account for that here",
      "//other parts of the condition can negate whether or not eventful locations or events with/without locations should be included",
      "//shows pending & published if not defined",
      "//pending or published",
      "//show trashed items",
      "//search all statuses that aren't trashed",
      "//search all statuses",
      "//we show recurring event templates as well within results, if 'recurring' is 'include' then we show both recurring and normal events.",
      "//we choose to either exclusively show or completely omit recurrences, if not set then both are shown",
      "//if we get here and $recurring is not exactly null (meaning ignored), it was set to false or 0 meaning recurring events shouldn't be included",
      "//Timezone - search for events in a specific timezone",
      "//Dates - first check 'month', and 'year', and adjust scope if needed",
      "//Sort out month range, if supplied an array of array(month,month), it'll check between these two months",
      "//Sort out year range, if supplied an array of array(year,year), it'll check between these two years",
      "//just modify the scope here",
      "//This is an array, let's split it up",
      "//do a from till infinity",
      "//do past till $date_end",
      "//$conditions['scope'] = \" ( ( event_start_date <= CAST('$date_end' AS DATE) AND event_end_date >= CAST('$date_start' AS DATE) ) OR (event_start_date ",
      "//Scope can also be a specific date. However, if 'day', 'month', or 'year' are set, that will take precedence",
      "//the time, now, in blog/site timezone",
      "// next x months means this month (what's left of it), plus the following x months until the end of that month.",
      "//Filter by Location - can be object, array, or id",
      "//Location ID takes precedence",
      "//only helpful is searching events",
      "//Now we deal with objects",
      "//we can accept array of ids or EM_Location objects",
      "//Filter by Event - can be object, array, or id",
      "//event ID takes precedence",
      "//Now we deal with objects",
      "//we can accept array of ids or EM_event objects",
      "//Location specific filters",
      "//if we're searching near something, country etc. becomes irrelevant",
      "/* kilometers */",
      "/* miles */",
      "//we can accept country codes or names so we need to change names to country codes",
      "//we have a country code",
      "//we have a country name,",
      "//START TAXONOMY FILTERS - can be id, slug, name or comma separated ids/slugs/names, if negative or prepended with a - then considered a negative filt",
      "//convert taxonomies to arrays",
      "//tags and cats turned into an array regardless",
      "//accepts numbers or words",
      "//if in ms global mode, switch here rather than on each EM_Category instance",
      "//if a single array is supplied then we treat it as an OR type of query, if an array of arrays is supplied we condsider it to be many ANDs of ORs",
      "//so here we wrap a single array into another array and there is only one 'AND' condition (therefore no AND within this tax search)",
      "//go through taxonomy arg and generate relevant SQL",
      "//build array of term ids and negative ids from supplied argument",
      "//if they supply a negative term for a nonexistent custom taxonomy e.g. -1, we should still",
      "//create sql conditions",
      "//figure out context - what table/field to search",
      "//context can be either locations or events, since those are the only two CPTs we deal with",
      "//by default only applies to categories",
      "//we're directly looking for tax ids from within the em_meta table",
      "//normal taxonomy filtering",
      "//force a false, supplied taxonomies don't exist",
      "//no point continuing this loop",
      "//if in ms global mode, switch back from previous switch",
      "//END TAXONOMY FILTERS",
      "//If we want rsvped items, we usually check the event",
      "//get bookings of user",
      "//Default ownership belongs to an event, child objects can just overwrite this if needed.",
      "//no events to be shown",
      "// Language searches, only relevant if ML is activated via a third party plugin",
      "// language ignored if null or false",
      "//default taxonomies",
      "//get additional taxonomies associated with locations and events and set context for default taxonomies",
      "//set the context for the default taxonomies, as they're already in the array",
      "//non default taxonomy, so create new item for the taxonomies array",
      "//users can add even more to this if needed, e.g. MS compatability",
      "/**\n\t * WORK IN PROGRESS - not recommended for production use due to lack of syncing with regular condition builder and timezones feature\n\t * Builds a",
      "//Format the arguments passed on",
      "//undefined variable warnings in ZDE, could just delete this (but dont pls!)",
      "//Create the WHERE statement",
      "//Dates - first check 'month', and 'year', and adjust scope if needed",
      "//Sort out month range, if supplied an array of array(month,month), it'll check between these two months",
      "//Sort out year range, if supplied an array of array(year,year), it'll check between these two years",
      "//just modify the scope here",
      "//No date requested, so let's look at scope",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "//create default time in blog timezone",
      "// next x months means this month (what's left of it), plus the following x months until the end of that month.",
      "//create default time in blog timezone",
      "//Filter by Location - can be object, array, or id",
      "//Location ID takes precedence",
      "//Now we deal with objects",
      "//we can accept array of ids or EM_Location objects",
      "//Filter by Event - can be object, array, or id",
      "//event ID takes precedence",
      "//Now we deal with objects",
      "//we can accept array of ids or EM_event objects",
      "//we can accept country codes or names",
      "//we have a country name,",
      "//we have a country code",
      "//remove values not in this array.",
      "//remove values not in this array.",
      "//remove values not in this array.",
      "//Add conditions for category selection",
      "//Filter by category, can be id or comma separated ids",
      "//TODO create an exclude category option",
      "//get the term id directly",
      "//Add conditions for tags",
      "//Filter by tag, can be id or comma separated ids",
      "//get the term id directly",
      "//If we want rsvped items, we usually check the event",
      "//Default ownership belongs to an event, child objects can just overwrite this if needed.",
      "/**\n\t * Sanitizes the ORDER BY part of the SQL statement so only valid fields are supplied for ordering.\n\t * Also combines default orders which can be",
      "/**\n\t * Returns a set of further fields this query should be grouped by. Not required for straight-forward GROUP BY SQL queries. \n\t * This is suppleme",
      "/**\n\t * Sanitizes the group by statement so it includes only accepted fields. Returns an array of valid field names to group by.\n\t * Optionally, if a ",
      "/**\n\t * Helper for building arrays of fields \n\t * @param unknown $x_by_field\n\t * @param unknown $order\n\t * @param unknown $accepted_fields\n\t * @param ",
      "//Clean orderby array so we only have accepted values",
      "//maybe cases we're given an array where keys are shortcut names e.g. id => event_id - this way will be deprecated at one point",
      "//If order is an array, we'll go through the orderby array and match the order values (in order of array) with orderby values",
      "//If orders don't match up, or it's not ASC/DESC, the default events search in EM settings/options page will be used.",
      "/**\n\t * Fixes ambiguous fields in a given array (which can contain prefixed ASC/DESC arguments) and give them scope of events table\n\t * @param array $",
      "//remove ASC DESC for searching/comparison arrays such as order by",
      "/**\n\t * Gets array of searchable variables that should be considered in a $_REQUEST variable\n\t * @param array $args Arguments to include in returned a",
      "//em_search is included to circumvent wp search GET/POST clashes",
      "//merge variables from the $request into $args",
      "//unset the scope if no value is provided - ',' is an empty value",
      "/**\n\t * Generates pagination for classes like EM_Events based on supplied arguments and whether AJAX is enabled.\n\t * \n\t * @param array $args The argum",
      "//clean out the bad stuff, set up page number template",
      "//$default_args are values that can be added to the querystring for use in searching events in pagination either in searches or ajax pagination",
      "//due to late static binding issues in PHP, this'll always return EM_Object::get_default_search so this is a fall-back",
      "//go through default arguments (if defined) and build a list of unique non-default arguments that should go into the querystring",
      "//this is the set of unique arguments we'll add to the querystring",
      "//if array exists, implode it in case one value is already imploded for matching purposes",
      "//special case, since em_search is used in links rather than search, which we remove below",
      "//build general page link with all arguments",
      "//if we're using ajax or already did an events search via a form, add the action here for pagination links",
      "//if we're in an ajax call, make sure we aren't calling admin-ajax.php",
      "//finally, glue the url with querystring and pass onto pagination function",
      "//don't html encode, so em_paginate does its thing;",
      "//don't use data method if ajax is disabled or if we're already in an ajax request (SERP irrelevenat)",
      "//if PHP is 5.3 or later, you can specifically filter by class e.g. em_events_output_pagination - this replaces the old filter originally located in t",
      "/**\n\t * Returns the id of a particular object in the table it is stored, be it Event (event_id), Location (location_id), Tag, Booking etc.\n\t * @return",
      "/**\n\t * Returns the user id for the owner (author) of a particular object in the table it is stored, be it Event (event_owner) or Location (location_o",
      "/**\n\t * Used by \"single\" objects, e.g. bookings, events, locations to verify if they have the capability to edit this or someone else's object. Relies",
      "//if multisite and super admin, just return true",
      "//set user to the desired user we're verifying, otherwise default to current user",
      "//now check capability",
      "//user owns the object and can therefore manage it",
      "//currently user is not able to manage as they aren't the owner",
      "//admins have special rights",
      "//If in multisite global, then get the main blog",
      "/**\n\t * Save an array into this class.\n\t * If you provide a record from the database table corresponding to this class type it will add the data to th",
      "/**\n\t * Copies all the properties to shorter property names for compatability, do not use the old properties.\n\t */",
      "/**\n\t * Returns this object in the form of an array, useful for saving directly into a database table.\n\t * @return array\n\t */",
      "/**\n\t * Function to retreive wpdb types for all fields, or if you supply an assoc array with field names as keys it'll return an equivalent array of w",
      "//So we look at assoc array and find equivalents",
      "//Blank array, let's assume we're getting a standard list of types",
      "/**\n\t * Cleans arrays that contain id lists. Takes an array of items and will clean the keys passed in second argument so that if they keep numbers, e",
      "//This is in the list of atts we want cleaned",
      "//No format we accept",
      "/**\n\t * Send an email and log errors in this object\n\t * @param string $subject\n\t * @param string $body\n\t * @param string $email\n\t * @param array $atta",
      "/**\n\t * Will return true if this is a simple (non-assoc) numeric array, meaning it has at one or more numeric entries and nothing else\n\t * @param mixe",
      "/**\n\t * Returns an array of errors in this object\n\t * @return array \n\t */",
      "/**\n\t * Adds an error to the object\n\t */",
      "//make errors var an array if it isn't already",
      "//create empty array if this isn't an array",
      "/**\n\t * Converts an array to JSON format, useful for outputting data for AJAX calls. Uses a PHP4 fallback function, given it doesn't support json_enco",
      "/**\n\t * Outputs array as JSON format as per EM_Object::json_encode()\n\t * @param $array\n\t *\n\t * @return void\n\t * @see EM_Object::json_encode()\n\t */",
      "/**\n\t * Compatible json encoder function for PHP4\n\t * @param array $array\n\t * @return string\n\t */",
      "//PHP4 Comapatability - This encodes the array into JSON. Thanks go to Andy - http://www.php.net/manual/en/function.json-encode.php#89908",
      "// We first copy each key/value pair into a staging array,",
      "// formatting each key and value properly as we go.",
      "// Format the value:",
      "// Add to staging array:",
      "// Then we collapse the staging array into the JSON form:",
      "// If the array is a vector (not associative):",
      "// Format the value:",
      "// Add to staging array:",
      "// Then we collapse the staging array into the JSON form:",
      "/*\n\t * START IMAGE UPlOAD FUNCTIONS\n\t * Used for various objects, so shared in one place \n\t */",
      "/**\n\t * Returns the type of image in lowercase, if $path is true, a base filename is returned which indicates where to store the file from the root up",
      "//legacy image finder, annoying, but must be done",
      "//quick fix for recurrences",
      "//check that this image isn't being used by another CPT",
      "//not used by any other CPT, so just delete the image entirely (would usually only be used via front-end which has no media manager)",
      "//@todo add setting option to delete images from filesystem/media if not used by other posts",
      "//check legacy image",
      "//just delete image association",
      "//Handle the attachment as a WP Post",
      "/* Attach file to item */",
      "//delete the old attachment",
      "//error uploading, pass error message on and return false",
      "/*\n\t * END IMAGE UPlOAD FUNCTIONS\n\t */",
      "//shorten content by supplied number - copied from wp_trim_excerpt",
      "/**\n\t * Formats a price according to settings and currency\n\t * @param double $price\n\t * @return string\n\t */",
      "/**\n\t * Returns contextual tax rate of object, which may be global or instance-specific. By default a number representing percentage is provided, e.g.",
      "/**\n\t * Untility function, generates a UUIDv4 without dashes.\n\t * @return string\n\t */",
      "/**\n\t * Used to process any tables containing meta, such as bookings_meta or tickets_bookings_meta\n\t * This may likely be moved into another object, w"
    ],
    "length": 83556,
    "preview": "<?php\n/**\n * Base class which others extend on. Contains functions shared across all EM objects.\n *\n */\nclass EM_Object {\n\tvar $fields = array();\n\t/**\n\t * @var array Associative array of shortname => property names for this object. For example, an EM",
    "file": "src/code/events-manager/classes/em-object.php"
  },
  {
    "type": "php",
    "functions": [
      "get",
      "can_manage",
      "em_get_tag"
    ],
    "classes": [
      "EM_Tag",
      "instantiations"
    ],
    "comments": [
      "/**\n * A single event tag object. *\n */",
      "//static options for EM_Category, but until PHP 5.3 is the WP minimum requirement we'll make them regular properties due to lack of late static bindin",
      "//the singular name of this taxonomy which is used in option names consistent across EM taxonomies",
      "/**\n\t * Necessary to supply the $class_name until late static binding is reliably available on all WP sites running PHP 5.3\n\t * @param string $id\n\t * ",
      "/**\n * Get an category in a db friendly way, by checking globals and passed variables to avoid extra class instantiations\n * @param mixed $id\n * @retu"
    ],
    "length": 1181,
    "preview": "<?php\n/**\n * A single event tag object. *\n */\nclass EM_Tag extends EM_Taxonomy_Term {\n\t\n\t//static options for EM_Category, but until PHP 5.3 is the WP minimum requirement we'll make them regular properties due to lack of late static binding\n\tpublic $",
    "file": "src/code/events-manager/classes/em-tag.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "create",
      "getName",
      "isUTC",
      "getValue",
      "getTransitions"
    ],
    "classes": [
      "EM_DateTimeZone"
    ],
    "comments": [
      "/**\n * Extends the native DateTimeZone object by allowing for UTC manual offsets as supported by WordPress, along with eash creation of a DateTimeZone",
      "//if we're not suppiled a DateTimeZone object, create one from string or implement manual offset",
      "// convert this to an offset, taken from wp_timezone",
      "/**\n\t * Special function which converts a timezone string, UTC offset or DateTimeZone object into a valid EM_DateTimeZone object.\n\t * If no value supp",
      "//if we're not suppiled a DateTimeZone object, create one from string or implement manual offset",
      "//create EM_DateTimeZone object if valid, otherwise allow defaults to override later",
      "//if supplied a regular DateTimeZone, convert it to EM_DateTimeZone",
      "//if no valid timezone supplied, get the default timezone in EM environment, otherwise the WP timezone or offset",
      "/**\n\t * {@inheritDoc}\n\t * @see DateTimeZone::getName()\n\t */",
      "/**\n\t * Returns WP-friendly timezone value, which accounts for UTC offsets and modifies accoridnly so that minute offsets also work.\n\t * @return strin",
      "/**\n\t * If the timezone has a manual UTC offset, then an empty array of transitions is returned.\n\t * {@inheritDoc}\n\t * @see DateTimeZone::getTransitio"
    ],
    "length": 3556,
    "preview": "<?php\n/**\n * Extends the native DateTimeZone object by allowing for UTC manual offsets as supported by WordPress, along with eash creation of a DateTimeZone object with the blog's timezone.\n * @since 5.8.2\n */\nclass EM_DateTimeZone extends DateTimeZo",
    "file": "src/code/events-manager/classes/em-datetimezone.php"
  },
  {
    "type": "php",
    "functions": [
      "em_get_booking",
      "__construct",
      "__get",
      "__set",
      "__isset",
      "__sleep",
      "__wakeup",
      "get_notes",
      "save",
      "update_meta",
      "get",
      "get_post",
      "validate",
      "get_spaces",
      "get_price",
      "get_price_base",
      "get_price_pre_taxes",
      "get_price_post_taxes",
      "get_price_taxes",
      "calculate_price",
      "get_tax_rate",
      "get_price_discounts",
      "get_price_discounts_amount",
      "get_price_discounts_summary",
      "get_price_adjustments",
      "get_price_adjustments_amount",
      "get_price_adjustments_summary",
      "get_price_summary_array",
      "get_total_paid",
      "get_event",
      "get_tickets",
      "get_tickets_bookings",
      "get_person",
      "get_person_post",
      "get_person_editor",
      "get_status",
      "delete",
      "cancel",
      "approve",
      "reject",
      "unapprove",
      "set_status",
      "can_cancel",
      "is_dateinterval_string",
      "is_reserved",
      "is_no_user",
      "is_pending",
      "add_note",
      "get_admin_url",
      "output",
      "output_placeholder",
      "email",
      "email_messages",
      "date",
      "can_manage",
      "to_array",
      "to_api"
    ],
    "classes": [
      "EM_Booking",
      "foreach"
    ],
    "comments": [
      "/**\n * gets a booking in a more db-friendly manner, allows hooking into booking object right after instantiation\n * @param mixed $id\n * @param mixed $",
      "//check if it's not already global so we don't instantiate again",
      "/**\n * Contains all information and relevant functions surrounding a single booking made with Events Manager\n * @property int|false $booking_status\n *",
      "/**\n\t * array of notes by admins on this booking. loaded from em_meta table in construct\n\t * @var array\n\t */",
      "/**\n\t * Deprecated as of 5.8.2, previously used to store timestamp of booking date. Use EM_Booking->date()->getTimestamp() instead.\n\t * @var int\n\t */",
      "/**\n\t * The date of the booking, in UTC time, represented as a DATETIME mysql value.\n\t * @var string\n\t */",
      "/**\n\t * Contains the booking date in EM_DateTime object form.\n\t * @var EM_DateTime\n\t */",
      "/**\n\t * @var EM_Person\n\t */",
      "/**\n\t * when using EM_Booking::email_send(), this number is updated with sent emails\n\t * @var int\n\t */",
      "/**\n\t * Contains an array of custom fields for a booking. This is loaded from em_meta, where the booking_custom name contains arrays of data.\n\t * @var",
      "/**\n\t * If saved in this instance, you can see what previous approval status was.\n\t * @var int\n\t */",
      "/**\n\t * The booking approval status number corresponds to a state in this array.\n\t * @var array\n\t */",
      "/**\n\t * @var EM_Tickets\n\t */",
      "/**\n\t * @var EM_Event\n\t */",
      "/**\n\t * @var EM_Tickets_Bookings\n\t */",
      "/**\n\t * If set to true, this booking can be managed by any logged in user.\n\t * @var EM_Tickets_Bookings\n\t */",
      "/**\n\t * Creates booking object and retrieves booking data (default is a blank booking object). Accepts either array of booking data (from db) or a boo",
      "//Get the person for this booking",
      "//Retrieving from the database",
      "// we don't use booking meta from the table anymore",
      "//Save into the object",
      "// fallback, create a consistent but unique MD5 hash in case it's not saved for some reason.",
      "//Do it here so things appear in the po file.",
      "//deprecating in 6.0",
      "//do some legacy checking here for bookings made prior to 5.4, due to how taxes are calculated",
      "//reset booking_price, it'll be recalculated later (if you're using this property directly, don't use $this->get_price())",
      "// allow others to intervene",
      "//get the modified or created date from the DB only if requested, and save to object",
      "/**\n\t * Return relevant fields that will be used for storage, excluding things such as event and ticket objects that should get reloaded\n\t * @return s",
      "// EM Pro backwards compatibility",
      "/**\n\t * Repopulate the ticket bookings with this object and its event reference.\n\t */",
      "// we need to do this here because the __wakeup function bubbles up from the innermost class",
      "/**\n\t * Saves the booking into the database, whether a new or existing booking\n\t * @param bool $mail whether or not to email the user and contact peop",
      "//update prices, spaces, person_id",
      "//Step 1. Save the booking",
      "// first check that the uuid is unique, if not change it and repeat until unique",
      "//Step 2. Insert meta and ticket bookings for this booking id if no errors so far",
      "//Step 2a - Save booking meta",
      "// we go down one level of array",
      "// Step 2b - Save Ticket Bookings",
      "//delete the booking and tickets, instead of a transaction",
      "// Step 3. Run filter for return value before sending emails",
      "//Final Step: email if necessary after all the saving has been done",
      "/**\n\t\t\t\t * When a booking has been added to an event\n\t\t\t\t *\n\t\t\t\t * @param EM_Booking $this The EM_Booking object just added\n\t\t\t\t * @param boolean $mai",
      "/**\n\t * Update a specific key value in the booking meta data, or create one if it doesn't exist. If set to null it'll remove that value\n\t * @param $me",
      "// add to new meta table if not exists",
      "// delete split array values by getting the generated keys as we would further down and deleting them first",
      "// delete previous values so we insert new ones",
      "// if null, then we already deleted it and skip this",
      "// we go down one level of array",
      "// delete previous values so we insert new ones",
      "/**\n\t * Load a record into this object by passing an associative array of table criteria to search for.\n\t * Returns boolean depending on whether a rec",
      "/**\n\t * Get posted data and save it into the object (not db)\n\t * @return boolean\n\t */",
      "//allow editing of tax rate",
      "//recalculate spaces/price",
      "//re-run compatiblity keys function",
      "//depracating in 6.0",
      "//step 1, basic info",
      "//give some errors in step 1",
      "//step 2, tickets bookings info",
      "// are bookings even available due to event and ticket cut-offs/restrictions? This is checked earlier in booking processes, but is relevant in checkou",
      "//is there enough space overall?",
      "//can we book this amount of spaces at once?",
      "/**\n\t * Get the total number of spaces booked in THIS booking. Setting $force_refresh to true will recheck spaces, even if previously done so.\n\t * @pa",
      "/* Price Calculations */",
      "/**\n\t * Gets the total price for this whole booking, including any discounts, taxes, and any other additional items. In other words, what the person h",
      "//support for old parameters, will be depricated soon",
      "//recalculate price here only if price is not actually set",
      "/* Deprecated filter - Equivalent of em_booking_calculate_price, please use that instead */",
      "//return booking_price, formatted or not",
      "/**\n\t * Total of tickets without taxes, discounts or any other modification. No filter given here for that very reason!\n\t * @param boolean $format\n\t *",
      "//apply pre-tax discounts",
      "//no negative prices",
      "//return amount of taxes applied, formatted or not",
      "/**\n\t * Gets price AFTER taxes and (optionally) post-tax discounts and surcharges have also been added.\n\t * @param boolean $format\n\t * @param boolean ",
      "//get price before taxes",
      "//add taxes to price",
      "//calculate and save tax amount",
      "//apply post-tax discounts",
      "//no negative prices",
      "//return amount of taxes applied, formatted or not",
      "/**\n\t * Get amount of taxes applied to this booking price.\n\t * @param boolean $format\n\t * @return double|string\n\t */",
      "//taxes already calculated",
      "//recalculate price and taxes",
      "//return amount of taxes applied, formatted or not",
      "/**\n\t * Calculates (or recalculates) the price of this booking including taxes, discounts etc., saves it to the booking_price property and writes to r",
      "//any programatic price adjustments should be added here, otherwise you need to run this function again",
      "//reset price and taxes calculations",
      "//get post-tax price and save it to booking_price",
      "/* \n\t * Gets tax rate of booking\n\t * @see EM_Object::get_tax_rate()\n\t */",
      "//booking not saved or tax never defined",
      "//even if 0 if defined as tax rate we still use it, delete the option entirely to stop",
      "//no tax applied yet to an existing booking, or tax possibly applied (but handled separately in EM_Tickets_Bookings but in legacy < v5.4",
      "//sort out MultiSite nuances",
      "//MultiSite AND Global tables enabled AND this event belongs to another blog - get settings for blog that published the event",
      "//get booking from current site, whether or not we're in MultiSite",
      "//first time we're applying tax rate",
      "/* START Price Adjustment Functions */",
      "//now we can use one function for both discounts and surcharges, the three functions below are now deprecated.",
      "/**\n\t * DEPRECATED. Use $this->get_price_adjustments('discounts'); instead.\n\t */",
      "/**\n\t * DEPRECATED - Use $this->get_price_adjustments_amount('discounts', $pre_or_post, $price); instead.\n\t */",
      "/**\n\t * DEPRECATED - Use get_price_discounts_summary('discounts', $pre_or_post, $price); instead.\n\t */",
      "/**\n\t * Returns an array of discounts to be applied to a booking. Here is an example of an array item that is expected:\n\t * array('name' => 'Name of D",
      "//run this filter to be backwards compatible, e.g. em_booking_get_price_discount",
      "/**\n\t * Returns a numerical amount to adjust the price by, in the context of a certain type and before or after taxes.\n\t * This will be a positive num",
      "/**\n\t * Provides an array summary of adjustments to make to the price, in the context of a certain type and before or after taxes.\n\t * @param string $",
      "//adjustment by percentage",
      "//adjustment by amount",
      "/* END Price Adjustment Functions */",
      "/**\n\t * When generating totals at the bottom of a booking, this creates a useful array for displaying the summary in a meaningful way. \n\t */",
      "//get base price of bookings",
      "//apply pre-tax discounts",
      "//add taxes to price",
      "//apply post-tax discounts",
      "/**\n\t * Returns the amount paid for this booking. By default, a booking is considered either paid in full or not at all depending on whether the booki",
      "/* Get Objects linked to booking */",
      "/**\n\t * Gets the event this booking belongs to and saves a reference in the event property\n\t * @return EM_Event\n\t */",
      "/**\n\t * Gets the ticket object this booking belongs to, saves a reference in ticket property\n\t * @return EM_Tickets\n\t */",
      "/**\n\t * Gets the ticket object this booking belongs to, saves a reference in ticket property\n\t * @return EM_Tickets_Bookings EM_Tickets_Bookings\n\t */",
      "/**\n\t * @return EM_Person\n\t */",
      "//This person is already included, so don't do anything",
      "//if this user is the parent user of disabled registrations, replace user details here:",
      "//override any registration data into the person objet",
      "//if a full name is given, overwrite the first/last name values IF they are also not defined",
      "// prevent fatal errors further down, this is still a problem though",
      "//if last name isn't defined, provide the rest of the name minus the first name we just removed",
      "//first name is defined, so we remove it from full name in case we need the rest for surname",
      "//no first name defined, check for last name and act accordingly",
      "//we do opposite of above, remove last name from full name and use the rest as first name",
      "//no defined first or last name, so we use the name and take first string for first name, second part for surname",
      "//build display name",
      "/**\n\t * Gets personal information from the $_REQUEST array and saves it to the $EM_Booking->booking_meta['registration'] array\n\t * @return boolean\n\t *",
      "// Check the e-mail address",
      "//apostrophes will not be allowed otherwise",
      "//Check the user name",
      "//split full name up and save full, first and last names",
      "//Check the first/last name",
      "//in case someone else added stuff",
      "/**\n\t * Displays a form containing user fields, used in no-user booking mode for editing guest users within a booking\n\t * @return string\n\t */",
      "/**\n\t * Returns a string representation of the booking's status\n\t * @return string\n\t */",
      "/**\n\t * I wonder what this does....\n\t * @return boolean\n\t */",
      "//delete the tickets too",
      "//normally, users can't manage a booking, only event owners, so we allow them to mod their booking status in this case only.",
      "/**\n\t * Approve a booking.\n\t * @return bool\n\t */",
      "/**\n\t * Reject a booking and save\n\t * @return bool\n\t */",
      "/**\n\t * Unapprove a booking.\n\t * @return bool\n\t */",
      "/**\n\t * Change the status of the booking. This will save to the Database too. \n\t * @param int $status\n\t * @return boolean\n\t */",
      "//if we're approving we can't approve a booking if spaces are full, so check before it's approved.",
      "// run the filter before emails go out, in case others need to hook in first",
      "//email if status has changed",
      "// method params passed as array",
      "//extra errors may be logged by email() in EM_Object",
      "//errors should be logged by save()",
      "// previously default was rsvp end",
      "/**\n\t * Returns true if booking is reserving a space at this event, whether confirmed or not \n\t */",
      "/**\n\t * Returns true if booking is associated with a non-registered user, i.e. booked as a guest 'no user mode'.\n\t * @return mixed\n\t */",
      "/**\n\t * Returns true if booking is either pending or reserved but not confirmed (which is assumed pending) \n\t */",
      "/**\n\t * Add a booking note to this booking. returns wpdb result or false if use can't manage this event.\n\t * @param string $note\n\t * @return mixed\n\t *",
      "//Check if the language we want exists, if not we take the first language there",
      "// run conditionals, but don't erase unrecognized replacements, leave that to EM_Event->output()",
      "//calculate lengths to delete placeholders",
      "/* @var $EM_Ticket EM_Ticket */",
      "//Get first ticket for single ticket placeholders",
      "//sort out replacements so that during replacements shorter placeholders don't overwrite longer varieties.",
      "//run event output too, since this is never run from within events and will not infinitely loop",
      "//allows us to override the booking event info if it belongs to a parent or translation",
      "/**\n\t * Function mainly aimed for overriding by extending classes, avoiding the need to use a filter instead.\n\t * @param string $full_result\n\t * @para",
      "// $placeholder = $placeholder_atts[0]; // this is the placeholder, no atts",
      "/**\n\t * @param boolean $email_admin\n\t * @param boolean $force_resend\n\t * @param boolean $email_attendee\n\t * @return boolean\n\t */",
      "//Make sure event matches booking, and that booking used to be approved.",
      "// before we format dates or any other language-specific placeholders, make sure we're translating the site language, not the user profile language in",
      "//get event info and refresh all bookings",
      "//We NEED event details here.",
      "//refresh all bookings",
      "//messages can be overridden just before being sent",
      "//Send user (booker) emails",
      "//Send to the person booking",
      "//Send admin/contact emails if this isn't the event owner or an events admin",
      "//emails won't be sent if admin is logged in unless they book themselves",
      "//get admin emails that need to be notified, hook here to add extra admin emails",
      "//supply emails as array",
      "//add event owner contact email to list of admin emails",
      "//proceed to email admins if need be",
      "//Only gets sent if this is a pending booking, unless approvals are disabled.",
      "// restore the locale back for the rest of the site, which will happen if we switched it earlier",
      "//TODO need error checking for booking mail send",
      "//blank msg template",
      "//admin messages won't change whether pending or already approved",
      "//TODO remove offline status from here and move to pro",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "/**\n\t * Returns an EM_DateTime representation of when booking was made in UTC timezone. If no valid date defined, false will be returned\n\t * @param bo",
      "//we retrn a date regardless but it's not based on a 'valid' booking date",
      "//Set to UTC timezone if requested, local blog time by default",
      "//we could set this to false but this way we might avoid creating a new timezone if it's already in this one",
      "/**\n\t * Can the user manage this event? \n\t */",
      "/**\n\t * Returns this object in the form of an array\n\t * @return array\n\t */",
      "// returned as decimal/percen",
      "// if event data should be sent"
    ],
    "length": 69105,
    "preview": "<?php\n/**\n * gets a booking in a more db-friendly manner, allows hooking into booking object right after instantiation\n * @param mixed $id\n * @param mixed $search_by\n * @return EM_Booking\n */\nfunction em_get_booking($id = false) {\n\tglobal $EM_Booking",
    "file": "src/code/events-manager/classes/em-booking.php"
  },
  {
    "type": "php",
    "functions": [
      "em_get_event",
      "__construct",
      "__get",
      "__set",
      "__isset",
      "__clone",
      "load_postdata",
      "get_event_meta",
      "get_post",
      "get_post_meta",
      "validate",
      "validate_meta",
      "save",
      "save_meta",
      "duplicate",
      "duplicate_url",
      "delete",
      "delete_meta",
      "delete_bookings",
      "delete_tickets",
      "set_status",
      "set_timezone",
      "get_timezone",
      "is_published",
      "start",
      "end",
      "rsvp_end",
      "get_datetime",
      "get_status",
      "get_previous_status",
      "get_categories",
      "get_colors",
      "get_parent",
      "get_location",
      "has_location",
      "get_event_location",
      "has_event_location",
      "get_contact",
      "get_bookings",
      "get_tickets",
      "get_tax_rate",
      "get_spaces",
      "get_image_url",
      "get_edit_reschedule_url",
      "get_edit_url",
      "get_bookings_url",
      "get_permalink",
      "get_ical_url",
      "is_free",
      "output_single",
      "output",
      "if",
      "generate_ical_url",
      "output_times",
      "output_dates",
      "is_recurring",
      "is_recurrence",
      "is_individual",
      "get_event_recurrence",
      "get_detach_url",
      "get_attach_url",
      "detach",
      "attach",
      "save_events",
      "sanitize_recurrence_slug",
      "delete_events",
      "get_recurrence_days",
      "set_status_events",
      "get_recurrence_description",
      "to_array",
      "can_manage",
      "to_api",
      "em_event_output_placeholder",
      "em_booking_form_status_disabled",
      "em_booking_form_status_full",
      "em_booking_form_status_closed",
      "em_booking_form_status_already_booked",
      "em_event_gallery_override",
      "em_event_gallery_override_init"
    ],
    "classes": [
      "instantiations",
      "EM_Event"
    ],
    "comments": [
      "/**\n * Get an event in a db friendly way, by checking globals, cache and passed variables to avoid extra class instantiations.\n * @param mixed $id can",
      "//check if it's not already global so we don't instantiate again",
      "//check the cache first",
      "//if we get this far, just create a new event",
      "/**\n * Event Object. This holds all the info pertaining to an event, including location and recurrence info.\n * An event object can be one of three \"t",
      "//TODO Can add more recurring functionality such as \"also update all future recurring events\" or \"edit all events\" like google calendar does.",
      "//TODO Integrate recurrences into events table",
      "//FIXME If you create a super long recurrence timespan, there could be thousands of events... need an upper limit here.",
      "/* Field Names */",
      "/**\n\t * The event start time in local time, represented by a mysql TIME format or 00:00:00 default.\n\t * Protected so when set in PHP it will reset the",
      "/**\n\t * The event end time in local time, represented by a mysql TIME format or 00:00:00 default.\n\t * Protected so when set in PHP it will reset the E",
      "/**\n\t * The event start date in local time. represented by a mysql DATE format.\n\t * Protected so when set in PHP it will reset the EM_Event->start pro",
      "/**\n\t * The event end date in local time. represented by a mysql DATE format.\n\t * Protected so when set in PHP it will reset the EM_Event->start prope",
      "/**\n\t * The event start date/time in UTC timezone, represented as a mysql DATETIME value. Protected non-accessible property. \n\t * Use $EM_Event->start",
      "/**\n\t * The event end date/time in UTC timezone, represented as a mysql DATETIME value. Protected non-accessible property.\n\t * Use $EM_Event->end() to",
      "/**\n\t * Whether an event is all day or at specific start/end times. When set to true, event start/end times are assumed to be 00:00:00 and 11:59:59 re",
      "/**\n\t * Timezone representation in PHP string or WP-style UTC offset.\n\t * @var string\n\t */",
      "/**\n\t * Key name of event location type associated to this event.\n\t *\n\t * Events can have an event-specific location type, such as a url, webinar or a",
      "/**\n\t * Populated with the non-hidden event post custom fields (i.e. not starting with _) \n\t * @var array\n\t */",
      "/* Recurring Specific Values */",
      "/* anonymous submission information */",
      "/**\n\t * Previously used to give this object shorter property names for db values (each key has a name) but this is now deprecated, use the db field na",
      "//is this a recurring event template",
      "//every x day(s)/week(s)/month(s)",
      "//daily,weekly,monthly?",
      "//each event spans x days",
      "//if weekly or monthly, what days of the week?",
      "//if monthly which week (-1 is last)",
      "//days before or after start date to generat bookings cut-off date",
      "//fields that won't be taken from the em_events table anymore",
      "/**\n\t * EM_DateTime of start date/time in local timezone.\n\t * As of EM 5.8 this property is protected and accessible via __get(). For backwards compat",
      "/**\n\t * EM_DateTime of end date/time in local timezone.\n\t * As of EM 5.8 this property is protected and accessible via __get(). For backwards compatib",
      "/**\n\t * Timestamp for booking cut-off date/time\n\t * @var EM_DateTime\n\t */",
      "/**\n\t * @var EM_Location\n\t */",
      "/**\n\t * @var Event_Location\n\t */",
      "/**\n\t * If we're switching event location types, previous event location is kept here and deleted upon save()\n\t * @var Event_Location\n\t */",
      "/**\n\t * @var EM_Bookings\n\t */",
      "/**\n\t * The contact person for this event\n\t * @var WP_User\n\t */",
      "/**\n\t * The categories object containing the event categories\n\t * @var EM_Categories\n\t */",
      "/**\n\t * The tags object containing the event tags\n\t * @var EM_Tags\n\t */",
      "/**\n\t * If there are any errors, they will be added here.\n\t * @var array\n\t */",
      "/**\n\t * If something was successful, a feedback message might be supplied here.\n\t * @var string\n\t */",
      "/**\n\t * Any warnings about an event (e.g. bad data, recurrence, etc.)\n\t * @var string\n\t */",
      "/**\n\t * Array of dbem_event field names required to create an event \n\t * @var array\n\t */",
      "/**\n\t * previous status of event when instantiated\n\t * @access protected\n\t * @var mixed\n\t */",
      "/**\n\t * If set to true, recurring events will delete and recreate recurrences when saved.\n\t * @var boolean\n\t */",
      "/**\n\t * If set to true, recurring events will delete bookings and tickets of recurrences and recreate tickets. If set explicitly to false bookings wil",
      "/**\n\t * Flag used for when saving a recurring event that previously had bookings enabled and then subsequently disabled.\n\t * If set to true, and $this",
      "/**\n\t * If the event was just added/created during this execution, value will be true. Useful when running validation or making decisions on taking ac",
      "/* Post Variables - copied out of post object for easy IDE reference */",
      "/**\n\t * Initialize an event. You can provide event data in an associative array (using database table field names), an id number, or false (default) t",
      "//deal with the old array style, but we can't supply arrays anymore",
      "//only load info if $id is a number",
      "//search by event_id, get post_id and blog_id (if in ms mode) and load the post",
      "//if searching specifically by post_id and in MS Global mode, then assume we're looking in the current blog we're in",
      "//get post data based on ID and search context",
      "//we've been given a blog_id, so we're searching for a post id",
      "//search for the post id only",
      "//if we're in MS Global mode, then unless a blog id was specified, we assume the current post object belongs to the current blog",
      "//set default timezone",
      "//get default timezone for event, and sanitize UTC variations",
      "//set a default timezone if none exists",
      "//set recurrence value already",
      "//Do it here so things appear in the po file.",
      "// fire hook to add any extra info to an event",
      "//add this event to the cache",
      "//get the modified or created date from the DB only if requested, and save to object",
      "//deprecated properties for external access, use the start(), end() and rsvp_end() functions to access any of this data.",
      "//if date is valid, set it, if not set it to null",
      "//if time is valid, set it, otherwise set it to midnight",
      "//deprecated properties, use start()->setTimestamp() instead",
      "/**\n\t * When cloning this event, we get rid of the bookings and location objects, since they can be retrieved again from the cache instead. \n\t */",
      "//load event post object if it's an actual object and also a post type of our event CPT names",
      "//load post data - regardless",
      "//merge post object into this object",
      "//load meta data and other related information",
      "//load this directly so we know further down whether this has an event location type to load",
      "//Get custom fields and post meta",
      "//quick compatability fix in case _event_id isn't loaded or somehow got erased in post meta",
      "//we have an orphan... show it, so that we can at least remove it on the front-end",
      "//if MS Global mode enabled, make sure we search by blog too so there's no cross-post confusion",
      "//reset post_id because it doesn't really exist",
      "//just set location_id to 0 and avoid any doubt",
      "//events created before going multisite may have null values, so we set it to main site id",
      "//if there's a blog id already, there's no doubt where to look for",
      "// if in multisite mode, switch blogs quickly to get the right post meta.",
      "// if a blog ID wasn't defined then we'll check the main blog, in case the event was created in the past",
      "/**\n\t * Retrieve event information via POST (only used in situations where posts aren't submitted via WP)\n\t * @return boolean\n\t */",
      "//we need to get the post/event name and content.... that's it.",
      "//don't forget categories!",
      "//get the rest and validate (optional)",
      "//anonymous submissions and guest basic info",
      "//validate and return results",
      "//validate both post and meta, otherwise return true",
      "/**\n\t * Retrieve event post meta information via POST, which should be always be called when saving the event custom post via WP.\n\t * @return boolean\n",
      "//Check if this is recurring or not early on so we can take appropriate action further down",
      "//Set Event Timezone to supplied value or alternatively use blog timezone value by default.",
      "//if timezone was already set but not supplied, we don't change it",
      "//Dates and Times - dates ignored if event is recurring being updated (not new) and not specifically chosen to reschedule event",
      "//reset start and end objects so they are recreated with the new dates/times if and when needed",
      "// determine location type, with backward compatibility considerations for those overriding the location forms",
      "// assign location data",
      "// a physical location, old school",
      "// if location resides in locations table, location type is null since we have a location_id table value",
      "// we're using a previously created location",
      "//we're adding a new location place, so create an empty location and populate",
      "//reset post content, as it'll grab the event description otherwise",
      "// we're dealing with an event location such as a url or webinar",
      "// if we're changing location types, then we'll delete all the previous data upon saving",
      "//we shouldn't save new data during a preview auto-save",
      "//get tickets only if event is new, non-recurring, or recurring but specifically allowed to reschedule by user",
      "//RSVP cuttoff TIME is set up above where start/end times are as well",
      "//single ticket mode will use the ticket end date/time as cut-off date/time",
      "//no default ticket end time, so make it default to event start date/time",
      "//all-day events start at 0 hour",
      "//if no rsvp cut-off date supplied, make it the event start date",
      "//if no specificed time, default to event start time",
      "//reset EM_DateTime object",
      "//Sort out event attributes - note that custom post meta now also gets inserted here automatically (and is overwritten by these attributes)",
      "//we use this in locations, no need to repeat if needed",
      "// get other event attributes, we may want to",
      "//If event is new or reschedule is requested, then proceed with new time pattern",
      "//dates and time schedules of events",
      "//here we do a comparison between new and old event data to see if we are to reschedule events or recreate bookings",
      "//only needed if this is an existing event needing rescheduling/recreation",
      "//Get original recurring event so we can tell whether event recurrences or bookings will be recreated or just modified",
      "//first check event times",
      "//check previously saved event info compared to current recurrence info to see if we need to reschedule",
      "//something changed, so we reschedule",
      "//now check tickets if we don't already have to reschedule",
      "//@TODO - ideally tickets could be independent of events, it'd make life easier here for comparison and editing without rescheduling",
      "//we compare tickets",
      "//something changed, so we reschedule",
      "//something changed, so we reschedule",
      "//we have a new ticket",
      "//new event so we create everything from scratch",
      "//recurring events may have a cut-off date x days before or after the recurrence start dates",
      "//if in single ticket mode then ticket cut-off date determines event cut-off date",
      "//by default the start date is the point of reference",
      "//create timestamps and set rsvp date/time for a normal event",
      "//falback in case nothing gets set for rsvp cut-off",
      "// to avoid any doubt",
      "//categories in MS GLobal",
      "//it'll know what to do",
      "//anonymous submissions and guest basic info",
      "//must pass if we can't validate bookings",
      "// no location chosen, yet we require a location",
      "// physical location",
      "// new location doesn't validate",
      "// non-existent location selected",
      "// event location, validation applies errors directly to $this",
      "// TODO Create friendly equivelant names for missing fields notice in validation",
      "/**\n\t * Will save the current instance into the database, along with location information if a new one was created and return true if successful, fals",
      "//this flag prevents our dashboard save_post hooks from going further",
      "//unless events can be submitted by an anonymous user (and this is a new event), user must have permissions.",
      "//start saving process",
      "//Deal with updates to an event",
      "//get the full array of post data so we don't overwrite anything.",
      "//Overwrite new post info",
      "//decide on post status",
      "//anonymous submission only",
      "//Save post and continue with meta",
      "//refresh this event with wp post info we'll put into the db",
      "//anonymous submissions should save this information",
      "//save the image, errors here will surface during $this->save_meta()",
      "//do a dirty update for location too if it's not published",
      "//let's also publish the location",
      "//reload post data and add this event to the cache, after any other hooks have done their thing",
      "//cache refresh when saving via admin area is handled in EM_Event_Post_Admin::save_post/refresh_cache",
      "//we won't depend on hooks, if we saved the event and it's still published in its saved state, refresh the cache regardless",
      "//sort out multisite blog id if appliable",
      "//trigger setting of event_end and event_start in case it hasn't been set already",
      "//continue with saving if permissions allow",
      "//first save location",
      "//proceed with location save",
      "//only case we don't use get_location(), since it will fail as location has an id, whereas location_id isn't set in this object",
      "//certain keys will not be saved if not needed, including flags with a 0 value. Older databases using custom WP_Query calls will need to use an array ",
      "//ignore certain fields and delete if not new",
      "//not needed, given postmeta is stored on the actual blog table in MultiSite",
      "//we don't need rsvp info if rsvp is not set, including the RSVP flag too",
      "//save key or ignore/delete key",
      "//delete if this event already existed, in case this event already had the values before",
      "//we should delete event_attributes, but maybe something else uses it without us knowing",
      "//attributes get saved as individual keys",
      "//get available attributes that EM manages",
      "// save other event attributes, we may want to",
      "//update timestamps, dates and times",
      "//Deprecated, only for backwards compatibility, these meta fields will eventually be deleted!",
      "//sort out event status",
      "//set status at this point, it's either the current status, or if validation fails, null",
      "//Save to em_event table",
      "//decide whether or not event is private at this point",
      "//check if event truly exists, meaning the event_id is actually a valid event id",
      "//we're dealing with an orphaned event in wp_em_events table, so we want to update the post_id and give it a post parent",
      "//for sure this was previously status 0",
      "//success, so link the event with the post via an event id meta value for easy retrieval",
      "//set bookings array to 0 to avoid an extra DB query",
      "//in case the content was removed, which is acceptable",
      "//Also set the status here if status != previous status",
      "//check anonymous submission information",
      "//anonymous user owner has been replaced with a valid wp user account, so we remove anonymous status flag but leave email and name for future referenc",
      "//anonymous user account has been reinstated as the owner, so we can restore anonymous submission status",
      "//update event location via post meta",
      "// we previously had an event location and then switched to no location or a physical location",
      "// we've switched event location types",
      "//Add/Delete Tickets",
      "//deal with categories",
      "//EM_MS_Globals should look up original blog",
      "//If we're saving event categories in MS Global mode, we'll add them here, saving by term id (cat ids are gone now)",
      "//it'll know what to do",
      "//just save to index, we assume cats are saved in $this->save();",
      "//double-check for default category in other instances",
      "//let the object deal with this...",
      "//compatability keys, loaded before saving recurrences",
      "//build recurrences if needed",
      "//only save events if recurring event validates and is published or set for future",
      "//If we're in WP Admin and this was called by EM_Event_Post_Admin::save_post, don't save here, it'll be done later in EM_Event_Recurring_Post_Admin::s",
      "/**\n\t * Duplicates this event and returns the duplicated event. Will return false if there is a problem with duplication.\n\t * @return EM_Event\n\t */",
      "//before we remove event/post ids",
      "//in case this wasn't loaded and before we reset ids",
      "//if bookings reset ticket ids and duplicate tickets",
      "//save tags here - eventually will be moved into part of $this->save();",
      "//other non-EM post meta inc. featured image",
      "//Get custom fields and post meta - adapted from $this->load_post_meta()",
      "//allow JetPack Publicize to detect this as a new post when published",
      "//save in one SQL statement",
      "//copy anything from the em_meta table too",
      "//set event to draft status",
      "//TODO add error notifications for duplication failures.",
      "/**\n\t * Delete whole event, including bookings, tickets, etc.\n\t * @param boolean $force_delete\n\t * @return boolean\n\t */",
      "//we're probably dealing with a trashed post already, but the event_status is null from < v5.4.1",
      "//this is an orphaned event, so the wp delete posts would have never worked, so we just delete the row in our events table",
      "//Delete the recurrences then this recurrence event",
      "//was true at this point, so false if fails",
      "//Delete categories from meta if in MS global mode",
      "/**\n\t * Deprecated, use $this->get_bookings->delete() instead.\n\t * Shortcut function for $this->get_bookings()->delete(), because using the EM_Booking",
      "/**\n\t * Deprecated, use $this->get_bookings->delete() instead.\n\t * Shortcut function for $this->get_bookings()->delete(), because using the EM_Booking",
      "/**\n\t * Change the status of the event. This will save to the Database too. \n\t * @param int $status \t\t\t\tA number to change the status to, which may be",
      "//decide on what status to set and update wp_posts in the process",
      "//if the post is trash, don't untrash it!",
      "//set post status in this instance",
      "//set the post status of the location in wp_posts too",
      "//set post status in this instance",
      "//published or pending post",
      "//published or pending posts should have a valid post slug",
      "//if we've added a post slug then update wp_posts anyway",
      "//save in the wp_em_locations table",
      "//reset UTC times and objects so they're recreated with local time and new timezone",
      "//modify the timezone string name itself",
      "/**\n\t * Returns an EM_DateTime object of the event start date/time in local timezone of event.\n\t * @param bool $utc_timezone Returns EM_DateTime with ",
      "/**\n\t * Returns an EM_DateTime object of the event end date/time in local timezone of event\n\t * @param bool $utc_timezone Returns EM_DateTime with UTC",
      "/**\n\t * Returns an EM_DateTime representation of when bookings close in local event timezone. If no valid date defined, event start date/time will be ",
      "//invalid date will revert to start time",
      "//no date defined means event start date/time is used",
      "//Set to UTC timezone if requested, local by default",
      "/**\n\t * Generates an EM_DateTime for the the start/end date/times of the event in local timezone, as well as setting a valid flag if dates and times a",
      "//currently only start/end dates are relevant",
      "//Initialize EM_DateTime if not already initialized, or if previously initialized object is invalid (e.g. draft event with invalid dates being resubmi",
      "//we take a pass at creating a new datetime object if it's empty, invalid or a different time to the current start date",
      "//If there now is a valid date string for local or UTC timezones, create a new object which will set the valid flag to true by default",
      "//If we didn't attempt to create a date above, or it didn't work out, create an invalid date based on time.",
      "//create a new datetime just with the time (if set), fake date and set the valid flag to false",
      "/* @var EM_DateTime $EM_DateTime */",
      "//Set to UTC timezone if requested, local by default",
      "//get status from db, not post_status, as posts get saved quickly",
      "/**\n\t * Returns an EM_Categories object of the EM_Event instance.\n\t * @return EM_Categories\n\t */",
      "/**\n\t * Returns an array of colors of this event based on the category assigned. Will return a pre-formatted CSS variables assignment for use in the s",
      "/* @var $EM_Category EM_Category */",
      "/**\n\t * Gets the parent of this event, if none exists, null is returned.\n\t * @return EM_Event|null\n\t */",
      "/**\n\t * Returns the physical location object this event belongs to.\n\t * @return EM_Location\n\t */",
      "/**\n\t * Returns whether this event has a phyisical location assigned to it.\n\t * @return bool\n\t */",
      "/**\n\t * Gets the event's event location (note, different from a regular event location, which uses get_location())\n\t * Returns implementation of Event",
      "/**\n\t * Returns whether the event has an event location associated with it (different from a physical location). If supplied, can check against a spec",
      "/**\n\t * Returns the location object this event belongs to.\n\t * @return EM_Person\n\t */",
      "//if this is anonymous submission, change contact email and name",
      "/**\n\t * Retrieve and save the bookings belonging to instance. If called again will return cached version, set $force_reload to true to create a new EM",
      "//always refresh event_id",
      "//TODO for some reason this returned instance doesn't modify the original, e.g. try $this->get_bookings()->add($EM_Booking) and see how $this->booking",
      "/**\n\t * Get the tickets related to this event.\n\t * @param boolean $force_reload\n\t * @return EM_Tickets\n\t */",
      "/* Provides the tax rate for this event.\n\t * @see EM_Object::get_tax_rate()\n\t */",
      "//we get tax rate but without decimal",
      "/**\n\t * Deprecated - use $this->get_bookings()->get_spaces() instead.\n\t * Gets number of spaces in this event, dependent on ticket spaces or hard limi",
      "/* \n\t * Extends the default EM_Object function by switching blogs as needed if in MS Global mode  \n\t * @param string $size\n\t * @return string\n\t * @see",
      "//if no blog id defined, assume it's the main blog",
      "//if we're not on the same blog as this event then decide whether to link to main blog or to source blog",
      "//if on main site, and events page exists and direct links are disabled then show link to main site",
      "//linking directly to the source blog by default",
      "/* @var $EM_Ticket EM_Ticket */",
      "/**\n\t * Will output a single event format of this event. \n\t * Equivalent of calling EM_Event::output( get_option ( 'dbem_single_event_format' ) )\n\t * ",
      "/**\n\t * Will output a event in the format passed in $format by replacing placeholders within the format.\n\t * @param string $format\n\t * @param string $",
      "//$format = do_shortcode($format); //parse shortcode first, so that formats within shortcodes are parsed properly, however uncommenting this will brea",
      "//Time place holder that doesn't show if empty.",
      "//This is for the custom attributes",
      "//check that we haven't mistakenly captured a closing bracket in second bracket set",
      "//Strip string of placeholder and just leave the reference",
      "//Check to see if we have a second set of braces;",
      "//First let's do some conditional placeholder removals",
      "//you can add nested recursions by modifying this setting in your wp_options table",
      "//Check if the language we want exists, if not we take the first language there",
      "//check if there's a booking, if not, remove this section of code.",
      "//check if there's a booking, if not, remove this section of code.",
      "//does this event have a valid location?",
      "//does this event have a valid location?",
      "//does this event have a valid physical location?",
      "//does this event NOT have a valid physical location?",
      "//does this event have a valid event location?",
      "//event has a specific category",
      "//does this event not have a valid event location?",
      "//does this event NOT have a specific event location?",
      "//does this event have an image?",
      "//does this event have an image?",
      "//are the booking times different and not an all-day event",
      "//are the booking times exactly the same and it's not an all-day event.",
      "//current event timezone is different to blog timezone",
      "//current event timezone is different to blog timezone",
      "//is it an all day event",
      "//is not an all day event",
      "//there are still empty spaces",
      "//event is fully booked",
      "//bookings are still open",
      "//bookings are still closed",
      "//is it a free day event, if _now then free right now",
      "//is it a paid event, if _now then paid right now",
      "//is it an all day event",
      "//is it an all day event",
      "//if event is upcoming",
      "//if event is currently happening",
      "//if event is a recurring event",
      "//if event is not a recurring event",
      "//if event is a recurrence",
      "//if event is not a recurrence",
      "//if event is a recurrence",
      "//if event is not a recurrence",
      "//if current user has a booking at this event",
      "//we only need a user id, booking id and booking status so we do a direct SQL lookup and once for the loop",
      "//user has a booking for this event, could be any booking status",
      "//user has no bookings to this event",
      "//user has a booking for this event, and we'll now look for a specific status",
      "//user has a booking for this event, and we'll now look for a specific status",
      "//event is in this category",
      "//event is in this category",
      "//event is NOT in this category",
      "//event is in this category",
      "//event is in this category",
      "//event has this tag",
      "//event doesn't have this tag",
      "//event has a specific custom field",
      "//event has a specific custom field",
      "//other potential ones - has_attribute_... no_attribute_... has_categories_...",
      "//calculate lengths to delete placeholders",
      "//Now let's check out the placeholders.",
      "//get format of time to show",
      "//get format of time to show but show timezone of site rather than local time",
      "// check for passed parameters, in which case we skip replacements entirely and use pure moment formats",
      "// if no moment format provided, we convert the one stored for times in php",
      "// convert EM format setting to moment formatting, adapted from https://stackoverflow.com/questions/30186611/php-dateformat-to-moment-js-format",
      "/* Day */",
      "/*o doesn't exist on its own, so we find/replase jS only*/",
      "/*'S' => 'o' - see jS*/",
      "/* Week */",
      "/* Month */",
      "/* days in the month => moment().daysInMonth(); */",
      "/* Year */",
      "/* Leap year? => moment().isLeapYear(); */",
      "/* Time */",
      "/* Swatch internet time (.beats), no equivalent */",
      "/* microseconds */",
      "/* milliseconds (from PHP 7.0.0) */",
      "/* Timezone */",
      "/* Timezone - deprecated since version 1.6.0 of moment.js, we'll use Intl.DateTimeFromat().resolvedOptions().timeZone instead. */",
      "/* Daylight Saving Time? => moment().isDST(); */",
      "/* deprecated since version 1.6.0 of moment.js, using GMT difference with colon to keep it shorter than full timezone */",
      "/* time zone offset in seconds => moment().zone() * -60 : the negative is because moment flips that around; */",
      "/* Full Date/Time */",
      "/* ISO 8601 */",
      "/* RFC 2822 */",
      "// Converts escaped characters.",
      "//add to footer if not already",
      "//get format of time to show",
      "//get format of time to show",
      "//get format of time to show but use timezone of site rather than event",
      "//Recurring Placeholders",
      "//Outputs the #_EVENTDATES equivalent of the recurring event template pattern.",
      "//if not a recurrence, we're running output_dates on $this",
      "//xss fix for old overridden booking forms",
      "//get the range of prices",
      "/* @var $EM_Ticket EM_Ticket */",
      "//get the range of prices",
      "/* @var $EM_Ticket EM_Ticket */",
      "//get the range of prices",
      "/* @var $EM_Ticket EM_Ticket */",
      "//This placeholder is actually a little misleading, as it'll consider reserved (i.e. pending) bookings as 'booked'",
      "//deprecated (your call, I think name is better)",
      "//Categories and Tags",
      "//','https://'), 'webcal://', $replace);",
      "//get dates in UTC/GMT time",
      "//www.google.com/calendar/event?action=TEMPLATE&text=event_name&dates=start_date/end_date&details=post_content&location=location_name&trp=false&sprop=",
      "//www.google.com/calendar/images/ext/gc_button2.gif';",
      "//outlook.live.com':'https://outlook.office.com';",
      "//Event location (not physical location)",
      "//','https://'), 'webcal://', $this->get_ical_url())); ?>\" target=\"_blank\">iCalendar</a>",
      "//sort out replacements so that during replacements shorter placeholders don't overwrite longer varieties.",
      "//this will avoid repeated filters when locations/categories are parsed",
      "// matches all PHP START date and time placeholders",
      "// matches all PHP END time placeholders for endtime",
      "//Now do dependent objects",
      "//for backwards compat and easy use, take over the individual category placeholders with the frirst cat in th elist.",
      "//Finally, do the event notes, so that previous placeholders don't get replaced within the content, which may use shortcodes",
      "//do some specific formatting",
      "//TODO apply this sort of formatting to any output() function",
      "//strip html and escape characters",
      "//remove and define line breaks in ical format",
      "//replace url template placeholders",
      "//calculate URL length so we know how much we can work with to make a description.",
      "/**********************************************************\n\t * RECURRENCE METHODS\n\t ***********************************************************/",
      "/**\n\t * Returns true if this is a recurring event.\n\t * @return boolean\n\t */",
      "/**\n\t * Will return true if this individual event is part of a set of events that recur\n\t * @return boolean\n\t */",
      "/**\n\t * Returns if this is an individual event and is not a recurrence\n\t * @return boolean\n\t */",
      "/**\n\t * Gets the event recurrence template, which is an EM_Event object (based off an event-recurring post)\n\t * @return EM_Event\n\t */",
      "/**\n\t * Returns if this is an individual event and is not recurring or a recurrence\n\t * @return boolean\n\t */",
      "//remove recurrence id from post meta and index table",
      "/**\n\t * Returns if this is an individual event and is not recurring or a recurrence\n\t * @return boolean\n\t */",
      "//add recurrence id to post meta and index table",
      "/**\n\t * Saves events and replaces old ones. Returns true if sucecssful or false if not.\n\t * @return boolean\n\t */",
      "//check if there's any events already created, if not (such as when an event is first submitted for approval and then published), force a reschedule.",
      "//actions/filters only run if event is recurring",
      "//Make template event index, post, and meta (we change event dates, timestamps, rsvp dates and other recurrence-relative info whilst saving each event",
      "//event template - for index",
      "//make sure we'll save events, not recurrence templates",
      "//convert meta_fields into a cleaner array",
      "//remove id and we have a event template to feed to wpdb insert",
      "//legacy bugfix, post_id was never needed in meta table",
      "//remove recurrence meta info we won't need in events",
      "//Set the recurrence ID",
      "//Let's start saving!",
      "//template sanitized post slug since we'll be using this",
      "//First thing - times. If we're changing event times, we need to delete all events and recreate them with the right times, no other way",
      "//Delete old events beforehand, this will change soon",
      "//Get days where events recur",
      "//since the recurrences are recreated",
      "//first save event post data",
      "//set start date/time to $EM_DateTime for relative use further on",
      "//for quick access later",
      "//rewrite post fields if needed",
      "//set post slug, which may need to be sanitized for length as we pre/postfix a date for uniqueness",
      "//add rsvp date/time restrictions",
      "//cloned so original object isn't modified",
      "//cloned so original object isn't modified",
      "//$EM_DateTime modified here, and used further down for UTC end date",
      "//for quick access later",
      "//add extra date/time post meta",
      "//Deprecated meta fields",
      "//post id saved into event and also as a var for later user",
      "// Set GUID and event slug as per wp_insert_post",
      "//insert into events index table",
      "//create the meta inserts for each event",
      "//if( EM_DEBUG ){ echo \"Entering recurrence \" . date(\"D d M Y\", $day).\"<br/>\"; }",
      "//insert the metas in one go, faster than one by one",
      "//we go through all event main data and meta data, we delete and recreate all meta data",
      "//now unset some vars we don't need to deal with since we're just updating data in the wp_em_events and posts table",
      "//since the recurrences are modified but not recreated",
      "// we'll ignore this and add it manually",
      "// clean the meta fields array to contain only the fields we actually need to overwrite i.e. delete and recreate, to avoid deleting unecessary individ",
      "//now we go through the recurrences and check whether things relative to dates need to be changed",
      "/* @var $EM_Event EM_Event */",
      "//set new start/end times to obtain accurate timestamp according to timezone and DST",
      "//set indexes for reference further down",
      "//do we need to change the slugs?",
      "//(re)set post slug, which may need to be sanitized for length as we pre/postfix a date for uniqueness",
      "//adjust certain meta information relative to dates and times",
      "//add meta fields we deleted and are specific to this event",
      "//overwrite event and post tables",
      "//save meta field data for insertion in one go",
      "// delete all meta we'll be updating",
      "// insert the metas in one go, faster than one by one",
      "//Next - Bookings. If we're completely rescheduling or just recreating bookings, we're deleting them and starting again",
      "//if set specifically to false, we skip bookings entirely (ML translations for example)",
      "//first, delete all bookings & tickets if we haven't done so during the reschedule above - something we'll want to change later if possible so booking",
      "//create empty EM_Bookings and EM_Tickets objects to circumvent extra loading of data and SQL queries",
      "//$events was defined in the else statement above so we reuse it",
      "//trick EM_Bookings and EM_Tickets to think it was loaded, and make use of optimized delete functions since 5.7.3.4",
      "//if bookings hasn't been disabled, delete it all",
      "/* @var $EM_Ticket EM_Ticket */",
      "//get array, modify event id and insert",
      "//empty cut-off dates of ticket, add them at per-event level",
      "//clean up ticket values",
      "//prep ticket meta for insertion with relative info for each event date",
      "//sort out cut-of dates",
      "//by using EM_DateTime we'll generate timezone aware dates",
      "//create empty EM_Bookings and EM_Tickets objects to circumvent extra loading of data and SQL queries",
      "//$events was defined in the else statement above so we reuse it",
      "//trick EM_Bookings and EM_Tickets to think it was loaded, and make use of optimized delete functions since 5.7.3.4",
      "//copy the event tags and categories, which are automatically deleted/recreated by WP and EM_Categories",
      "//In MS Global mode, we also save category meta information for global lookups so we use our objects",
      "//we save index data for each category in in MS Global mode",
      "//set and trick category event and post ids so it saves to the right place",
      "//general taxonomies including event tags",
      "//save of category will soft-fail if slug is empty",
      "// clear anything else in the system",
      "/**\n\t * Ensures a post slug is the correct length when the date postfix is added, which takes into account multibyte and url-encoded characters and WP",
      "/**\n\t * Removes all recurrences of a recurring event.\n\t * @return null\n\t */",
      "//So we don't do something we'll regret later, we could just supply the get directly into the delete, but this is safer",
      "//delete events from em_events table",
      "// go through each event and delete individually so individual hooks are fired appropriately",
      "// success if we deleted something, or if there was nothing to delete in the first place",
      "//Deprecated, use em_event_delete_events",
      "/**\n\t * Returns the days that match the recurrance array passed (unix timestamps)\n\t * @param array $recurrence\n\t * @return array\n\t */",
      "//get timestampes for start and end dates, both at 12AM",
      "//what days of the week (or if monthly, one value at index 0)",
      "//the days we'll be returning in timestamps",
      "//generate matching dates based on frequency type",
      "/* @var EM_DateTime $current_date */",
      "//If daily, it's simple. Get start date, add interval timestamps to that and create matching day for each interval until end date.",
      "//sort out week one, get starting days and then days that match time span of event (i.e. remove past events in week 1)",
      "//Start of week depends on WordPress",
      "//then get the timestamps of weekdays during this first week, regardless if within event range",
      "//Days in week 1 where there would events, regardless of event date range",
      "//it's in our starting week day, so add it",
      "//for each day of eventful days in week 1, add 7 days * weekly intervals",
      "//Loop weeks by interval until we reach or surpass end date",
      "//loop months starting this month by intervals",
      "//Start date on first day of month, done this way to avoid 'first day of' issues in PHP < 5.6",
      "//Now find which day we're talking about",
      "//Loop through days of this years month and save matching days to temp array",
      "//Now grab from the array the x day of the month",
      "//date might not exist (e.g. fifth Sunday of a month) so only add if it exists",
      "//last day of month, so we pop the last matching day",
      "//if we have a matching day, get the timestamp, make sure it's within our start/end dates for the event, and add to array if it is",
      "//add the monthly interval to the current date, but set to 1st of current month first so we don't jump months where $current_date is 31st and next mon",
      "//done this way to avoid 'first day of ' PHP < 5.6 issues",
      "//Yearly is easy, we get the start date as a cloned EM_DateTime and keep adding a year until it surpasses the end EM_DateTime value.",
      "/**\n\t * If event is recurring, set recurrences to same status as template\n\t * @param $status\n\t */",
      "//give sub events same status",
      "//get post and event ids of recurrences",
      "//only get recurrences that aren't trashed or drafted",
      "//decide on what status to set and update wp_posts in the process",
      "//set post status in this instance",
      "//set post status in this instance",
      "//published or pending post",
      "/**\n\t * Returns a string representation of this recurrence. Will return false if not a recurrence\n\t * @return string\n\t */",
      "/**********************************************************\n\t * UTILITIES\n\t ***********************************************************/",
      "//we reset start/end datetimes here, based on the EM_DateTime objects if they are valid",
      "/**\n\t * Can the user manage this? \n\t */",
      "/**\n\t * Outputs a JSON-encodable associative array of data to output to REST or other remote operations\n\t * @return array\n\t */",
      "// overwritten further down",
      "//TODO placeholder targets filtering could be streamlined better",
      "/**\n * This is a temporary filter function which mimicks the old filters in the old 2.x placeholders function\n * @param string $result\n * @param EM_Ev",
      "// filters for general events field (corresponding to those of  \"the _title\")",
      "// filters for the notes field in html (corresponding to those of  \"the _content\")",
      "// filters for the notes field in html (corresponding to those of  \"the _content\")",
      "// RSS content filter",
      "// Notes map filters",
      "//embeds support if using placeholders",
      "// booking form notices, overridable to inject other content (e.g. waiting list)",
      "/**\n * This function replaces the default gallery shortcode, so it can check if this is a recurring event recurrence and pass on the parent post id as",
      "//no id specified, so check if it's recurring and override id with recurrence template post id",
      "//so that plugins like JetPack don't think we're overriding gallery, we're not i swear!"
    ],
    "length": 186245,
    "preview": "<?php\nuse EM_Event_Locations\\Event_Location, EM_Event_Locations\\Event_Locations;\n/**\n * Get an event in a db friendly way, by checking globals, cache and passed variables to avoid extra class instantiations.\n * @param mixed $id can be either a post o",
    "file": "src/code/events-manager/classes/em-event.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "get",
      "get_url",
      "get_ical_url",
      "get_rss_url",
      "get_color",
      "get_image_url",
      "get_image_id",
      "has_events",
      "output_single",
      "output",
      "output_excerpt",
      "placeholder_image",
      "can_manage"
    ],
    "classes": [
      "for",
      "EM_Taxonomy_Term",
      "instance",
      "name",
      "The",
      "used"
    ],
    "comments": [
      "/**\n * Parent class for single taxonomy objects, which are essentially WP_Term objects.\n * @since 5.7.3.2\n */",
      "//Class-overridable options",
      "//initially used to supply string representing constant containing name of the specific taxonomy type",
      "//extra attributes imposed by EM Taxonomies",
      "/**\n\t * Gets data from POST (default), supplied array, or from the database if an ID is supplied\n\t * @param mixed $taxonomy_data\n\t */",
      "//Load taxonomy data",
      "//backward compatability",
      "/**\n\t * Returns a single EM_Taxonomy_Term child class instance based on supplied ID or slug and taxonony class name, such as EM_Tag or EM_Category.\n\t ",
      "//check if it's not already global so we don't instantiate again",
      "//Check if the language we want exists, if not we take the first language there",
      "//does this event have an image?",
      "//does this event have an image?",
      "//does this tax have any upcoming events",
      "//does this tax NOT have any upcoming events?",
      "//calculate lengths to delete placeholders",
      "//since we previously didn't store image ids along with the url to the image (since taxonomies don't allow normal featured images), sometimes we won't",
      "//','https://'), 'webcal://', $replace);",
      "//deprecated, erroneous documentation, left for compatability",
      "//deprecated, erroneous documentation, left for compatability",
      "//deprecated, erroneous documentation, left for compatability",
      "//convert deprecated placeholders for compatability",
      "//forget it ever happened? :/",
      "//shorten content by supplied number - copied from wp_trim_excerpt",
      "//since we previously didn't store image ids along with the url to the image (since taxonomies don't allow normal featured images), sometimes we won't",
      "//Figure out if this is multisite and require an extra bit of validation",
      "//if multisite and supoer admin, just return true",
      "//User can't admin this bit, as they're on a sub-blog"
    ],
    "length": 17743,
    "preview": "<?php\n/**\n * Parent class for single taxonomy objects, which are essentially WP_Term objects.\n * @since 5.7.3.2\n */\nclass EM_Taxonomy_Term extends EM_Object {\n\t\n\t//Class-overridable options\n\tpublic $option_ms_global = false;\n\tpublic $option_name = 't",
    "file": "src/code/events-manager/classes/em-taxonomy-term.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_head",
      "admin_notices",
      "admin_notices_filter",
      "wp_insert_post_data",
      "save_post",
      "refresh_cache",
      "maybe_publish_location",
      "before_delete_post",
      "trashed_post",
      "untrash_post",
      "untrashed_post",
      "meta_boxes",
      "meta_box_action_post_submitbox_start",
      "meta_box_metadump",
      "meta_box_anonymous",
      "meta_box_date",
      "meta_box_bookings_stats",
      "meta_box_bookings",
      "meta_box_bookings_overlay",
      "meta_box_attributes",
      "meta_box_location",
      "meta_box_ms_categories",
      "init",
      "admin_head",
      "save_post",
      "before_delete_post",
      "trashed_post",
      "untrash_post",
      "untrashed_post",
      "meta_boxes",
      "meta_box_recurrence"
    ],
    "classes": [
      "EM_Event_Post_Admin",
      "EM_Event_Recurring_Post_Admin"
    ],
    "comments": [
      "/*\n * Events Edit Page\n */",
      "//only needed if editing post",
      "//I don't think we need this anymore?",
      "//validate post meta before saving is done",
      "//set to 1 so metadata gets saved ASAP",
      "/* @var EM_Notices $EM_Notices */",
      "/**\n\t * Validate event once BEFORE it goes into the database, because otherwise it could get 'published' between now and save_post, \n\t * allowing othe",
      "//never proceed with this if using EM_Event::save();",
      "//we don't need to save anything here, we don't use this action",
      "//this is only run if we know form data was submitted, hence the nonce",
      "//Handle Errors by making post draft",
      "/* @var EM_Notices $EM_Notices */",
      "//never proceed with this if using EM_Event::save();",
      "//don't proceed with saving when previewing, may cause issues",
      "//we don't need to save anything here, we don't use this action",
      "//first filter for save_post in EM for events",
      "//Reset server timezone to UTC in case other plugins are doing something naughty",
      "//grab event, via post info, reset the $EM_Event variable",
      "//check whether this is a quick save or not, then save accordingly",
      "//this is only run if we know form data was submitted, hence the nonce",
      "//Handle Errors by making post draft",
      "//technically, the event is saved... but the meta isn't. wp doesn't give an pre-intervention action for this (or does it?)",
      "//if we execute a location save here, we will screw up the current save_post $wp_filter pointer executed in do_action()",
      "//therefore, we save the current pointer position (priority) and set it back after saving the location further down",
      "//save the event meta, whether validated or not and which includes saving a location",
      "//reset save_post pointer in $wp_filter to its original position",
      "//save categories in case of default category",
      "//continue whether all went well or not",
      "//failed somewhere, set to draft, don't publish",
      "//Always seems to redirect, so we make it static",
      "//Always seems to redirect, so we make it static",
      "//Always seems to redirect, so we make it static",
      "//if this is just published, we need to email the user about the publication, or send to pending mode again for review",
      "//no publishing and editing... security threat",
      "//flag a cache refresh if we get here",
      "//we're updating only the quick-edit style information, which is only post info saved into the index",
      "//technically, the event is saved... but the meta isn't. wp doesn't give an pre-intervention action for this (or does it?)",
      "//first things first, we must make sure we have an index, if not, reset it to a new one:",
      "//we can save the status now",
      "//before we save anything",
      "//if this is just published, we need to email the user about the publication, or send to pending mode again for review",
      "//no publishing and editing... security threat",
      "//If we're saving via quick-edit in MS Global mode, then the categories need to be pushed to the ms global index",
      "//just save to index, WP should have saved the taxonomy data",
      "//deal with recurrences",
      "//recurrences are (re)saved only if event is published",
      "//flag a cache refresh if we get here",
      "//technically, the event is saved... but the meta isn't. wp doesn't give an pre-intervention action for this (or does it?)",
      "//Event doesn't validate, so set status to null",
      "//Set server timezone back, even though it should be UTC anyway",
      "/**\n\t * Refreshes the cache of the current global $EM_Event, provided the refresh_cache flag is set to true within the object and the object has a pub",
      "//if this is a published event, and the refresh_cache flag was added to this event during save_post, refresh the meta and update the cache",
      "/**\n\t * Publish the location if the event has just been approved and the location is pending. We assume an editor published the event and approves the",
      "//do a dirty update for location too if it's not published",
      "//let's also publish the location",
      "//no validation/notices needed",
      "//set a constant so we know this event doesn't need 'saving'",
      "//get a refreshed $EM_Event because otherwise statuses don't get updated by WP",
      "//no validation/notices needed",
      "//since this is the first point when the admin area loads event stuff, we load our EM_Event here",
      "//create meta box check of date nonce",
      "//put here as it can't be in the add event form",
      "/*\n * Recurring Events\n */",
      "//only needed if editing post",
      "//late priority for checking non-EM meta data added later",
      "//quick hacks to make event admin table make more sense for events",
      "/**\n\t * Beacuse in wp admin recurrences get saved early on during save_post, meta added by  other plugins to the recurring event template don't get co",
      "//never proceed with this if using EM_Event::save(); which only gets executed outside wp admin",
      "//get the list post IDs for recurrences this recurrence",
      "//last filter of save_post in EM for events",
      "//now delete recurrences",
      "//only delete other events if this isn't a draft-never-published event",
      "/* @var $event EM_Event */",
      "//double check the event is a recurrence of this event",
      "//trick it into thinking it's one event.",
      "//only trash other events if this isn't a draft-never-published event",
      "//now trash recurrences",
      "/* @var $event EM_Event */",
      "//double check the event is a recurrence of this event",
      "//no validation/notices needed",
      "//set a constant so we know this event doesn't need 'saving'",
      "//only untrash other events if this isn't a draft-never-published event, because if so it never had other events to untrash",
      "/* @var $event EM_Event */",
      "//no validation/notices needed",
      "//since this is the first point when the admin area loads event stuff, we load our EM_Event here",
      "//add_meta_box('em-event-meta', 'Event Meta (debugging only)', array('EM_Event_Post_Admin','meta_box_metadump'),'event-recurring', 'normal','high');"
    ],
    "length": 29089,
    "preview": "<?php\n/*\n * Events Edit Page\n */\nclass EM_Event_Post_Admin{\n\tpublic static function init(){\n\t\tglobal $pagenow;\n\t\tif($pagenow == 'post.php' || $pagenow == 'post-new.php' ){ //only needed if editing post\n\t\t\tadd_action('admin_head', array('EM_Event_Post",
    "file": "src/code/events-manager/classes/em-event-post-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__set",
      "__sleep",
      "get_post",
      "validate",
      "save",
      "add",
      "has_ticket",
      "get_booking",
      "delete",
      "get_spaces",
      "get_price",
      "calculate_price",
      "get_ticket_bookings",
      "build_sql_conditions",
      "build_sql_orderby",
      "get_default_search",
      "rewind",
      "current",
      "key",
      "next",
      "valid",
      "count",
      "offsetSet",
      "offsetExists",
      "offsetUnset",
      "offsetGet",
      "__debugInfo"
    ],
    "classes": [
      "EM_Tickets_Bookings"
    ],
    "comments": [
      "/**\n * Deals with the each ticket booked in a single booking.\n * Each ticket is grouped by EM_Ticket_Bookings, which is stored as an array in the tick",
      "/**\n\t * Array of EM_Ticket_Booking objects for a specific event\n\t * @var EM_Ticket_Bookings[]\n\t */",
      "/**\n\t * When adding existing booked tickets via add() with 0 spaces, they get slotted here for deletion during save() so they circumvent validation.\n\t",
      "/**\n\t * This object belongs to this booking object\n\t * @var EM_Booking\n\t */",
      "/**\n\t * This object belongs to this booking object\n\t * @var EM_Ticket\n\t */",
      "/**\n\t * Used to prefix any actions/filters on this class, so that extended classes can force their own prefix.\n\t * @var string\n\t */",
      "/**\n\t * Creates an EM_Tickets instance.\n\t * @note This function will eventually require an EM_Booking object. At time of writing, this means versions ",
      "// all booking objects have a uuid",
      "// refresh ticket bookings",
      "/**\n\t * Return relevant fields that will be used for storage, excluding things such as event and ticket objects that should get reloaded\n\t * @return s",
      "//make sure ticket exists",
      "// if spaces booked for first time, editing and spaces are 0 (in case we need to delete anything)",
      "// get an EM_Ticket_Bookings object, which will be added if non-existent, $EM_Ticket_Bookings is therefore passed by reference.",
      "// make sure things are recalculated",
      "//so price calculations are reset",
      "/* @var $EM_Ticket_Bookings EM_Ticket_Bookings */",
      "/**\n\t * Saves the ticket bookings for this booking into the database, whether a new or existing booking\n\t * @return boolean\n\t */",
      "//save/update tickets",
      "//delete old tickets if set to 0 in an update",
      "/**\n\t * Adds a ticket booking to the object, equivalent of adding directly to the array of tickets_bookings\n\t *\n\t * @param EM_Ticket_Booking $EM_Ticke",
      "/**\n\t * Checks if this set has a specific ticket booked, returning the key of the ticket in the EM_Tickets_Bookings->ticket_bookings array\n\t * @param ",
      "/**\n\t * Smart event locator, saves a database read if possible. \n\t */",
      "/**\n\t * Delete all ticket bookings\n\t * @return boolean\n\t */",
      "/**\n\t * Get the total number of spaces booked in this booking. Seting $force_reset to true will recheck spaces, even if previously done so.\n\t * @param",
      "/**\n\t * Gets the total price for this whole booking by adding up subtotals of booked tickets. Seting $force_reset to true will recheck spaces, even if",
      "// deprecated, use the _calculate_price filter instead",
      "/**\n\t * Return a specific EM_Ticket_Bookings object if a valid $ticket_id is supplied, or alternatively returns all EM_Ticket_Bookings objects registe",
      "// we could get tickets individually via EM_Ticket_Bookings, but this is one db call vs multiple",
      "//Get tickets belonging to this tickets booking.",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_conditions()\n\t */",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_orderby()\n\t */",
      "/* \n\t * Adds custom Events search defaults\n\t * @param array $array_or_defaults may be the array to override defaults\n\t * @param array $array\n\t * @retu",
      "//to add later, search by person's tickets...",
      "//sort out whether defaults were supplied or just the array of search values",
      "//specific functionality",
      "//Iterator Implementation",
      "/**\n\t * @return void\n\t */",
      "/**\n\t * @return EM_Ticket_Bookings\n\t */",
      "/**\n\t * @return int Ticket ID\n\t */",
      "/**\n\t * @return EM_Ticket_Bookings\n\t */",
      "//Countable Implementation",
      "/**\n\t * @return int\n\t */",
      "// ArrayAccess Implementation",
      "/**\n\t * @param $offset\n\t * @param $value\n\t * @return void\n\t */",
      "/**\n\t * @param $offset\n\t * @return bool\n\t */",
      "/**\n\t * @param $offset\n\t * @return void\n\t */",
      "/**\n\t * @param $offset\n\t * @return EM_Ticket_Bookings|null\n\t */"
    ],
    "length": 15026,
    "preview": "<?php\n/**\n * Deals with the each ticket booked in a single booking.\n * Each ticket is grouped by EM_Ticket_Bookings, which is stored as an array in the tickets_bookings object.\n *\n * You can access/add/unset the array of EM_Ticket_Bookings and its su",
    "file": "src/code/events-manager/classes/em-tickets-bookings.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "destruct",
      "display",
      "__toString",
      "add",
      "add_item",
      "get_array_title",
      "remove",
      "remove_all",
      "get",
      "count",
      "add_error",
      "remove_error",
      "get_errors",
      "count_errors",
      "add_alert",
      "remove_alert",
      "get_alerts",
      "count_alerts",
      "add_info",
      "remove_info",
      "get_infos",
      "count_infos",
      "add_confirm",
      "remove_confirm",
      "get_confirms",
      "count_confirms",
      "jsonSerialize",
      "rewind",
      "current",
      "key",
      "next",
      "valid",
      "em_notices_init"
    ],
    "classes": [
      "EM_Notices"
    ],
    "comments": [
      "/**\n     * \n     * @author marcus\n     *\n     */",
      "/**\n    \t * If object has been displayed, this gets set to true, can be checked to avoid duplicates.\n    \t * @var boolean\n    \t * @since 5.5.7\n    \t *",
      "//Grab from cookie, if it exists",
      "//Flush notices that weren't made to stay cross-requests, we can do this if initialized immediately.",
      "//so it gets removed next request",
      "//sets cookie for 30 seconds, which may be too much",
      "/* General */",
      "/**\n         * Returns title of an array, assumes a assoc array with one item containing title => messages\n         * @param unknown_type $array\n     ",
      "/* Errors */",
      "/* Alerts */",
      "/* Info */",
      "/* Confirms */",
      "// Encoiding in JsonSerializable",
      "//Iterator Implementation"
    ],
    "length": 9453,
    "preview": "<?php\n    /**\n     * \n     * @author marcus\n     *\n     */\n    class EM_Notices implements Iterator, JsonSerializable {\n    \t/**\n    \t * If object has been displayed, this gets set to true, can be checked to avoid duplicates.\n    \t * @var boolean\n   ",
    "file": "src/code/events-manager/classes/em-notices.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "form_add",
      "form_edit",
      "save",
      "delete",
      "static_binding"
    ],
    "classes": [
      "extends",
      "properties",
      "via",
      "EM_Tags_Admin"
    ],
    "comments": [
      "/**\n * This class extends the EM_Taxonomy_Admin and adds category images and colors to the admin area.\n * \n * Currently, all functions here serve the ",
      "//converted into a constant value during init()",
      "//needed until 5.3 minimum is enforced for late static binding",
      "/**\n\t * Temporary function until WP requires PHP 5.3, so that we can make use of late static binding. \n\t * Until then, all functions needing LST shoul"
    ],
    "length": 2250,
    "preview": "<?php\n/**\n * This class extends the EM_Taxonomy_Admin and adds category images and colors to the admin area.\n * \n * Currently, all functions here serve the purpose of getting around lack of late static binding in PHP < 5.3. \n * Eventually when PHP 5.",
    "file": "src/code/events-manager/classes/em-tags-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "columns_add",
      "columns_output",
      "admin_enqueue_scripts",
      "form_edit",
      "form_add",
      "save",
      "delete"
    ],
    "classes": [
      "for",
      "EM_Taxonomy_Admin",
      "of"
    ],
    "comments": [
      "/**\n * Base class for taxonomies, adding extra features to the admin area such as displaying and saving image and color options.\n * \n * Classes extend",
      "/**\n\t * The name of this taxonomy, e.g. event-categories, which is defined in child class.\n\t * @var string\n\t */",
      "/**\n\t * The name of the child class, used for now whilst late static binding isn't guaranteed since we may be running on PHP <5.3\n\t * Once PHP 5.3 is ",
      "/**\n\t * Currently used to instantiate a class of the specific term. Eventually we could just use EM_Taxonomy since these will be standardized function",
      "/**\n\t * Name of taxonomy for reference in saving to database, e.g. category will be used to save category-image.\n\t * This may differ from the name of ",
      "//prepend ID after checkbox",
      "//get results and save/update",
      "//get results and save/update",
      "//get results and save/update",
      "//check if an image exists, if so remove association",
      "//delete taxonomy image and color",
      "//delete all events taxonomy relations for MultiSite Global Mode"
    ],
    "length": 10019,
    "preview": "<?php\n/**\n * Base class for taxonomies, adding extra features to the admin area such as displaying and saving image and color options.\n * \n * Classes extending this one must define the right  \n */\nclass EM_Taxonomy_Admin {\n\t\n\t/**\n\t * The name of this",
    "file": "src/code/events-manager/classes/em-taxonomy-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__set",
      "__isset",
      "get_event",
      "has_ticket",
      "get_first",
      "delete",
      "get_post",
      "validate",
      "save",
      "get_ticket_bookings",
      "get_spaces",
      "get_ticket_collumns",
      "rewind",
      "current",
      "key",
      "next",
      "valid",
      "count"
    ],
    "classes": [
      "EM_Tickets"
    ],
    "comments": [
      "/**\n * Deals with the ticket info for an event\n *\n * @property EM_Event $event\n */",
      "/**\n\t * Array of EM_Ticket objects for a specific event\n\t * @var array\n\t */",
      "/**\n\t * @var int\n\t */",
      "/**\n\t * @var EM_Booking\n\t */",
      "/**\n\t * @var EM_Event\n\t */",
      "/**\n\t * Creates an EM_Tickets instance\n\t * @param mixed $event\n\t */",
      "//expecting an array of EM_Ticket objects or ticket db array",
      "//start_timestamp and end_timestamp are deprecated, don't use them anymore",
      "/**\n\t * Returnds the event associated with this set of tickets, if there is one.\n\t * @return EM_Event\n\t */",
      "/**\n\t * does this ticket exist?\n\t * @return bool \n\t */",
      "/**\n\t * Get the first EM_Ticket object in this instance. Returns false if no tickets available.\n\t * @return EM_Ticket\n\t */",
      "/**\n\t * Delete tickets in this object\n\t * @return boolean\n\t */",
      "//get all the ticket ids",
      "//get ticket ids if tickets are already preloaded into the object",
      "//check that tickets don't have bookings",
      "//if tickets aren't preloaded into object and this belongs to an event, delete via the event ID without loading any tickets",
      "/**\n\t * Retrieve multiple ticket info via POST\n\t * @return boolean\n\t */",
      "//save previous tickets so things like ticket_meta doesn't get overwritten",
      "//clean current tickets out",
      "//get all ticket data and create objects",
      "//we create a blank standard ticket",
      "/**\n\t * Go through the tickets in this object and validate them \n\t */",
      "/**\n\t * Save tickets into DB \n\t */",
      "/* @var $EM_Ticket EM_Ticket */",
      "//pass on saved event_data",
      "/**\n\t * Goes through each ticket and populates it with the bookings made\n\t */",
      "/**\n\t * Get the total number of spaces this event has. This will show the lower value of event global spaces limit or total ticket spaces. Setting $fo",
      "/* @var $EM_Ticket EM_Ticket */",
      "/**\n\t * Returns the collumns used in ticket public pricing tables/forms\n\t * @param unknown_type $EM_Event\n\t */",
      "//Iterator Implementation",
      "/**\n\t * @return EM_Ticket\n\t */",
      "/**\n\t * @return EM_Ticket\n\t */",
      "//Countable Implementation"
    ],
    "length": 10383,
    "preview": "<?php\n/**\n * Deals with the ticket info for an event\n *\n * @property EM_Event $event\n */\nclass EM_Tickets extends EM_Object implements Iterator, Countable {\n\t\n\t/**\n\t * Array of EM_Ticket objects for a specific event\n\t * @var array\n\t */\n\tvar $tickets ",
    "file": "src/code/events-manager/classes/em-tickets.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "template",
      "the_content",
      "parse_query",
      "wpseo_breadcrumb_links",
      "static_binding",
      "__construct",
      "start_el",
      "start_el"
    ],
    "classes": [
      "EM_Categories_Frontend",
      "EM_Category_Taxonomy",
      "EM_Walker_Category",
      "EM_Walker_CategoryMultiselect"
    ],
    "comments": [
      "//converted into a constant value during init()",
      "//needed until 5.3 minimum is enforced for late static binding",
      "//awaiting LST in PHP 5.3",
      "//These following functions can be removed when PHP 5.3 is minimum and LSB is available",
      "//we do some double-checking here to prevent running self::static_binding() during the self::template() function when WP_Query is called.",
      "/**\n\t * Temporary function until WP requires PHP 5.3, so that we can make use of late static binding. \n\t * Until then, all functions needing LST shoul",
      "//backwards compatibility",
      "//Walker classes allowing for hierarchical display of categories",
      "/**\n * Create an array of Categories. Copied from Walker_CategoryDropdown, but makes it possible for the selected argument to be an array.\n *\n * @pack",
      "/**\n\t * @see Walker::$tree_type\n\t * @since 2.1.0\n\t * @var string\n\t */",
      "/**\n\t * @see Walker::$db_fields\n\t * @since 2.1.0\n\t * @todo Decouple this\n\t * @var array\n\t */",
      "/**\n\t * @see Walker::start_el()\n\t */",
      "/**\n * Create an array of Categories. Copied from Walker_CategoryDropdown, but makes it possible for the selected argument to be an array.\n *\n * @pack",
      "/**\n\t * @see Walker::start_el()\n\t */"
    ],
    "length": 4381,
    "preview": "<?php\nclass EM_Categories_Frontend extends EM_Taxonomy_Frontend {\n\t\n\tpublic static $taxonomy_name = 'event-category'; //converted into a constant value during init()\n\tpublic static $this_class = 'EM_Categories_Frontend'; //needed until 5.3 minimum is",
    "file": "src/code/events-manager/classes/em-categories-frontend.php"
  },
  {
    "type": "php",
    "functions": [
      "em_get_location",
      "__construct",
      "load_postdata",
      "get_post",
      "get_post_meta",
      "validate",
      "validate_meta",
      "save",
      "save_meta",
      "delete",
      "delete_meta",
      "is_published",
      "set_status",
      "get_parent",
      "get_status",
      "get_previous_status",
      "load_similar",
      "has_events",
      "can_manage",
      "get_permalink",
      "get_ical_url",
      "get_rss_url",
      "get_image_url",
      "get_edit_url",
      "output_single",
      "output",
      "get_country",
      "get_full_address",
      "get_google_maps_embed_url",
      "to_api"
    ],
    "classes": [
      "instantiations",
      "EM_Location"
    ],
    "comments": [
      "/**\n * Get a location in a db friendly way, by checking globals, cache and passed variables to avoid extra class instantiations.\n * @param mixed $id\n ",
      "//check if it's not already global so we don't instantiate again",
      "//check the cache first",
      "/**\n * Object that holds location info and related functions\n *\n * @property string $language       Language of the location, shorthand for location_l",
      "/* anonymous submission information */",
      "/**\n\t * Associative array mapping shorter to full property names in this class, used in EM_Object magic access methods, allowing for interchangeable u",
      "// common EM CPT object variables",
      "/**\n\t * previous status of location\n\t * @access protected\n\t * @var mixed\n\t */",
      "/* Post Variables - copied out of post object for easy IDE reference */",
      "/**\n\t * Gets data from POST (default), supplied array, or from the database if an ID is supplied\n\t * @param WP_Post|int|false $id\n\t * @param $search_b",
      "//Get the post_id/location_id",
      "//only load info if $id is a number",
      "//search by location_id, get post_id and blog_id (if in ms mode) and load the post",
      "//blog_id will always be the main blog id if global locations are restricted only to the main blog",
      "//we've been given a blog_id, so we're searching for a post id",
      "//search for the post id only",
      "//add this location to the cache",
      "// if in multisite mode, switch blogs quickly to get the right post meta.",
      "//load post data - regardless",
      "//merge the post data into location object",
      "//we have an orphan... show it, so that we can at least remove it on the front-end",
      "//reset post_id because it doesn't really exist",
      "/**\n\t * Retrieve event information via POST (used in situations where posts aren't submitted via WP)\n\t * @param boolean $validate whether or not to ru",
      "//anonymous submissions and guest basic info",
      "//validate both post and meta, otherwise return true",
      "/**\n\t * Retrieve event post meta information via POST, which should be always be called when saving the event custom post via WP.\n\t * @param boolean $",
      "//We are getting the values via POST or GET",
      "//Sort out event attributes - note that custom post meta now also gets inserted here automatically (and is overwritten by these attributes)",
      "//the line below should be deleted one day and we move validation out of this function, when that happens check otherfunctions like EM_ML_IO::get_post",
      "//if making a hook, assume that eventually $validate won't be passed on",
      "//anonymous submissions and guest basic info",
      "/**\n\t * Validates the location. Should be run during any form submission or saving operation.\n\t * @return boolean\n\t */",
      "//check required fields",
      "//country specific checking",
      "//this flag prevents our dashboard save_post hooks from going further",
      "//TODO shuffle filters into right place",
      "//Deal with updates to a location",
      "//get the full array of post data so we don't overwrite anything.",
      "//Overwrite new post info",
      "//decide on post status",
      "//if in global ms mode and user is a valid role to publish on their blog, then we will publish the location on the main blog",
      "//switch 'back' to main blog",
      "//Anonymous submission",
      "//Save post and continue with meta",
      "//refresh this event with wp post",
      "//anonymous submissions should save this information",
      "//save the image, errors here will surface during $this->save_meta()",
      "//location not saved, add an error",
      "//reload post data and add this location to the cache, after any other hooks have done their thing",
      "//cache refresh when saving via admin area is handled in EM_Event_Post_Admin::save_post/refresh_cache",
      "//we won't depend on hooks, if we saved the event and it's still published in its saved state, refresh the cache regardless",
      "//echo \"<pre>\"; print_r($this); echo \"</pre>\"; die();",
      "//Set Blog ID if in multisite mode",
      "//global locations restricted to main blog must have main site id",
      "//we should delete event_attributes, but maybe something else uses it without us knowing",
      "//Update Post Custom Fields and attributes",
      "//attributes get saved as individual keys or deleted if non-existent anymore",
      "//get available attributes that EM manages",
      "//set status at this point, it's either the current status, or if validation fails, null",
      "//Save to em_locations table",
      "//decide whether or not event is private at this point",
      "//check if location truly exists, meaning the location_id is actually a valid location id",
      "//we're dealing with an orphaned event in wp_em_locations table, so we want to update the post_id and give it a post parent",
      "//for sure this was previously status 0",
      "//success, so link the event with the post via an event id meta value for easy retrieval",
      "//Also set the status here if status != previous status",
      "//check anonymous submission information",
      "//anonymous user owner has been replaced with a valid wp user account, so we remove anonymous status flag but leave email and name for future referenc",
      "//anonymous user account has been reinstated as the owner, so we can restore anonymous submission status",
      "//we're probably dealing with a trashed post already, which will return a false with wp_trash_post, but the location_status is null from < v5.4.1 so r",
      "//this is an orphaned event, so the wp delete posts would have never worked, so we just delete the row in our locations table",
      "/**\n\t * Change the status of the location. This will save to the Database too. \n\t * @param int $status \t\t\t\tA number to change the status to, which may",
      "//decide on what status to set and update wp_posts in the process",
      "//if the post is trash, don't untrash it!",
      "//set the post status of the location in wp_posts too",
      "//set post status in this instance",
      "//published or pending post",
      "//published or pending posts should have a valid post slug",
      "//if we've added a post slug then update wp_posts anyway",
      "//save in the wp_em_locations table",
      "//get status from db, not post_status, as posts get saved quickly",
      "/**\n\t * Gets the parent of this location, if none exists, null is returned.\n\t * @return EM_Location|null\n\t */",
      "//get status from db, not post_status",
      "/**\n\t * @param $criteria\n\t * @return mixed|void\n\t * @deprecated Since 5.9.8.2 - Was never used, assume this may be removed eventually and copy code in",
      "//$wpdb->show_errors(true);",
      "/**\n\t * Can the user manage this location? \n\t */",
      "//if in global mode with locations restricted to main blog, we check capabilities against the main blog",
      "//if no blog id defined, assume it belongs to the main blog",
      "//all locations belong to the main blog",
      "//decide whether to give a link to the blog the location originates from or to show it on the main site",
      "//showing subsite locations on main site, create a custom link",
      "//if location doesn't belong to current blog and/or if main blog doesn't have a locations page, link directly to the blog it belongs to",
      "/*\n\t * Extends the default EM_Object function by switching blogs as needed if in MS Global mode\n\t * @param string $size\n\t * @return string\n\t * @see EM",
      "//location stored as post on main blog, but can be edited either in sub-blog admin area or if not on main blog",
      "//if editing on main site and edit page exists, stay on same site",
      "//location stored as post on blog where location was created",
      "//if editing on main site and edit page exists, stay on same site",
      "//First let's do some conditional placeholder removals",
      "//you can add nested recursions by modifying this setting in your wp_options table",
      "//Check if the language we want exists, if not we take the first language there",
      "//does this event have an image?",
      "//does this event have an image?",
      "//does this location have any events",
      "//does this location NOT have any events?",
      "//calculate lengths to delete placeholders",
      "//This is for the custom attributes",
      "//check that we haven't mistakenly captured a closing bracket in second bracket set",
      "//Strip string of placeholder and just leave the reference",
      "//Check to see if we have a second set of braces;",
      "//Deprecated (but will remain)",
      "//location belongs to another blog, so switch blog then call the default wp fucntion",
      "// Deprecated - always worked but documented as #_EDITLOCATIONURL",
      "// Deprecated - always worked but documented incorrectly as #_EDITLOCATIONLINK",
      "//','https://'), 'webcal://', $replace);",
      "//TODO: add limit to lists of events",
      "//convert deprecated placeholders for compatability",
      "//forget it ever happened? :/",
      "//sort out replacements so that during replacements shorter placeholders don't overwrite longer varieties.",
      "//Finally, do the location notes, so that previous placeholders don't get replaced within the content, which may use shortcodes",
      "//generate the map url",
      "//www.google.com/maps/embed/v1/place\");"
    ],
    "length": 56165,
    "preview": "<?php\n/**\n * Get a location in a db friendly way, by checking globals, cache and passed variables to avoid extra class instantiations.\n * @param mixed $id\n * @param mixed $search_by\n * @return EM_Location\n */\nfunction em_get_location($id = false, $se",
    "file": "src/code/events-manager/classes/em-location.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "admin_head",
      "admin_notices",
      "parse_query",
      "restrict_views",
      "restrict_manage_posts",
      "views",
      "columns_add",
      "columns_output",
      "row_actions",
      "sortable_columns",
      "init",
      "admin_notices",
      "admin_head",
      "columns_add",
      "columns_output",
      "row_actions"
    ],
    "classes": [
      "EM_Event_Posts_Admin",
      "EM_Event_Recurring_Posts_Admin"
    ],
    "comments": [
      "//only needed for events list",
      "//hide some cols by default:",
      "//clean up the views in the admin selection area - WIP",
      "//add_filter('views_edit-'.EM_POST_TYPE_EVENT, array('EM_Event_Posts_Admin','restrict_views'),10,2);",
      "//add_filter('views_edit-event-recurring', array('EM_Event_Posts_Admin','restrict_views'),10,2);",
      "//add filters to event post list tables",
      "//quick hacks to make event admin table make more sense for events",
      "/**\n\t * Handles WP_Query filter option in the admin area, which gets executed before EM_Event_Post::parse_query\n\t * Not yet in use \n\t */",
      "//Search Query Filtering",
      "//sorts out filtering admin-side as it searches by id",
      "//Set up Scope for EM_Event_Post",
      "/**\n\t * Adds Future view to make things simpler, and also changes counts if user doesn't have edit_others_events permission\n\t * @param array $views\n\t ",
      "//TODO alter views of locations, events and recurrences, specifically find a good way to alter the wp_count_posts method to force user owned posts onl",
      "//get counts for future events",
      "//prepare to alter cache if neccessary",
      "//as seen on wp_count_posts",
      "//highlight the 'Future' status if necessary",
      "//change the 'All' status to have scope=all",
      "//merge new custom status into views",
      "//alter the views to reflect correct numbering",
      "/* @var $post EM_Event */",
      "//get meta value to see if post has location, otherwise",
      "//get meta value to see if post has location, otherwise",
      "/*\n * Recurring Events\n */",
      "//hide some cols by default:",
      "//quick hacks to make event admin table make more sense for events",
      "/* @var $post EM_Event */",
      "//get meta value to see if post has location, otherwise"
    ],
    "length": 19081,
    "preview": "<?php\nclass EM_Event_Posts_Admin{\n\tpublic static function init(){\n\t\tglobal $pagenow;\n\t\tif( $pagenow == 'edit.php' && !empty($_REQUEST['post_type']) && $_REQUEST['post_type'] == EM_POST_TYPE_EVENT ){ //only needed for events list\n\t\t\tif( !empty($_REQUE",
    "file": "src/code/events-manager/classes/em-event-posts-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "delete_user",
      "user_contactmethods",
      "dbem_bookings_registration_user"
    ],
    "classes": [
      "EM_People"
    ],
    "comments": [
      "/**\n\t * Handles the action of someone being deleted on WordPress\n\t * @param int $id\n\t */",
      "//if events are set to be deleted, we hook in correctly already, if they're meant to be reassigned, we only need to update our tables as WP updated th",
      "//We delete all the events and locations owned by this user",
      "//delete their bookings completely",
      "//@TODO allow option to reassign bookings in a sensible way (i.e. handle personal data being transferred)",
      "/**\n\t * Adds phone number to contact info of users, compatible with previous phone field method\n\t * @param $array\n\t * @return array\n\t */",
      "/**\n\t * Workaround function for any legacy code requesting the dbem_bookings_registration_user option which should always be 0\n\t * @return int\n\t */"
    ],
    "length": 2300,
    "preview": "<?php\nclass EM_People extends EM_Object {\n\t\n\tpublic static function init(){\n\t\tadd_action('delete_user', 'EM_People::delete_user', 10, 1);\n\t\tadd_filter( 'user_contactmethods', 'EM_People::user_contactmethods', 10, 1);\n\t\tadd_filter('pre_option_dbem_boo",
    "file": "src/code/events-manager/classes/em-people.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__isset",
      "get",
      "output",
      "get_pagination_links",
      "get_post_search",
      "get_default_search"
    ],
    "classes": [
      "EM_Tags"
    ],
    "comments": [
      "//Overridable functions",
      "/**\n\t * Creates an EM_Tags instance, currently accepts an EM_Event object (gets all Categories for that event) or array of any EM_Category objects, wh",
      "/**\n\t * Legacy get overload for any use of $EM_Tags->tags\n\t * @param string $var_name\n\t * @return array|NULL\n\t */",
      "/**\n\t * Legacy overload for use of empty($this->tags)\n\t * @param string $prop\n\t * @return boolean\n\t */",
      "//Functions we won't need when PHP 5.3 minimum allows for use of LSB"
    ],
    "length": 2075,
    "preview": "<?php\nclass EM_Tags extends EM_Taxonomy_Terms {\t\n\t//Overridable functions\n\tprotected $taxonomy = 'event-tags';\n\tprotected $meta_key = 'event-tags';\n\tprotected $terms_name = 'tags';\n\tprotected $term_class = 'EM_Tag';\n\tprotected $ajax_search_action = '",
    "file": "src/code/events-manager/classes/em-tags.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__isset",
      "get",
      "output",
      "get_pagination_links",
      "get_post_search",
      "get_default_search"
    ],
    "classes": [
      "EM_Categories"
    ],
    "comments": [
      "//Overridable functions",
      "/**\n\t * Creates an EM_Categories instance, currently accepts an EM_Event object (gets all Categories for that event) or array of any EM_Category objec",
      "/**\n\t * Legacy get overload for any use of $EM_Categories->tags\n\t * @param string $var_name\n\t * @return array|NULL\n\t */",
      "/**\n\t * Legacy overload for use of empty($this->categories)\n\t * @param string $prop\n\t * @return boolean\n\t */",
      "//Functions we won't need when PHP 5.3 minimum allows for use of LSB"
    ],
    "length": 2188,
    "preview": "<?php\nclass EM_Categories extends EM_Taxonomy_Terms {\n\t\n\t//Overridable functions\n\tprotected $is_ms_global = true;\n\tprotected $taxonomy = 'event-categories';\n\tprotected $meta_key = 'event-category';\n\tprotected $terms_name = 'categories';\n\tprotected $t",
    "file": "src/code/events-manager/classes/em-categories.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "get",
      "output",
      "days_in_month",
      "translate_and_trim",
      "get_query_args",
      "get_link_args",
      "get_default_search"
    ],
    "classes": [
      "EM_Calendar"
    ],
    "comments": [
      "//nothing to init anymore",
      "//figure out what month to look for, if we need to",
      "//if a scope is supplied, figure out the month/year we're after, which will be between these two dates.",
      "// check if we're looking for a future date, in which case we don't force anything",
      "//limit arg will be used per day and not for events search",
      "// Get the first day of the month",
      "// Get friendly month name",
      "// Figure out which day of the week",
      "// the month starts on.",
      "//We need to go back to the WP defined day when the week started, in case the event day is near the end",
      "// determine how many days are in the last month.",
      "// determine how many days are in the current month.",
      "// Build an array for the current days",
      "// Build an array for the number of days",
      "// If the $offset from the starting day of the",
      "// week happens to be Sunday, $offset would be 0,",
      "// so don't need an offset correction.",
      "// The else statement is to prevent building the $offset array.",
      "// count how many days we have with the two",
      "// previous arrays merged together",
      "// Since we will have 5 HTML table rows (TR)",
      "// with 7 table data entries (TD)",
      "// we need to fill in 35 TDs",
      "// so, we will have to figure out",
      "// how many days to appened to the end",
      "// of the final array to make it 35 days.",
      "// Outset Correction",
      "// Now let's \"chunk\" the $all_days array",
      "// into weeks. Each week has 7 days",
      "// so we will array_chunk it into 7 days.",
      "//Get an array of arguments that don't include default valued args",
      "// add today and previous links if scope permits",
      "// don't show if future scope and this month",
      "// Set up weekday headers",
      "// re-order weekdays for start day of week being first in array",
      "//translate day names, some languages may have special circumstances",
      "//Chinese single initial day names are different, we resort it here as per above",
      "//all other languages",
      "// Now we break each key of the array",
      "// into a week and create a new table row for each",
      "// week with the days of that week in the table data",
      "//set it up so we have the exact array of dates to be filled",
      "//if it is PREVIOUS month",
      "// if it is THIS month",
      "//if it is NEXT month",
      "//query the database for events in this time span with $offset days before and $outset days after this month to account for these cells in the calenda",
      "// we're looking for start of month - offset",
      "// get it here before we subtract",
      "// if month is this month, start datetime must be today",
      "//we have two methods here, one for high-volume event sites i.e. many thousands of events per month, and another for thousands or less per month.",
      "//we're getting an array first to avoid extra queries during object creation",
      "//limits in the events search won't help",
      "// allows for folding all-day and multi-days on top of each other above regular events",
      "//here we loop through each day, query that specific date, and then compile a list of event objects",
      "//in this mode the count will never be accurate, we're grabing at most (31 + 14 days) * (limit + 1) events to reduce memory loads",
      "//just load all the events for this time-range, or just future events",
      "//back to what it was",
      "//set back to future (currently supported only)",
      "//Go through the events and slot them into the right d-m index",
      "// first, we will ignore any past events that are still loaded within the month (these would be 'earlier today')",
      "// remember, this is UTC, not local!",
      "//If $long_events is set then show a date as eventful if there is an multi-day event which runs during that day",
      "//we loop until the last day of our time-range, not the end date of the event, which could be in a year",
      "//Ensure date is within event dates and also within the limits of events to show per day, if so add to eventful days array",
      "//now we know this is an event that'll be used, convert it to an object",
      "//add event to array with a corresponding timestamp for sorting of times including long and all-day events",
      "//count events for that day",
      "//Only show events on the day that they start",
      "//add event to array with a corresponding timestamp for sorting of times including long and all-day events",
      "//count events for that day",
      "//generate a link argument string containing event search only",
      "//don't use EM_URI here, since ajax calls this before EM_URI is defined.",
      "//not needed atm anyway, but we use esc_url later on, in case you're wondering ;)",
      "//don't use EM_URI here, since ajax calls this before EM_URI is defined.",
      "//in case we have other plugins (e.g. WPML) adding querystring params to the end",
      "//Get link title for this date",
      "//Get the link to this calendar day",
      "//add query vars to end of link",
      "//Add events to array",
      "// pass on args as well, as they've bene cleaned too",
      "//Let month and year REQUEST override for non-JS users",
      "//limit arg will be used per day and not for events search",
      "// get any template-specific $_REQUEST info here",
      "// merge default search args and generate search",
      "// adding a view div further down, so the search doesn't make its own",
      "// don't show the search bar above by default, filters yes",
      "// by default no search",
      "// override search trigger option if search is hidden",
      "// do we output a search form first?",
      "// re-assign classes (clean-up search assignments)",
      "/* START New Config Options */",
      "// default values for styling args",
      "//modal, tooltips, none",
      "// WIP, will add more styles here",
      "//large will sort itself out",
      "// height of each row will adjust to match tallest cell in table",
      "// default - height will match width of cell, unless there is more content",
      "// each cell in a row will adjust height to tallest cell in that row",
      "// calendar won't switch responsively",
      "/* END New Config Options */",
      "// output vars that should persist on searches",
      "// stuff we don't need to consider",
      "// things both searches and caelendar navs need",
      "//vars only searches need",
      "// vars only the calendar needs",
      "// make sure we get a 1 or 0",
      "// return the buffer",
      "//fix for diacritic calendar names",
      "/**\n\t * Gets all the EM-supported search arguments and removes the ones that aren't the default in the $args array. Returns the arguments that have no",
      "//check that argument doesn't match default",
      "//strings must be typecast to avoid false positive for something like 'string' == 0",
      "//argument same as default so it's not needed in link",
      "//clean up post type conflicts in a URL",
      "/**\n\t * DEPRECATED - use EM_Calendar::get_query_args() instead and manipulate the array.\n\t * Left only to prevent 3rd party add-ons from potentially b",
      "/* \n\t * Adds custom calendar search defaults\n\t * @param array $array_or_defaults may be the array to override defaults\n\t * @param array $array\n\t * @re",
      "//These defaults aren't for db queries, but flags for what to display in calendar output",
      "//we don't initially look for recurring events only events and recurrences of recurring events",
      "//'full' => 0, //Will display a full calendar with event names",
      "//Events that last longer than a day",
      "//approved events only",
      "//number of weeks to be displayed in the calendar",
      "//sort out whether defaults were supplied or just the array of search values",
      "//specific functionality",
      "//not the main blog, force single blog search",
      "//deprecated, we're changing this now to calendar_size for display purposes"
    ],
    "length": 31177,
    "preview": "<?php\nclass EM_Calendar extends EM_Object {\n\t\n\tpublic static function init(){\n\t\t//nothing to init anymore\n\t}\n\t\n\tpublic static function get( $args ){\n\t\n\t\tglobal $wpdb, $wp_rewrite;\n\t \t\n\t\t$calendar_array = array();\n\t\t$calendar_array['cells'] = array();",
    "file": "src/code/events-manager/classes/em-calendar.php"
  },
  {
    "type": "php",
    "functions": [
      "is_enabled",
      "get",
      "count",
      "output",
      "get_pagination_links",
      "delete",
      "get_post_search",
      "check_events_table_join",
      "build_sql_conditions",
      "build_sql_orderby",
      "build_sql_groupby",
      "build_sql_groupby_orderby",
      "build_sql_ambiguous_fields_helper",
      "get_default_search"
    ],
    "classes": [
      "which",
      "EM_Locations"
    ],
    "comments": [
      "/**\n * Static class which will help bulk add/edit/retrieve/manipulate arrays of EM_Location objects. \n * Optimized for specifically retreiving locatio",
      "/**\n\t * Like WPDB->num_rows it holds the number of results found on the last query.\n\t * @var int\n\t */",
      "/**\n\t * If $args['pagination'] is true or $args['offset'] or $args['page'] is greater than one, and a limit is imposed when using a get() query, \n\t * ",
      "/**\n\t * Returns whether or not locations are enabled for use with events.\n\t * @return bool\n\t */",
      "/**\n\t * Returns an array of EM_Location objects\n\t * @param array $args\n\t * @param boolean $count\n\t * @return array\n\t */",
      "//Quick version, we can accept an array of IDs, which is easy to retrieve",
      "//Array of numbers, assume they are event IDs to retreive",
      "//We can just get all the events here and return them",
      "//We return all the events matched as an EM_Event array.",
      "//return an event in the usual array format",
      "//we were passed an array of EM_Location classes, so we just give it back",
      "/* @todo do we really need this condition in EM_Locations::get()? */",
      "//We assume it's either an empty array or array of search arguments to merge with defaults",
      "//Get fields that we can use in ordering and grouping, which can be event and location (excluding ambiguous) fields",
      "//blank event for below",
      "//blank location for below",
      "//will contain event-specific fields, not ambiguous ones",
      "//works in MS Global mode since location_id is always unique, post_id is not",
      "//get all fields from table, add events table prefix to avoid ambiguous fields from location",
      "//for storing total rows found",
      "//duplicate avoidance",
      "// Deprecated, use em_locations_check_events_table_join instead, $count is unecessary",
      "//depending on whether to join we do certain things like add a join SQL, change specific values like status search",
      "//Build ORDER BY and WHERE SQL statements here, after we've done all the pre-processing necessary",
      "//Build GROUP BY SQL statement, which will be very different if we group things due to how we need to filter out by event date",
      "//get groupby field(s)",
      "//we can safely assume we've been passed at least one array item with index of 0 containing a valid field due to build_sql_groupby()",
      "//we only support one field for events",
      "//get minimum required selectors within the inner query to shorten query length as much as possible",
      "//we're selecting all fields from events table so add only location fields required in the outer ORDER BY statement",
      "//we may not have included the grouped field if it's not in the outer ORDER BY clause, so we add it for this specific query",
      "//THE Query - Grouped",
      "//build the SQL statement if not already built for group",
      "//if( em_wp_is_super_admin() && WP_DEBUG_DISPLAY ){ echo \"<pre>\"; print_r($sql); echo '</pre>'; }",
      "//If we're only counting results, return the number of results",
      "//get the result and count results",
      "//If we want results directly in an array, why not have a shortcut here?",
      "/**\n\t * Output a set of matched of events\n\t * @param array $args\n\t * @return string\n\t */",
      "//When looping, we can replace EM_Location global with the current event in the loop",
      "//Can be either an array for the get search or an array of EM_Location objects",
      "//What format shall we output this to, or use default",
      "//Add headers and footers to output",
      "//we're using the default format, so if a custom format header or footer is supplied, we can override it, if not use the default",
      "//we're using a custom format, so if a header or footer isn't specifically supplied we assume it's blank",
      "//Pagination (if needed/requested)",
      "//output pagination links",
      "//FIXME check if reference is ok when restoring object, due to changes in php5 v 4",
      "//get default args if we're in a search, supply to parent since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "//since we're paginating, get the default limit, which isn't obtained from get_default_search()",
      "//we've been given an array or search arguments to find the relevant locations to delete",
      "//we're deleting an array of locations",
      "//supply $accepted_args to parent argument since we can't depend on late static binding until WP requires PHP 5.3 or later",
      "//remove unwanted arguments or if not explicitly requested",
      "/**\n\t * Checks if we need to join an events table for this search, which is necessary if any event-specific arguments are supplied, or if certain argu",
      "//for we only will check optional joining by default for groupby searches, and for the original searches if EM_DISABLE_OPTIONAL_JOINS is set to true i",
      "//only value where false is not default so we check that first",
      "//if set to false the following would provide a false negative in the line above",
      "//check ordering and grouping arguments for precense of event fields requiring a join",
      "//ignore this argument if set to false",
      "//we assume all these arguments are now array thanks to self::get_search_defaults() cleaning it up",
      "//we join, no need to keep searching",
      "//EM_Events has a special argument for recurring events (the template), where it automatically omits recurring event templates. If we are searching ev",
      "//end temporary if( !empty($args['groupby']).... wrapper",
      "//plugins can override this optional joining behaviour here in case they add custom WHERE conditions or something like that",
      "/**\n\t * Builds an array of SQL query conditions based on regularly used arguments\n\t * @param array $args\n\t * @return array\n\t */",
      "//eventful locations",
      "//scope condition would render all queries return no results",
      "//blog id in events table",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_orderby()\n\t */",
      "//fix ambiguous fields",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_groupby()\n\t */",
      "//fix ambiguous fields and give them scope of events table",
      "/**\n\t * Overrides EM_Object method to clean ambiguous fields and apply a filter to result.\n\t * @see EM_Object::build_sql_groupby_orderby()\n\t */",
      "//fix ambiguous fields and give them scope of events table",
      "/**\n\t * Overrides EM_Object method to provide specific reserved fields and locations table.\n\t * @see EM_Object::build_sql_ambiguous_fields_helper()\n\t ",
      "//This will likely be removed when PHP 5.3 is the minimum and LSB is a given",
      "/* \n\t * Generate a search arguments array from defalut and user-defined.\n\t * @param array $array_or_defaults may be the array to override defaults\n\t *",
      "//groups according to event start time, i.e. by default shows earliest event in a scope",
      "//groups according to event start time, i.e. by default shows earliest event in a scope",
      "//approved locations only",
      "//we probably want to search all locations by default, not like events",
      "//location-specific attributes",
      "//Locations that have an event (scope will also play a part here",
      "//Locations WITHOUT events, eventful takes precedence",
      "//search locations with events of a specific publish status",
      "//sort out whether defaults were supplied or just the array of search values",
      "//specific functionality",
      "//when searching in MS Global mode with all locations being stored on the main blog, blog_id becomes redundant as locations are stored in one blog tab",
      "//if enabled, by default we display all blog locations on main site"
    ],
    "length": 24317,
    "preview": "<?php\n/**\n * Static class which will help bulk add/edit/retrieve/manipulate arrays of EM_Location objects. \n * Optimized for specifically retreiving locations (whether eventful or not). If you want event data AND location information for each event, ",
    "file": "src/code/events-manager/classes/em-locations.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "__set",
      "__isset",
      "load",
      "add",
      "add_from_post",
      "get_event",
      "get_tickets",
      "get_available_tickets",
      "get_user_list",
      "ticket_exists",
      "has_space",
      "has_open_time",
      "is_open",
      "delete",
      "approve",
      "reject",
      "unapprove",
      "set_status",
      "get_spaces",
      "get_available_spaces",
      "get_booked_spaces",
      "get_pending_spaces",
      "get_bookings",
      "get_pending_bookings",
      "get_rejected_bookings",
      "get_cancelled_bookings",
      "find_previous_booking",
      "has_booking",
      "get",
      "count",
      "export_csv",
      "enqueue_js",
      "em_booking_js_footer",
      "is_registration_forced",
      "get_sql_accepted_fields",
      "build_sql_groupby_orderby",
      "build_sql_orderby",
      "build_sql_conditions",
      "get_default_search",
      "rewind",
      "current",
      "key",
      "next",
      "valid",
      "offsetSet",
      "offsetExists",
      "offsetUnset",
      "offsetGet"
    ],
    "classes": [
      "EM_Bookings"
    ],
    "comments": [
      "/**\n * Deals with the booking info for an event\n *\n * @property EM_Booking[] $bookings\n * @property EM_Event $event\n */",
      "/**\n\t * Array of EM_Booking objects for a specific event\n\t * @var EM_Booking[]\n\t */",
      "/**\n\t * @var EM_Tickets\n\t */",
      "/**\n\t * @var int\n\t */",
      "/**\n\t * How many spaces this event has\n\t * @var int\n\t */",
      "/**\n\t * @var bool Flag for Multilingual functionality, to help prevent unnecessary reloading of this object if already 'translated'\n\t */",
      "/**\n\t * If flag is true, a registration will be attempted when booking whether the user is logged in or not. Used in cases such as manual bookings (a ",
      "/**\n\t * If flag is true, bookings and forms will not impose restrictions for roles. Future iterations will remove restrictions on dates, space capacit",
      "/**\n\t * Reference to the event object if this object contains bookings of a specific event only\n\t * @var EM_Event\n\t */",
      "/**\n\t * Creates an EM_Bookings instance, currently accepts an EM_Event object (gets all bookings for that event) or array of any EM_Booking objects, w",
      "//Creates a blank bookings object if needed",
      "/**\n\t * Counter-intuitive but __isset works against isset() but for our purpose it's mainly aimed at empty() calls, which also references this functio",
      "//if isset is invoked on $EM_Bookings->bookings then we'll assume it's only set if the bookings property is empty, not if null.",
      "/**\n\t * Add a booking into this event (or add spaces if person already booked this). We assume at this point that the booking has already been validat",
      "//set status depending on approval settings",
      "//if status is not set, give 1 or 0 depending on approval settings",
      "/**\n\t * Get POST data and create a booking for each ticket requested. If successful, a booking object is returned, false if not.\n\t * @return false|obj",
      "/**\n\t * Smart event locator, saves a database read if possible. Note that if an event doesn't exist, a blank object will be created to prevent duplica",
      "/* @var $EM_Booking EM_Booking */",
      "/**\n\t * Retrieve and save the bookings belonging to instance. If called again will return cached version, set $force_reload to true to create a new EM",
      "//if in single ticket mode, then the event booking cut-off is the ticket end date",
      "//if ticket has cut-off date, that should take precedence as we save the ticket cut-off date/time to the event in single ticket mode",
      "//if ticket end dates are set, move to event",
      "//if no end date is set, use event end date (which will have defaulted to the event start date",
      "//save if we have a valid rsvp end date",
      "//for recurrences, we take the recurrence_rsvp_days and feed it into the ticket meta that'll handle recurrences",
      "/**\n\t * Returns EM_Tickets object with available tickets\n\t * @param boolean $include_member_tickets - if set to true, member-ony tickets will be consi",
      "/* @var $EM_Ticket EM_Ticket */",
      "/**\n\t * Deprecated - was never used and therefore is deprecated, will always return an array() and will eventually be removed entirely.\n\t * @return ar",
      "/**\n\t * Returns a boolean indicating whether this ticket exists in this bookings context.\n\t * @return bool \n\t */",
      "//TODO extend booking options",
      "/**\n\t * Delete bookings on this id\n\t * @return boolean\n\t */",
      "//get the booking ids tied to this event or preloaded into this object",
      "// before deleting, get all the event ids associated with these bookings, in case we need to do any checks on those events via filters",
      "//Delete bookings and ticket bookings",
      "//faster way of deleting bookings for an event circumventing the need to load all bookings if it hasn't been loaded already",
      "//we have not bookings loaded to delete, nor an event to delete bookings from, so bookings are considered 'deleted' since there's nothing ot delete",
      "/**\n\t * Will approve all supplied booking ids, which must be in the form of a numeric array or a single number.\n\t * @param array|int $booking_ids\n\t * ",
      "/**\n\t * Will reject all supplied booking ids, which must be in the form of a numeric array or a single number.\n\t * @param array|int $booking_ids\n\t * @",
      "/**\n\t * Will unapprove all supplied booking ids, which must be in the form of a numeric array or a single number.\n\t * @param array|int $booking_ids\n\t ",
      "/**\n\t * @param int $status\n\t * @param array|int $booking_ids\n\t * @param bool $send_email\n\t * @param bool $ignore_spaces\n\t * @return bool\n\t */",
      "//FIXME status should work with instantiated object",
      "//Get all the bookings",
      "//TODO Better error handling needed if some bookings fail approval/failure",
      "/**\n\t * Get the total number of spaces this event has. This will show the lower value of event global spaces limit or total ticket spaces. Setting $fo",
      "//check overall events cap",
      "/**\n\t * Returns number of available spaces for this event. If approval of bookings is on, will include pending bookings depending on em option.\n\t * @r",
      "//deduct reserved/pending spaces from available spaces",
      "/**\n\t * Returns number of booked spaces for this event. If approval of bookings is on, will return number of booked confirmed spaces.\n\t * @return int\n",
      "/**\n\t * Gets number of pending spaces awaiting approval. Will return 0 if booking approval is not enabled.\n\t * @return int\n\t */",
      "/**\n\t * Gets booking objects (not spaces). If booking approval is enabled, only the number of approved bookings will be shown.\n\t * @param boolean $all",
      "/**\n\t * Get pending bookings. If booking approval is disabled, will return no bookings. \n\t * @return EM_Bookings\n\t */",
      "/**\n\t * Get rejected bookings. If booking approval is disabled, will return no bookings. \n\t * @return array EM_Bookings\n\t */",
      "/**\n\t * Get cancelled bookings. \n\t * @return array EM_Booking\n\t */",
      "/**\n\t * Checks if a person with similar details has booked for this before\n\t * @param $person_id\n\t * @return EM_Booking\n\t */",
      "//First see if we have a similar person on record that's making this booking",
      "//If person exists on record, see if they've booked this event before, if so return the booking.",
      "/**\n\t * Checks to see if user has a booking for this event\n\t * @param int $user_id\n\t */",
      "// get the first booking ID available and return that",
      "/**\n\t * Get bookings that match the array of arguments passed.\n\t * @return array \n\t * @static\n\t */",
      "//Quick version, we can accept an array of IDs, which is easy to retrieve",
      "//Array of numbers, assume they are event IDs to retreive",
      "//We can just get all the events here and return them",
      "//We return all the bookings matched as an EM_Booking array.",
      "//We assume it's either an empty array or array of search arguments to merge with defaults",
      "//Get the default conditions",
      "//Put it all together",
      "//Get ordering instructions",
      "//Now, build orderby sql",
      "//check if we need to join a location table for this search, which is necessary if any location-specific are supplied, or if certain arguments such as",
      "// temporary whilst we work out some kinks with metadata",
      "// it could either be an array of 'legit' empty values vs any empty value meaning this table-specific arg isn't used, therefore no join needed",
      "//check ordering and grouping arguments for precense of location fields requiring a join",
      "//ignore this argument if set to false",
      "//we assume all these arguments are now array thanks to self::get_search_defaults() cleaning it up",
      "//we join, no need to keep searching",
      "// account for meta joins, which requires a cheeky condition insertion here instead",
      "//we join, no need to keep searching",
      "// check if there's any other required joins",
      "//plugins can override this optional joining behaviour here in case they add custom WHERE conditions or something like that",
      "//Create the SQL statement and execute",
      "//If we're only counting results, return the number of results",
      "//If we want results directly in an array, why not have a shortcut here?",
      "//Make returned results EM_Booking objects",
      "//List of patients in the patient database, that a user can choose and go on to edit any previous treatment data, or add a new admission.",
      "//@todo remove in 6.0",
      "// The name of the file on the user's pc",
      "//request loading of JS file in footer of page load",
      "//we call the segmented JS files and include them here",
      "//get path to parent directory",
      "//deprecated use em_booking_js below instead",
      "/**\n\t * Checks whether a booking being made should register user information as a booking from another user whilst an admin is logged in\n\t * @return b",
      "/* WIP - Meta will work like this to allow re-ordring by custom data, paused temporarily to sort out inconcsistencies with stored data in WP Users vs.",
      "// if we have these we need to join",
      "// accepted args that would require events table to be joined",
      "// any args that may have a specific empty value that still means it's 'set', could also be an array of empty value types",
      "// any args here that match the value or that within the array of values will be considered as ignored, for example scope 'all' doesn't actually requi",
      "// the JOIN SQL required to join this table",
      "// field names with shortcut field name as key",
      "// name of table (or array of tables) this join would also require, if joining based on a dependent table that links it to bookings",
      "// maps field names to absolute DB field names",
      "// not covered in fields array",
      "// reserved field names that the main object here has right to, other tables use full or prefix with type to map orderby fields",
      "// go through each table and add to accepted fields. Go in reverse as preference is from least to greatest (for joining dependences optimally)",
      "// special meta table, so we map the key even though it's not a real field",
      "// duplicates will just be ignored, at this point overriders should be more specific",
      "//will contain location-specific fields, not ambiguous ones",
      "// location fields will clash, so they may need special treatment",
      "// event takes priority",
      "// map it in entire long-handed name",
      "//if locations disabled then we don't accept location-specific fields",
      "// TODO: Change the autogenerated stub",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_orderby()\n\t */",
      "/* Overrides EM_Object method to apply a filter to result\n\t * @see wp-content/plugins/events-manager/classes/EM_Object#build_sql_conditions()\n\t */",
      "/* \n\t * Adds custom Events search defaults\n\t * @param array $array_or_defaults may be the array to override defaults\n\t * @param array $array\n\t * @retu",
      "//to add later, search by person's bookings...",
      "//returns an array of results if true, if an array or text it's assumed an array of specific table fields or single field name requested",
      "//sort out whether defaults were supplied or just the array of search values",
      "//clean up array value",
      "//if invalid args given, just return all fields",
      "//figure out default owning permissions",
      "//Iterator Implementation - if we iterate this object, we automatically invoke the load() function first",
      "//and load up all bookings to go through from the database.",
      "// ArrayAccess Implementation",
      "/**\n\t * @param $offset\n\t * @param $value\n\t * @return void\n\t */",
      "/**\n\t * @param $offset\n\t * @return bool\n\t */",
      "/**\n\t * @param $offset\n\t * @return void\n\t */",
      "/**\n\t * @param $offset\n\t * @return EM_Ticket_Bookings|null\n\t */"
    ],
    "length": 43336,
    "preview": "<?php\n/**\n * Deals with the booking info for an event\n *\n * @property EM_Booking[] $bookings\n * @property EM_Event $event\n */\nclass EM_Bookings extends EM_Object implements Iterator, ArrayAccess {\n\t\n\t/**\n\t * Array of EM_Booking objects for a specific",
    "file": "src/code/events-manager/classes/em-bookings.php"
  }
]