[
  {
    "type": "php",
    "functions": [
      "init",
      "get_api_class",
      "em_settings_save_apps",
      "em_settings_apps_header",
      "em_settings_apps",
      "em_settings_apps_footer",
      "em_settings_user_auth"
    ],
    "classes": [
      "OAuth_API_Admin_Settings",
      "for",
      "name",
      "name"
    ],
    "comments": [
      "/**\n\t * @var OAuth_API Class name of base API class for this service type, used for static variable referencing\n\t */",
      "//get child class name to call",
      "//handle service app creds",
      "/**\n\t * @return OAuth_API\n\t */",
      "//set default API class name if not defined by parent",
      "// override this for extra content above settings meta box",
      "/* @var OAuth_API $api */",
      "// override this for extra content above settings meta box",
      "//a fresh client with no token for generating oauth links",
      "/* @var OAuth_API $api */",
      "/* @var OAuth_API_Client $api_client */",
      "//get tokens if client is configured",
      "//oauth is not configured correctly...",
      "//we don't need to verify connections at this point, we just need to know if there are any"
    ],
    "length": 9893,
    "preview": "<?php\nnamespace EM_OAuth;\nuse EM_Options, EM_Exception;\nuse Matrix\\Exception;\n\nclass OAuth_API_Admin_Settings {\n\n\tpublic static $option_name = 'em_oauth';\n\tpublic static $service_name = 'EM OAuth 2.0';\n\t/**\n\t * @var OAuth_API Class name of base API c",
    "file": "src/code/events-manager/classes/em-oauth/oauth-admin-settings.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "__get",
      "get_api_class",
      "get_oauth_url",
      "get_oauth_callback_url",
      "client",
      "http_request",
      "get",
      "post",
      "patch",
      "put",
      "delete",
      "load_token",
      "request",
      "refresh",
      "verify",
      "revoke",
      "request_access_token",
      "refresh_access_token",
      "verify_access_token",
      "revoke_access_token",
      "oauth_request",
      "reauthorize_error_string",
      "get_access_token",
      "save_access_token"
    ],
    "classes": [
      "OAuth_API_Client",
      "for",
      "unless",
      "unless",
      "unless",
      "properties",
      "name"
    ],
    "comments": [
      "/**\n * Class OAuth_API_Client\n * @package EM_OAuth\n * @property-read $service_name\n * @property-read $option_name\n * @property-read $option_dataset\n *",
      "/**\n\t * The base class for this package of classes, used for accessing infromation such as $option_name, etc.\n\t * If naming conventions are followed, ",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * @var\n\t */",
      "/**\n\t * @var OAuth_API_Token\n\t */",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * @var bool\n\t */",
      "/**\n\t * The URL without trailing slash for the API base URL, to which endpoints can be appended to.\n\t * @var string\n\t */",
      "/**\n\t * The URL that'll be used to request an authorization code from the user. Can include strings CLIENT_ID, ACCESS_SCOPE, REDIRECT_URI, and STATE w",
      "//api.oauth.com/authorize';",
      "/**\n\t * Required by child class unless it overrides the request_access_token() method.\n\t * @var string\n\t */",
      "//api.oauth.com/token';",
      "/**\n\t * Defaults to $oauuth_request_token_url if not set.\n\t * @var string\n\t */",
      "/**\n\t * Required by child class unless it overrides the verify_access_token() method.\n\t * @var string\n\t */",
      "//api.oauth.com/verify_token';",
      "/**\n\t * Required by child class unless it overrides the revoke_access_token() method.\n\t * @var string\n\t */",
      "//api.oauth.com/revoke';",
      "/**\n\t * Whether or not an OAuth Service should pass on the state param for security check\n\t * @var bool\n\t */",
      "/**\n\t * OAuth_API_Client constructor.\n\t *\n\t * @throws EM_Exception\n\t */",
      "// check credentials",
      "// constructors can be overriden to add any of the above",
      "/**\n\t * Shortcut for base class properties.\n\t * @param $name\n\t * @return mixed\n\t */",
      "/**\n\t * @return OAuth_API\n\t */",
      "// set default API class name if not defined by parent",
      "/**\n\t * @return mixed\n\t */",
      "// check there's a STATE value in the authorize url, otherwise add it proactively",
      "/**\n\t * @return string\n\t */",
      "// you can completely replace the oauth redirect link for testing locally via a proxy for example",
      "// for local development or other reasons, you can replace the domain with a tunnel domain, which should be with http(s):// included",
      "/**\n\t * Returns a native client for this service, in the event we want to load an SDK provided by the service.\n\t * @return stdClass\n\t */",
      "// GET, POST, PUT, PATCH, DELETE functions",
      "/**\n\t * @param $endpoint\n\t * @param array $request_args\n\t * @param bool $json_decode\n\t * @return array\n\t * @throws EM_Exception\n\t */",
      "// clean up whether endpoint or full URL is provided",
      "//$request_url = add_query_arg('access_token', $this->token->access_token, $request_url);",
      "// add oauth and method heaeders",
      "// prepare JSON format if sending via that content type",
      "// request and parse",
      "/* @var \\Requests_Response_Headers $response['headers'] */",
      "//anything not 20x will indicate an issue",
      "/**\n\t * Fetches event data from the given endpoint with supplied arguments according to Meetup API v3\n\t *\n\t * @param string $endpoint Full URL or endp",
      "/**\n\t * @param $endpoint\n\t * @param array $vars\n\t * @param array $request_args\n\t * @param bool $json            Shorthand for setting Content-Type in ",
      "/**\n\t * @param $endpoint\n\t * @param array $vars\n\t * @param array $request_args\n\t * @param bool $json\n\t * @return array|mixed\n\t * @throws EM_Exception\n",
      "/**\n\t * @param $endpoint\n\t * @param array $vars\n\t * @param array $request_args\n\t * @param bool $json\n\t * @return array|mixed\n\t * @throws EM_Exception\n",
      "/**\n\t * @param $endpoint\n\t * @param array $args\n\t * @param array $request_args\n\t * @return array|mixed\n\t * @throws EM_Exception\n\t */",
      "// Baseic OAuth interaction functions, loading a token into client as well as requesting, refreshing, verifying and revoking tokens.",
      "/**\n\t * @param int $user_id\n\t * @param int $account_id\n\t * @throws EM_Exception\n\t */",
      "// user id is not relevant",
      "// return value if already authorized",
      "// not authorized, re/load token",
      "// get token information from user account",
      "// renew token if expired",
      "// Refresh the token if it's expired and update WP user meta.",
      "/**\n\t * Requests an access token from the supplied authorization code. The access token is further verified and populated with service account meta.\n\t",
      "// used in $this->save_access_token()",
      "// if no token was provided, we may be able to obtain it here, otherwise validation will fail upon refresh.",
      "// verify the access token so we can establish the id of this account and then save it to user profile",
      "// now, check for previous tokens and save to it instead of overwriting (we do this in case ppl reauthorize the same account and get a new token with ",
      "// merge in new token info to old token",
      "// revert back to new token",
      "// refresh current or new token with the meta info and save",
      "/**\n\t * @throws EM_Exception\n\t */",
      "/**\n\t * Verify the token for this client by obtaining meta data of the account associated to this token and saving it to the current token.\n\t * @var b",
      "// refresh current or new token with the meta info and save",
      "// if we get here, verification passed.",
      "/**\n\t * @return boolean\n\t * @throws EM_Exception\n\t */",
      "/* START OVERRIDABLE FUNCTIONS - THESE FUNCTIONS COULD BE OVERRIDDEN TO SPECIFICALLY DEAL WITH PARTICULAR OAUTH PROVIDERS */",
      "/**\n\t * Specific function which requests the access token from the API Service and returns the access token array, an error array if service replies.\n",
      "/**\n\t * @return array\n\t * @throws EM_Exception\n\t */",
      "/**\n\t * Verifies an access token by obtaining further meta data about the account associated with that token.\n\t * Expected return is an associative ar",
      "// we may want to override this depending on what's returned",
      "/**\n\t * @return bool\n\t * @throws EM_Exception\n\t */",
      "// we may want to override this depending on what's returned",
      "/**\n\t * @param string $method\n\t * @param $request_url\n\t * @param array $args\n\t * @return mixed\n\t * @throws EM_Exception\n\t */",
      "// add client params to URL if using get",
      "// add auth params to body if using post",
      "// by defaulut post will send this content type",
      "// we may want to override this depending on what's returned",
      "/* END OVERRIDABLE FUNCTIONS */",
      "/**\n\t * @param int $api_user_id\n\t * @return string\n\t */",
      "/**\n\t * Gets an access token for a specific account, or provides first account user has available, if any. If no access token is available, an EM_Exce",
      "/**\n\t * Sets the access token to the user meta storage where all connected accounts for the user of that token are stored.\n\t */"
    ],
    "length": 21357,
    "preview": "<?php\nnamespace EM_OAuth;\nuse EM_Options, EM_Exception, stdClass;\n\n/**\n * Class OAuth_API_Client\n * @package EM_OAuth\n * @property-read $service_name\n * @property-read $option_name\n * @property-read $option_dataset\n * @property-read $authorization_sc",
    "file": "src/code/events-manager/classes/em-oauth/oauth-api-client.php"
  },
  {
    "type": "php",
    "functions": [
      "get_service_name",
      "get_service_url",
      "get_option_name",
      "get_option_dataset",
      "get_client_class",
      "get_token_class",
      "get_authorization_scope",
      "supports_multiple_tokens",
      "get_client",
      "get_user_tokens",
      "get_site_tokens",
      "oauth_authorize",
      "oauth_disconnect"
    ],
    "classes": [
      "OAuth_API",
      "to",
      "name",
      "to",
      "name"
    ],
    "comments": [
      "/**\n\t * The name of this service to be displayed to the end user in notices etc.\n\t * @var string\n\t */",
      "/**\n\t * @var string\n\t */",
      "/**\n\t * Ths option/key name used to differentiate this from other OAuth objects stored in the database tables.\n\t * @var string\n\t */",
      "/**\n\t * Where data about this API is stored, which is by default in a serialized array with option name 'em_oauth'\n\t * @var string\n\t */",
      "/**\n\t * Allows overriding the default client class to be loaded, set this to the token class name you'd like to use instead.\n\t * By default, the exten",
      "/**\n\t * Allows overriding the default token class to be loaded, set this to the token class name you'd like to use instead.\n\t * By default, the extend",
      "/**\n\t * Defines whether authorization tokens are stored at a site, user or (eventually) network level.\n\t * @var string 'site' or 'user' level (future ",
      "/**\n\t * Whether or not storage destination supports multiple accounts (e.g. multiple accounts for a site or a user)\n\t * @var bool\n\t */",
      "/**\n\t * @return string\n\t */",
      "/**\n\t * @return string\n\t */",
      "/**\n\t * @return string\n\t */",
      "/**\n\t * @return string\n\t */",
      "/**\n\t * @return OAuth_API_Client|string String representation of token class, used for instantiation or static function/property reference\n\t */",
      "/**\n\t * @return OAuth_API_Token|string String representation of token class, used for instantiation or static function/property reference\n\t */",
      "/**\n\t * @return string\n\t */",
      "/**\n\t * @return bool\n\t */",
      "/**\n\t * Loads the service credentials into an abstract client api object. If a user ID is supplied and there's an issue retrieving an access token, an",
      "/* @var OAuth_API_Client $client */",
      "//load user access token",
      "/**\n\t * @return array[OAuth_API_Token]\n\t */",
      "/**\n\t * Includes and calls the code required to handle a callback from FB to store user auth token.\n\t */",
      "// Redirect to settings page",
      "/**\n\t * Handles disconnecting a user from one or all their connected Google accounts, attempting to revoke their key in the process.\n\t */",
      "// Redirect to settings page",
      "//include dependents"
    ],
    "length": 9401,
    "preview": "<?php\nnamespace EM_OAuth;\nuse EM_Exception, EM_Notices, EM_Options;\n\nclass OAuth_API {\n\t/**\n\t * The name of this service to be displayed to the end user in notices etc.\n\t * @var string\n\t */\n\tprotected static $service_name = 'EM OAuth 2.0';\n\t/**\n\t * @",
    "file": "src/code/events-manager/classes/em-oauth/oauth-api.php"
  },
  {
    "type": "php",
    "functions": [
      "__construct",
      "refresh",
      "verify",
      "is_expired",
      "to_array"
    ],
    "classes": [
      "OAuth_API_Token"
    ],
    "comments": [
      "/**\n\t * @var int Timestamp when a token will expire at, which can be supplied instead of expires_in and that value will be generated from this one.\n\t ",
      "/**\n\t * @param array $token\n\t * @throws EM_Exception\n\t */",
      "/**\n\t * @param array $token\n\t * @return boolean $updated\n\t * @throws EM_Exception\n\t */",
      "// set values that may not have been added",
      "// set expires_at, which is what we'll use for expiry checking",
      "/**\n\t * @throws EM_Exception\n\t */"
    ],
    "length": 2329,
    "preview": "<?php\nnamespace EM_OAuth;\nuse EM_Exception;\n\nclass OAuth_API_Token {\n\n\tpublic $access_token = '';\n\tpublic $refresh_token = '';\n\tpublic $token_type = '';\n\tpublic $expires_in = 0;\n\t/**\n\t * @var int Timestamp when a token will expire at, which can be su",
    "file": "src/code/events-manager/classes/em-oauth/oauth-api-token.php"
  }
]