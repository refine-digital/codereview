[
  {
    "type": "js",
    "functions": [
      "update",
      "deactivate",
      "init_select",
      "addOption",
      "equalizeSizes"
    ],
    "classes": [],
    "comments": [
      "/*! selectize.js - v0.13.5 | https://github.com/selectize/selectize.js | Apache License (v2) */"
    ],
    "length": 56433,
    "preview": "/*! selectize.js - v0.13.5 | https://github.com/selectize/selectize.js | Apache License (v2) */\nvar highlight=function($element,pattern){var regex,highlight;if(\"string\"!=typeof pattern||pattern.length)return regex=\"string\"==typeof pattern?new RegExp(",
    "file": "src/code/events-manager/includes/external/selectize/js/selectize.min.js"
  },
  {
    "type": "js",
    "functions": [
      "if"
    ],
    "classes": [
      "to"
    ],
    "comments": [
      "/**\n * selectize.js (v0.13.5)\n * Copyright (c) 2013\u20132015 Brian Reavis & contributors\n * Copyright (c) 2020 Selectize Team & contributors\n *\n * License",
      "/*jshint curly:false */",
      "/*jshint browser:true */",
      "// Wrap matching part of text node with highlighting <span>, e.g.",
      "// Soccer  ->  <span class=\"highlight\">Soc</span>cer  for regex = /soc/i",
      "// Recurse element node, looking for child text nodes to highlight, unless element",
      "// is childless, <script>, <style>, or already highlighted: <span class=\"highlight\">",
      "/**\n\t * removeHighlight fn copied from highlight v5 and\n\t * edited to remove with() and pass js strict mode\n\t */",
      "/* , args... */",
      "/**\n\t * Mixin will delegate all MicroEvent.js function in the destination object.\n\t *\n\t * - MicroEvent.mixin(Foobar) will make Foobar able to use Micr",
      "// for now, android support in general is too spotty to support validity",
      "/**\n\t * Converts a scalar to its best string representation\n\t * for hash keys and HTML attribute values.\n\t *\n\t * Transformations:\n\t *   'str'     -> '",
      "/**\n\t * Escapes a string for use within HTML.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */",
      "/**\n\t * Escapes \"$\" characters in replacement strings.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */",
      "/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked before the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @",
      "/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked after the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @p",
      "/**\n\t * Wraps `fn` so that it can only be invoked once.\n\t *\n\t * @param {function} fn\n\t * @returns {function}\n\t */",
      "/**\n\t * Wraps `fn` so that it can only be called once\n\t * every `delay` milliseconds (invoked on the falling edge).\n\t *\n\t * @param {function} fn\n\t * @",
      "/**\n\t * Debounce all fired events types listed in `types`\n\t * while executing the provided `fn`.\n\t *\n\t * @param {object} self\n\t * @param {array} types",
      "// override trigger method",
      "// invoke provided function",
      "// trigger queued events",
      "/**\n\t * A workaround for http://bugs.jquery.com/ticket/6696\n\t *\n\t * @param {object} $parent - Parent element to listen on.\n\t * @param {string} event -",
      "/**\n\t * Determines the current selection within a text input control.\n\t * Returns an object containing:\n\t *   - start\n\t *   - length\n\t *\n\t * @param {o",
      "/**\n\t * Copies CSS properties from one element to another.\n\t *\n\t * @param {object} $from\n\t * @param {object} $to\n\t * @param {array} properties\n\t */",
      "/**\n\t * Measures the width of a string within a\n\t * parent element (in pixels).\n\t *\n\t * @param {string} str\n\t * @param {object} $parent\n\t * @returns {",
      "/**\n\t * Sets up an input to grow horizontally as the user\n\t * types. If the value is changed manually, you can\n\t * trigger the \"update\" handler to res",
      "// numpad 0-9, numeric operators",
      "// semicolon, equal, comma, dash, etc.",
      "// console.group is undefined in <IE11",
      "// detect rtl environment",
      "// setup default state",
      "// build options table",
      "// build optgroup table",
      "// option-dependent defaults",
      "// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
      "// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
      "/**\n\t\t * Creates all elements and sets up event bindings.\n\t\t */",
      "// if splitOn was not passed in, construct it from the delimiter to allow pasting universally",
      "// prevent events on the dropdown scrollbar from causing the control to blur",
      "// blur on click outside",
      "// store original children and tab index so that they can be",
      "// restored when the destroy() method is called.",
      "// feature detect for the validation API",
      "/**\n\t\t * Sets up default rendering functions.\n\t\t */",
      "/**\n\t\t * Maps fired events to callbacks provided\n\t\t * in the settings used when creating the control.\n\t\t */",
      "/**\n\t\t * Triggered when the main control element\n\t\t * has a click event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */",
      "// necessary for mobile webkit devices (manual focus triggering",
      "// is ignored unless invoked within a click event)",
      "// also necessary to reopen a dropdown that has been closed by",
      "/**\n\t\t * Triggered when the main control element\n\t\t * has a mouse down event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */",
      "// retain focus by preventing native handling. if the",
      "// event target is the input it should not be modified.",
      "// otherwise, text selection within the input won't work.",
      "// give control focus",
      "/**\n\t\t * Triggered when the value of the control has been changed.\n\t\t * This should propagate the event to the original DOM\n\t\t * input / select elemen",
      "/**\n\t\t * Triggered on <input> paste.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "// If a regex or string is included, this will split the pasted",
      "// input and create Items for each separate value",
      "// Wait for pasted text to be recognized in value",
      "/**\n\t\t * Triggered on <input> keypress.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "/**\n\t\t * Triggered on <input> keydown.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "// Default behaviour is to jump to the next field, we only want this",
      "// if the current field doesn't accept any more entries",
      "/**\n\t\t * Triggered on <input> input.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "/**\n\t\t * Invokes the user-provide option provider / loader.\n\t\t *\n\t\t * Note: this function is debounced in the Selectize\n\t\t * constructor (by `settings",
      "/**\n\t\t * Triggered on <input> focus.\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */",
      "/**\n\t\t * Triggered on <input> blur.\n\t\t *\n\t\t * @param {object} e\n\t\t * @param {Element} dest\n\t\t */",
      "// necessary to prevent IE closing the dropdown when the scrollbar is clicked",
      "// IE11 bug: element still marked as active",
      "/**\n\t\t * Triggered when the user rolls over\n\t\t * an option in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t *",
      "/**\n\t\t * Triggered when the user clicks on an option\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "/**\n\t\t * Triggered when the user clicks on an item\n\t\t * that has been selected.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */",
      "/**\n\t\t * Invokes the provided method that provides\n\t\t * results to a callback---which are then added\n\t\t * as options to the control.\n\t\t *\n\t\t * @param ",
      "/**\n\t\t * Gets the value of input field of the control.\n\t\t *\n\t\t * @returns {string} value\n\t\t */",
      "/**\n\t\t * Sets the input field of the control to the specified value.\n\t\t *\n\t\t * @param {string} value\n\t\t */",
      "/**\n\t\t * Returns the value of the control. If multiple items\n\t\t * can be selected (e.g. <select multiple>), this returns\n\t\t * an array. If only one it",
      "/**\n\t\t * Resets the selected items to the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t */",
      "/**\n\t\t * Resets the number of max items to the given value\n\t\t *\n\t\t * @param {number} value\n\t\t */",
      "//reset to unlimited items.",
      "/**\n\t\t * Sets the selected item.\n\t\t *\n\t\t * @param {object} $item\n\t\t * @param {object} e (optional)\n\t\t */",
      "// clear the active selection",
      "// ensure control has focus",
      "/**\n\t\t * Sets the selected item in the dropdown menu\n\t\t * of available options.\n\t\t *\n\t\t * @param {object} $object\n\t\t * @param {boolean} scroll\n\t\t * @p",
      "/**\n\t\t * Selects all items (CTRL + A).\n\t\t */",
      "/**\n\t\t * Hides the input element out of view, while\n\t\t * retaining its focus.\n\t\t */",
      "/**\n\t\t * Restores input visibility.\n\t\t */",
      "/**\n\t\t * Gives the control focus.\n\t\t */",
      "/**\n\t\t * Forces the control out of focus.\n\t\t *\n\t\t * @param {Element} dest\n\t\t */",
      "/**\n\t\t * Returns a function that scores an object\n\t\t * to show how good of a match it is to the\n\t\t * provided query.\n\t\t *\n\t\t * @param {string} query\n\t",
      "/**\n\t\t * Returns search options for sifter (the system\n\t\t * for scoring and sorting results).\n\t\t *\n\t\t * @see https://github.com/brianreavis/sifter.js\n",
      "/**\n\t\t * Searches through available options and returns\n\t\t * a sorted array of matches.\n\t\t *\n\t\t * Returns an object containing:\n\t\t *\n\t\t *   - query {s",
      "// validate user-provided result scoring function",
      "// filter out selected items",
      "/**\n\t\t * Refreshes the list of available options shown\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {boolean} triggerDropdown\n\t\t */",
      "// render and group available options individually",
      "// render optgroup headers & join groups",
      "// render the optgroup header and options within it,",
      "// then pass it to the wrapper template",
      "// highlight matching terms inline",
      "// add \"selected\" class to selected options",
      "// clear selection on all previously selected elements first",
      "// add create option",
      "/**\n\t\t * Adds an available option. If it already exists,\n\t\t * nothing will happen. Note: this does not refresh\n\t\t * the options list dropdown (use `re",
      "/**\n\t\t * Registers an option to the pool of options.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */",
      "/**\n\t\t * Registers an option group to the pool of option groups.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */",
      "/**\n\t\t * Registers a new optgroup for options\n\t\t * to be bucketed into.\n\t\t *\n\t\t * @param {string} id\n\t\t * @param {object} data\n\t\t */",
      "/**\n\t\t * Removes an existing option group.\n\t\t *\n\t\t * @param {string} id\n\t\t */",
      "/**\n\t\t * Clears all existing option groups.\n\t\t */",
      "/**\n\t\t * Updates an option available for selection. If\n\t\t * it is visible in the selected items or options\n\t\t * dropdown, it will be re-rendered autom",
      "// update references",
      "// invalidate render cache",
      "// update the item if it's selected",
      "// invalidate last query because we might have updated the sortField",
      "// update dropdown contents",
      "/**\n\t\t * Removes a single option.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */",
      "/**\n\t\t * Clears all options.\n\t\t *\n\t\t * @param {boolean} silent\n\t\t */",
      "/**\n\t\t * Returns the jQuery element of the option\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */",
      "/**\n\t\t * Returns the jQuery element of the first\n\t\t * selectable option.\n\t\t *\n\t\t * @return {object}\n\t\t */",
      "/**\n\t\t * Returns the jQuery element of the next or\n\t\t * previous selectable option.\n\t\t *\n\t\t * @param {object} $option\n\t\t * @param {int} direction  can",
      "/**\n\t\t * Finds the first element with a \"data-value\" attribute\n\t\t * that matches the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t * @param {object} ",
      "/**\n\t\t * Finds the first element with a \"textContent\" property\n\t\t * that matches the given textContent value.\n\t\t *\n\t\t * @param {mixed} textContent\n\t\t ",
      "/**\n\t\t * Returns the jQuery element of the item\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */",
      "/**\n\t\t * Returns the jQuery element of the item\n\t\t * matching the given textContent.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} ignoreCase\n",
      "/**\n\t\t * \"Selects\" multiple items at once. Adds them to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {bool",
      "/**\n\t\t * \"Selects\" an item. Adds it to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */",
      "// update menu / remove the option (if this is not one item being added as part of series)",
      "// hide the menu if the maximum number of items have been selected or no options are left",
      "/**\n\t\t * Removes the selected item matching\n\t\t * the provided value.\n\t\t *\n\t\t * @param {string} value\n\t\t */",
      "/**\n\t\t * Invokes the `create` method provided in the\n\t\t * selectize options that should provide the data\n\t\t * for the new item, given the user input.\n",
      "/**\n\t\t * Re-renders the selected item lists.\n\t\t */",
      "/**\n\t\t * Updates all state-dependent attributes\n\t\t * and CSS classes.\n\t\t */",
      "/**\n\t\t * Update the `required` attribute of both input and control input.\n\t\t *\n\t\t * The `required` property needs to be activated on the control input",
      "/**\n\t\t * Updates all state-dependent CSS classes.\n\t\t */",
      "/**\n\t\t * Determines whether or not more items can be added\n\t\t * to the control without exceeding the user-defined maximum.\n\t\t *\n\t\t * @returns {boolean",
      "/**\n\t\t * Refreshes the original <select> or <input>\n\t\t * element to reflect the current state.\n\t\t */",
      "/**\n\t\t * Shows/hide the input placeholder depending\n\t\t * on if there items in the list already.\n\t\t */",
      "/**\n\t\t * Shows the autocomplete dropdown containing\n\t\t * the available options.\n\t\t */",
      "/**\n\t\t * Closes the autocomplete dropdown menu.\n\t\t */",
      "// Do not trigger blur while inside a blur event,",
      "// this fixes some weird tabbing behavior in FF and IE.",
      "// close keyboard on iOS",
      "/**\n\t\t * Calculates and applies the appropriate\n\t\t * position of the dropdown.\n\t\t */",
      "/**\n\t\t * Resets / clears all selected items\n\t\t * from the control.\n\t\t *\n\t\t * @param {boolean} silent\n\t\t */",
      "/**\n\t\t * A helper method for inserting an element\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {object} $el\n\t\t */",
      "/**\n\t\t * Removes the current selected item(s).\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */",
      "// determine items that will be removed",
      "// allow the callback to abort",
      "// select previous option",
      "/**\n\t\t * Selects the previous / next item (depending\n\t\t * on the `direction` argument).\n\t\t *\n\t\t * > 0 - right\n\t\t * < 0 - left\n\t\t *\n\t\t * @param {int} d",
      "/**\n\t\t * Moves the caret left / right.\n\t\t *\n\t\t * @param {int} direction\n\t\t * @param {object} e (optional)\n\t\t */",
      "/**\n\t\t * Moves the caret to the specified index.\n\t\t *\n\t\t * @param {int} i\n\t\t */",
      "// the input must be moved by leaving it in place and moving the",
      "// siblings, due to the fact that focus cannot be restored once lost",
      "// on mobile webkit devices",
      "/**\n\t\t * Disables user input on the control. Used while\n\t\t * items are being asynchronously created.\n\t\t */",
      "/**\n\t\t * Re-enables user input on the control.\n\t\t */",
      "/**\n\t\t * Disables user input on the control completely.\n\t\t * While disabled, it cannot receive focus.\n\t\t */",
      "/**\n\t\t * Enables the control so that it can respond\n\t\t * to focus and user input.\n\t\t */",
      "/**\n\t\t * Completely destroys the control and\n\t\t * unbinds all event listeners so that it can\n\t\t * be garbage collected.\n\t\t */",
      "/**\n\t\t * A helper method for rendering \"item\" and\n\t\t * \"option\" templates, given the data.\n\t\t *\n\t\t * @param {string} templateName\n\t\t * @param {object}",
      "// pull markup from cache if it exists",
      "// add mandatory attributes",
      "/**\n\t\t * Clears the render cache for a template. If\n\t\t * no template is given, clears all render\n\t\t * caches.\n\t\t *\n\t\t * @param {string} templateName\n\t",
      "/**\n\t\t * Determines whether or not to display the\n\t\t * create item prompt, given a user input.\n\t\t *\n\t\t * @param {string} input\n\t\t * @return {boolean}\n",
      "// regexp or string for splitting up values from a paste command",
      "/*\n\t\tload                 : null, // function(query, callback) { ... }\n\t\tscore                : null, // function(search) { ... }\n\t\tformatValueToKey  ",
      "/*\n\t\t\titem: null,\n\t\t\toptgroup: null,\n\t\t\toptgroup_header: null,\n\t\t\toption: null,\n\t\t\toption_create: null\n\t\t\t*/",
      "/**\n\t\t * Initializes selectize from a <input type=\"text\"> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */",
      "/**\n\t\t * Initializes selectize from a <select> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */",
      "// if the option already exists, it's probably been",
      "// duplicated in another optgroup. in this case, push",
      "// the current group to the \"optgroup\" property on the",
      "// existing option so that it's rendered in both places.",
      "// 5 - padding value;",
      "// https://stackoverflow.com/questions/30053167/autocomplete-off-vs-false",
      "// $control.css({overflow: 'visible'});",
      "// $control.css({overflow: 'hidden'});",
      "/**\n\t\t\t\t * Appends an element as a child (with raw HTML).\n\t\t\t\t *\n\t\t\t\t * @param {string} html_container\n\t\t\t\t * @param {string} html_element\n\t\t\t\t * @ret",
      "// override the item rendering method to add the button to each",
      "// add event listener",
      "/**\n\t\t\t\t * Appends an element as a child (with raw HTML).\n\t\t\t\t *\n\t\t\t\t * @param {string} html_container\n\t\t\t\t * @param {string} html_element\n\t\t\t\t * @ret",
      "// override the item rendering method to add the button to each",
      "// add event listener"
    ],
    "length": 98935,
    "preview": "/**\n * selectize.js (v0.13.5)\n * Copyright (c) 2013\u20132015 Brian Reavis & contributors\n * Copyright (c) 2020 Selectize Team & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in comp",
    "file": "src/code/events-manager/includes/external/selectize/js/selectize.js"
  }
]