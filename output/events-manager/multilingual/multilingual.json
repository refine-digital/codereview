[
  {
    "type": "php",
    "functions": [
      "__construct",
      "__call",
      "get_option",
      "is_option_translatable",
      "get_translated_page"
    ],
    "classes": [
      "EM_ML_Options"
    ],
    "comments": [
      "/**\n\t * @var array Array of option keys in wp_options that can be translated.\n\t */",
      "//define the translatable options for the plugin",
      "//event submission forms",
      "//privacy policy consent",
      "//booking feedback messages",
      "//booking form options",
      "//booking email templates",
      "//event submission templates",
      "//Registration Emails",
      "//When in the EM settings page translatable values should be shown in the currently active language",
      "//add a hook for all trnalsateable values",
      "//Switch EM page IDs to translated versions if they exist, so e.g. the events page in another language grabs the right translated page format if avail",
      "/**\n\t * Assumes calls are from the pre_option_ filter which were registered during the init() function. \n\t * This takes the filter name and searches f",
      "//we're calling an option to be overridden by the default language",
      "//don't use EM_ML::get_option as it creates an endless loop for options without a translation",
      "/* START wp_options hooks */",
      "/**\n\t * Gets an option in a specific language. Similar to get_option but will return either the translated option if it exists\n\t * @param string $opti",
      "/**\n\t * Returns whether or not this option name is translatable.\n\t * @param string $option Option Name\n\t * @return boolean\n\t */",
      "/* END wp_options functions */",
      "/**\n     * Takes a page post_id and returns the translated version post_id of the language currently being viewed by the user. \n     * Used to detect "
    ],
    "length": 10559,
    "preview": "<?php\nclass EM_ML_Options {\n\t/**\n\t * @var array Array of option keys in wp_options that can be translated.\n\t */\n\tstatic public $translatable_options;\n\t\n    public function __construct(){\n\t    //define the translatable options for the plugin\n\t\tself::$",
    "file": "src/code/events-manager/multilingual/em-ml-options.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_wp_localize_script",
      "get_langs",
      "wp_switch_locale",
      "switch_locale",
      "restore_locale",
      "pre_determine_locale",
      "get_option",
      "is_option_translatable",
      "get_translated_post_id",
      "get_the_language",
      "get_translation_id",
      "get_translation",
      "get_translations",
      "get_event_translations",
      "get_location_translations",
      "get_original",
      "is_original",
      "get_original_event",
      "get_original_location",
      "set_object_language",
      "set_language_by_post_ids",
      "attach_translations",
      "toggle_languages_index"
    ],
    "classes": [
      "EM_ML",
      "has",
      "if"
    ],
    "comments": [
      "/**\n * Abstract layer allowing for certain aspects of Events Manager to be translateable. Useful for translation plugins to hook into.\n */",
      "/**\n     * @var boolean Flag confirming whether this class has been initialized yet.\n     */",
      "/**\n\t * @var array Array of available languages, where keys are the locales and the values are the displayable names of the language e.g. array('fr_FR",
      "/**\n\t * @var string The main/default language of this blog, meaning the language used should no multilingual plugin be installed. Example: 'en_US' for",
      "/**\n\t * The currently active language of this site, meaning the language being manipulated by WordPress. This may be different to the global $locale v",
      "/**\n\t * If switching languages temporarly, original current language stored here, null if we haven't switched.\n\t * @var string\n\t */",
      "/**\n\t * @var boolean Flag for whether EM is multilingual ready, false by default, set after init() has been executed first time.\n\t */",
      "/**\n\t * Temporary cache of original translations, to avoid repeated hits on the DB\n\t * Array is organized by blog_id, then post_id => original_post_id",
      "//Determine the available languages and the currently displayed locale for this site. 3rd party plugins need to override these filters.",
      "//proceed with loading the plugin, we don't need to deal with the rest of this if no languages were defined by an extending class",
      "//set flag to prevent unecessary counts",
      "//only initialize when this is a MultiLingual instance",
      "//make sure options are being translated immediately if needed",
      "//load all the extra ML helper classes",
      "//change some localized script vars",
      "//only initialize when this is a MultiLingual instance",
      "/**\n     * Localizes the script variables\n     * @param array $em_localized_js\n     * @return array\n     */",
      "/**\n\t * Gets the available languages this site can display.\n\t * @return array EM_ML::$langs;\n\t */",
      "/**\n\t * Handles setting and restoring of WP Locale\n\t * @param string $locale\n\t */",
      "// short-circuit determininig the locale for EM-specific purposes",
      "// this may not mean the same as the locale currently restored which is the 'display' language, e.g. in admins you could be in french mode whilst view",
      "// restoring a locale unloads text domains which prevents them from reloading, EM textdomains and any correctly prefixed add-ons should be reloaded",
      "// short-circuit determininig the locale for EM-specific purposes",
      "/**\n\t * Quirky fix for situations where admins are triggering something requiring translations in the backend whilst EM_ML has switched locales tempor",
      "/**\n\t * Gets translated option. Shortcut for EM_ML_Options::get_option() and should be used instead outside of the EM_ML namespace.\n\t * @uses EM_ML_Op",
      "/**\n\t * Returns whether or not this option name is translatable.\n\t * @uses EM_ML_Options::is_option_translatable()\n\t * @param string $option Option Na",
      "/* From here on you see options that can/should be filtered to provide the relevant translation conversions. The above functions handle the rest... */",
      "/**\n     * Takes a post ID for a CPT of $post_type, returns the post ID of a translation of the language currently being viewed.\n     * If post ID is ",
      "// multisite support",
      "// clean post_id and determine $post_type if not supplied",
      "// find the translation via the event or location tables",
      "// account for multisite global events",
      "// search based on post type",
      "// get post id from search reults",
      "// pass on $translated_post_id to translation plugin",
      "// restore multisite blog if necessary",
      "// return translated post id",
      "/**\n\t * Returns the language of the object, in a WPLANG compatible format\n\t * @param EM_Event|EM_Location $object\n\t * @return mixed\n\t */",
      "/**\n\t * Gets the post ID of an EM_Event or EM_Location $EM_Object of the desired language $language, returns same object post id if already in request",
      "/**\n\t * Gets and EM_Event or EM_Location object equivalent of the desired language $language, or returns the same object if not available.\n\t * This fu",
      "//return $object if the condition below isn't met",
      "/**\n\t * Returns an array of translations for the supplied event, location or taxonomy. Array keys are the language code for this translation, in WPLAN",
      "/**\n\t * @param EM_Event $EM_Event\n\t * @return array[EM_Event]\n\t * @see EM_ML::get_translations()\n\t */",
      "/**\n\t * @param EM_Location $EM_Location\n\t * @return array[EM_Location]\n\t * @see EM_ML::get_translations()\n\t */",
      "/* START original object determining functions - Whilst not crucial to override, this is a good fallback mechanism for any event/location that may not",
      "/**\n\t * Gets the original event/location. The 'original' means the language the event/location was first created in, irrespective of the default/main ",
      "// save to cache first",
      "// if we still don't have an original, return the same object",
      "/**\n\t * @param $object\n\t * @return bool\n\t */",
      "// assumed original since all non-multilingual content is original",
      "// we can only determine if something is original without 3rd party intervention if it has been saved previously",
      "// if $result is passed as null then it can be assuemd we could not determine originality and multilingual plugins should decide",
      "/**\n\t * Shortcut for EM_ML::get_original() to aid IDE semantics.\n\t * @see EM_ML::get_original()\n\t * @param EM_Event $EM_Event\n\t * @return EM_Event\n\t *",
      "/**\n\t * Shortcut for EM_ML::get_original() to aid IDE semantics.\n\t * @see EM_ML::get_original()\n\t * @param EM_Location $EM_Location\n\t * @return EM_Loc",
      "/* END original object determining functions */",
      "/**\n\t * Sets the language of an object, shortcut for EM_ML::set_language_by_post_ids()\n\t * @param EM_Event|EM_Location $EM_Object\n\t * @param string $l",
      "/**\n\t * Inserts or updates locale meta for events and locations by post id.\n\t * @param string $locale\n\t * @param array $post_ids\n\t * @param string $po",
      "//valid locale must be supplied",
      "//save to events/location table - $update is irrelevant here as we must already have a saved event/location",
      "//set parents and languages for each post",
      "//sanitize any sql vars",
      "//get the event/location ids of both new and old event/locations so we can do a bulk update using their ids",
      "//save to events/location table - $update is irrelevant here as we must already have a saved event/location",
      "//other plugins may want to do this before we do, that's ok!"
    ],
    "length": 24956,
    "preview": "<?php\n/**\n * Abstract layer allowing for certain aspects of Events Manager to be translateable. Useful for translation plugins to hook into.\n */\nclass EM_ML{\n    /**\n     * @var boolean Flag confirming whether this class has been initialized yet.\n   ",
    "file": "src/code/events-manager/multilingual/em-ml.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "settings_pages",
      "meta_boxes",
      "meta_box_translated_event",
      "meta_box_translated_location",
      "meta_box_bookings_translation",
      "meta_box_location_where",
      "event_meta_box_attributes",
      "location_meta_box_attributes"
    ],
    "classes": [
      "EM_ML_Admin"
    ],
    "comments": [
      "/**\n\t * Returns array of settings page names used in $_REQUEST['page'] that must always be served in the original language of the blog \n\t * @return ar",
      "//decide if it's a master event, if not then hide the meta boxes",
      "//remove meta boxes for events",
      "//add translation-specific meta boxes",
      "//locations, decide if it's a master location, if not then hide the meta boxes",
      "//add translation-specific meta boxes",
      "//remove other meta boxes",
      "//output the _emnonce because it won't be output due to missing meta boxes",
      "//output the _emnonce because it won't be output due to missing meta boxes",
      "/* @var $EM_Ticket EM_Ticket */",
      "/* @var EM_Location $EM_Location */",
      "//get original location for attributes",
      "//get original location for attributes"
    ],
    "length": 11246,
    "preview": "<?php\nclass EM_ML_Admin{\n    \n\tpublic static function init(){\n\t\tadd_action('add_meta_boxes_'.EM_POST_TYPE_EVENT, 'EM_ML_Admin::meta_boxes',100);\n\t\tadd_action('add_meta_boxes_event-recurring', 'EM_ML_Admin::meta_boxes', 100, 1);\n\t\tadd_action('add_meta",
    "file": "src/code/events-manager/multilingual/em-ml-admin.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "em_booking_email_before_send",
      "em_booking_output_pre",
      "em_booking_output",
      "em_booking_email_after_send",
      "em_booking_get_post_pre",
      "override_bookings",
      "em_booking_form_footer",
      "em_booking_get_event",
      "em_booking_email_messages",
      "em_bookings_admin_page",
      "em_bookings_table_rows_col",
      "em_bookings_table_cols_template"
    ],
    "classes": [
      "EM_ML_Bookings"
    ],
    "comments": [
      "// email language context",
      "//add_action('em_booking_output_pre', 'EM_ML_Bookings::em_booking_output_pre', 1, 1);",
      "//add_filter('em_booking_output', 'EM_ML_Bookings::em_booking_output', 10, 2);",
      "// prevent overrides from happening during certain operations",
      "/**\n\t * @param EM_Booking $EM_Booking\n\t */",
      "/**\n\t * Sets the current language to the booking language so that email placeholders are translated correctly.\n\t * @param EM_Booking $EM_Booking\n\t */",
      "/**\n\t * Reverts the current language in case it was changed temporarily during email sending.\n\t * @param string $output\n\t * @param EM_Booking $EM_Book",
      "// we can run this knowing that if locale wasnt switched previously it won't proceed with switching anything",
      "/**\n     * @param EM_Booking $EM_Booking\n     */",
      "/**\n\t * Checks to see if an event is a translation and therefore references booking data from the original event. If so, EM_Bookings object\n\t * is rep",
      "//we've already done this before, so we just need to make sure the event id isn't being reset to the translated event id",
      "//bookings hasn't been 'translated' yet, so we get the original event, get the EM_Bookings object and replace the current event with it.",
      "/**\n\t * @param $EM_Event\n\t */",
      "/**\n\t * Switches the event related to this booking if a translation was booked, so that when outputting information like emails, event info shows in a",
      "// so that we always fire this filter each time get_event() is called",
      "//only proceed if booking was in another language AND we're not in the current language given the option is translated automatically",
      "//get the translated event",
      "//check that we're not already dealing with the translated event",
      "//below is copied script from EM_Booking::email_messages() replacing get_option with EM_ML_Options::get_option() supplying the booking language",
      "//TODO remove offline status from here and move to pro",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "//admins should get something (if set to)",
      "/* @var EM_Notices $EM_Notices */"
    ],
    "length": 9683,
    "preview": "<?php\nclass EM_ML_Bookings {\n\t\n\tpublic static $ignore_post_ids = array();\n\t\n\tpublic static $displaying_locale = false;\n    \n    public static function init(){\n        add_action('em_booking_get_post_pre','EM_ML_Bookings::em_booking_get_post_pre', 1, ",
    "file": "src/code/events-manager/multilingual/em-ml-bookings.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "override_placeholders"
    ],
    "classes": [
      "EM_ML_Placeholders"
    ],
    "comments": [
      "/*\n * Since translations of the original event post share certain information such as times, bookings and location, certain placeholders should be man",
      "//override bookign form",
      "/**\n\t * Certain placeholders, specifically booking placeholders, will take information from the original event, so we generate the \n\t * @param string ",
      "//get the master event info, for later use",
      "//override bookign form",
      "//override bookign form"
    ],
    "length": 1836,
    "preview": "<?php\n/*\n * Since translations of the original event post share certain information such as times, bookings and location, certain placeholders should be manipulated\n * when showing a translation of the event.\n * \n * At this time, given that times etc",
    "file": "src/code/events-manager/multilingual/em-ml-placeholders.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "location_merge_original_meta",
      "location_merge_original_attributes",
      "location_get_post_meta",
      "location_save_meta_pre",
      "location_delete_meta_pre"
    ],
    "classes": [
      "EM_ML_IO_Locations"
    ],
    "comments": [
      "/**\n * Model-related functions. Each ML plugin will do its own thing so must be accounted for accordingly. Below is a description of things that shoul",
      "/**\n\t * Merge shared translation meta from original $location into $EM_Location.\n\t * @param EM_Location $EM_Location The location to merge original me",
      "//set values over from original location",
      "/**\n\t * Hooks into em_location_get_post_meta and assigns location info from original translation so other translations don't manage location-specific ",
      "//check if this is a master location, if not then we need to get the relevant master location info and populate this object with it so it passes valid",
      "//get original location object",
      "/**\n\t * Merges original information back from original or synchronizes address changes to translations where the address lines aren't overriden.\n\t * U",
      "//do this early on so we know the language we're dealing with",
      "// save parent info about this location",
      "//in case it didnt' go through get_post",
      "// we need to search translations of this location and update untranslated address fields which are still stored in the translation record",
      "//loop through translations, check for original non-translated strings and replace with updated ones",
      "/* @var EM_Location $location */",
      "/**\n\t * When a master location is deleted, translations are not necessarily deleted so things like event-location linkage must be transferred to a tra",
      "//check to see if there's any translations of this location",
      "// first available translation",
      "// provide the default language if not the original language",
      "//if so check if the default language still exists",
      "//make that translation the master event by changing event ids of bookings, tickets etc. to the new master event",
      "//also change wp_postmeta",
      "// update the location parents of any translations",
      "//other add-ons with tables with location_id foreign keys should hook here and change"
    ],
    "length": 7987,
    "preview": "<?php\n/**\n * Model-related functions. Each ML plugin will do its own thing so must be accounted for accordingly. Below is a description of things that should happen so everything 'works'.\n *\n * When an event or location is saved, we need to perform c",
    "file": "src/code/events-manager/multilingual/em-ml-io-locations.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "get_untranslated",
      "em_object_get_default_search",
      "location_searches",
      "event_searches",
      "location_searches_autocompleter"
    ],
    "classes": [
      "EM_ML_Search"
    ],
    "comments": [
      "/**\n\t * @var bool Flag to easily disable search filtering of languages\n\t */",
      "//will work as of EM 5.3.3",
      "/**\n\t * Returns a list of untranslated events or locations by evnet/location id. Used f,\n\t * ,or searches that should include untranslated versions of",
      "// only useful for MS non-global tables mode",
      "// return cache if possible",
      "// query once per script run",
      "//each blog will have its own location/events table",
      "/**\n\t * @param array $defaults\n\t * @return array\n\t */",
      "//check that this location ID is the original one, given that all events of any language will refer to the location_id of the original",
      "// define a language if not already defined",
      "// the default will now be to search in the current language",
      "/**\n\t * Tweaks eventful and eventless search arguments so that these searches are based off the original/parent location which is what events in any l",
      "// if we are to show locations where translated events don't exist, we will need to include those here",
      "// we add a sub sub query to get any originally translated locations that do/don't have an originally translated event of some kind, past present or w",
      "/**\n\t *\n\t * @param array $conditions\n\t * @param array $args\n\t * @return array\n\t */",
      "// if we are to show events where translated events don't exist, we will need to include those here",
      "/**\n\t * Checks location search according to current language.\n\t * @param string $location_conds\n\t * @return string\n\t */"
    ],
    "length": 6069,
    "preview": "<?php\nclass EM_ML_Search {\n\t\n\t/**\n\t * @var bool Flag to easily disable search filtering of languages\n\t */\n\tpublic static $active = true;\n\tpublic static $show_untranslated = array('location' => false, 'event' => false, 'event-recurring' => false);\n\tpu",
    "file": "src/code/events-manager/multilingual/em-ml-search.php"
  },
  {
    "type": "php",
    "functions": [
      "init",
      "event_get_location",
      "event_get_event_location",
      "event_merge_original_meta",
      "event_merge_original_attributes",
      "event_get_post_meta",
      "event_delete_meta_event_pre",
      "event_duplicate_url",
      "event_duplicate",
      "event_save_meta_pre",
      "event_save_meta",
      "event_delete_events",
      "event_save_events_pre",
      "event_save_events",
      "event_detach",
      "tickets_save",
      "tickets_delete",
      "ticket_delete"
    ],
    "classes": [
      "EM_ML_IO"
    ],
    "comments": [
      "/**\n * Model-related functions. Each ML plugin will do its own thing so must be accounted for accordingly. Below is a description of things that shoul",
      "//let other add-ons hook in first",
      "/**\n     * Changes necessary event location to same language as event if different\n     * @param EM_Location $EM_Location\n     * @param EM_Event $EM_E",
      "/**\n\t * Loads original event location and merges in data to the translated event location\n\t * @param EM_Event_Locations\\Event_Location $Event_Location",
      "// get original event object",
      "// merge any data from original event, overwritten by translated event data",
      "/**\n\t * @param EM_Event $EM_Event The event to merge original meta into\n\t * @param EM_Event $event The original event\n\t */",
      "//set values over from original event",
      "//reset the start/end internal timestamps and private values",
      "/**\n\t * @param EM_Event $EM_Event\n\t * @param EM_Event $event\n\t */",
      "/**\n     * Hooks into em_event_get_post and writes the original event translation data into the current event, to avoid validation errors and correct ",
      "//check if this is a master event, if not then we need to get the relevant master event info and populate this object with it so it passes validation ",
      "//get original event object",
      "// We need to save ticket translations here as well to the ticket objects",
      "/* @var $EM_Ticket EM_Ticket */",
      "//we need to make sure the location is the original location",
      "/**\n\t * When a master event is deleted, translations are not necessarily deleted so things like bookings must be transferred to a translation and that",
      "//check to see if there's any translations of this event, provide first available one otherwise the default language should the original not be in tha",
      "// first available translation",
      "// provide the default language if not the original language",
      "//if so check if the default language still exists",
      "//make that translation the master event by changing event ids of bookings, tickets etc. to the new master event",
      "//adjust the event_parent pointer",
      "//other add-ons with tables with event_id foreign keys should hook here and change",
      "/**\n\t * Changes the event id of the link for duplication so that it duplicates the original event instead of a translation.\n\t * Translation plugins sh",
      "//this gets escaped later",
      "/**\n\t * When an event is duplicated, we need to get the original event's translations and copy them as duplicates of the current event.\n\t * An assumpt",
      "// chehck we're on a newer WPML version, if we're using WPML, this will be depracated eventually",
      "// we only duplicate the original event",
      "//get the translation info of the duplicated event, for use later on",
      "/* @var $event EM_Event */",
      "// get translations and loop through them to duplicate",
      "//check that we're not in the original language, as that has been duplicated already",
      "//get the translation of original event that was duplicated if exists and duplicate it",
      "// change parent to new event",
      "/**\n\t * Saves the original event recurring ID into translated recurring events, for easy reference when finding translations to reschedule.\n\t * @param",
      "//do this early on so we know the language we're dealing with",
      "// save parent info about this event",
      "// make this a recurrence of the original language, even though this is a recurring event",
      "/**\n\t * Saves translations of an original translation when the original has been saved.\n\t * @param bool $result\n\t * @param EM_Event $EM_Event\n\t * @ret",
      "//save post meta for all others as well",
      "/**\n\t * Additional cleanup in case a recurrence was translated before translating a recurring event, which results in the recurrence having the recurr",
      "// copied from EM_Event->delete_events function",
      "/**\n\t * Prevent language searches hindering deletion and manipulation of events via the EM_Events::get search\n\t */",
      "/**\n\t * Links translations of events to the original language event recurrences, also triggers a saving/updating or translated recurrences when the or",
      "// first, we obtain the original event, get all the recurrences, and match the timestamp of each translation with that post ID and set the recurrence.",
      "// get original recurrences, sort them by timestamp",
      "// join the original post_ids with the new post_ids based on timestamp, delete any posts that have no identical times since we can't link the translat",
      "// delete the event as there's no match",
      "// attach the events",
      "// correct the wp_postmeta table which will have inherited the parent id of the recurring event",
      "// firstly, we need to save the language of these events, since they were added directly, not via insert_post",
      "//we need to recreate the translations as well, rescheduling them as well. this function will get called again, but it'll hit the earlier if and not b",
      "//prevent overriding of bookings for translations whilst saving",
      "/* @var EM_Event $event */",
      "//specifically skip creation/recreation of tickets/booking-data for translations, as these are overriden by ML functions",
      "//this will save the current event and call this function again to pass through the top if clause",
      "//we need to save tickets in any case in case they were translated",
      "//static::tickets_save( true, $EM_Event->get_tickets() );",
      "/**\n\t * @param bool $result\n\t * @param EM_Event $EM_Event\n\t * @return bool\n\t */",
      "//infinite loop prevention",
      "/* @var EM_Event $event */",
      "/**\n\t * Saves ticket meta to recurrences if the event is a recurring event.\n\t * @param $result\n\t * @param EM_Tickets $EM_Tickets\n\t */",
      "//if this is a recurring event, we should save all the ticket meta to the equivalent tickets belonging to the recurrences",
      "//get original event recurrence, not the translation (even though the bookings object points to the same data) just in case",
      "//we need to update ticket meta fields so they have translation data",
      "/* @var EM_Ticket $EM_Ticket */",
      "//get tickets that are recurrences",
      "/**\n\t * Runs through deleted tickets and passes them through the single ticket_delete function.\n\t * @param boolean $result\n\t * @param array[int] $tick",
      "/**\n\t * Hooks into em_ticket_delete and allows multilingual plugins ot delete any external ticket string management. Note that\n\t * the $EM_Ticket may "
    ],
    "length": 22987,
    "preview": "<?php\n/**\n * Model-related functions. Each ML plugin will do its own thing so must be accounted for accordingly. Below is a description of things that should happen so everything 'works'.\n *\n * When an event or location is saved, we need to perform c",
    "file": "src/code/events-manager/multilingual/em-ml-io.php"
  }
]